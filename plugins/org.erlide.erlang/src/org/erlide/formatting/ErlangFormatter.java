/*
 * generated by Xtext
 */
package org.erlide.formatting;

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.erlide.services.ErlangGrammarAccess;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an
 * example
 */
public class ErlangFormatter extends AbstractDeclarativeFormatter {

    @Override
    protected void configureFormatting(final FormattingConfig c) {

        c.setAutoLinewrap(80);

        // It's usually a good idea to activate the following three statements.
        // They will add and preserve newlines around comments
        c.setLinewrap(0, 1, 2).before(getGrammarAccess().getSL_COMMENTRule());
        // c.setLinewrap(0, 1,
        // 2).before(getGrammarAccess().getML_COMMENTRule());
        // c.setLinewrap(0, 1, 1).after(getGrammarAccess().getML_COMMENTRule());

        c.setNoSpace().after(
                getGrammarAccess().getAttributeAccess()
                        .getHyphenMinusKeyword_0());

        c.setSpace("\n").after(
                getGrammarAccess().getFunctionAccess()
                        .getFULL_STOPTerminalRuleCall_3());
        c.setIndentationDecrement().after(
                getGrammarAccess().getFunctionAccess()
                        .getFULL_STOPTerminalRuleCall_3());
        c.setLinewrap().after(
                getGrammarAccess().getFunctionAccess()
                        .getSemicolonKeyword_2_0());
        c.setIndentationDecrement().after(
                getGrammarAccess().getFunctionAccess()
                        .getSemicolonKeyword_2_0());

        c.setLinewrap().after(
                getGrammarAccess().getFunctionClauseAccess()
                        .getHyphenMinusGreaterThanSignKeyword_5());
        c.setIndentationIncrement().after(
                getGrammarAccess().getFunctionClauseAccess()
                        .getHyphenMinusGreaterThanSignKeyword_5());
    }

    @Override
    protected ErlangGrammarAccess getGrammarAccess() {
        return (ErlangGrammarAccess) super.getGrammarAccess();
    }
}
