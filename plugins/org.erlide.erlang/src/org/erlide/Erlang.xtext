grammar org.erlide.Erlang hidden(WS, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate erlang "http://www.erlide.org/Erlang"

Module:
	forms+=Form* 
;  

AtomRefTarget:
	  Module
	| Function
	| RecordAttribute
	| RecordFieldDef
;

Form:
	  Attribute 
	| Function
	| ConditionalFormBlock
	| {MacroForm} call=MacroCall FULL_STOP 
;

ConditionalFormBlock:
	condition=IfdefAttribute 
		ifForms+=Form* 
	(=> hasElse?=ElseAttribute 
		elseForms+=Form*
	)? 
	end=EndifAttribute
;

// Attributes

Attribute:
	  ModuleAttribute
	| DefineAttribute
	| UndefAttribute 
	| AbstractIncludeAttribute
	| FileAttribute
	| RecordAttribute
	| AbstractTypeAttribute	
	| ExportAttribute
	| ImportAttribute
	| CompileAttribute
	| CustomAttribute
;

ConditionalAttribute:
	  IfdefAttribute
	| ElseAttribute
	| EndifAttribute
;

AbstractDefineAttribute:
	  DefineAttribute
	| UndefAttribute
;

DefineAttribute:
    '-' => tag='define' 		    
		'(' macroName=NAMEVAR // can't have feature 'name' because multiple defines with the same macro can exist 
		    ('(' (args+=PatternExpression (',' args+=PatternExpression)*)? ')' )? 
	    	(',' value=Guard?)? 
		')'
	FULL_STOP		 
;

UndefAttribute:
	'-' => tag='undef' '(' ref=MacroRef ')' FULL_STOP
;

IfdefAttribute:
	'-' => tag=('ifdef'|'ifndef') '(' ref=MacroRef ')' FULL_STOP
;

ElseAttribute:
	'-' => tag='else' FULL_STOP
;

EndifAttribute:
	'-' => tag='endif'	FULL_STOP
;

AbstractIncludeAttribute:
	  IncludeAttribute
	| IncludeLibAttribute
;
	
IncludeAttribute:
	'-' => tag=('include') '(' importURI=STRING ')' FULL_STOP
;

IncludeLibAttribute:
	'-' => tag=('include_lib') '(' importURI=STRING ')' FULL_STOP
;

FileAttribute:
	'-' => tag='file' '(' file=STRING ',' line=INTEGER ')' FULL_STOP
;

ModuleAttribute:
	'-' => tag='module' '(' moduleName=NAME ')' FULL_STOP
;

RecordAttribute:
	'-' => tag='record' '(' name=NAMEVAR ',' 
		(     '{' (fields+=RecordFieldDef (',' fields+=RecordFieldDef)*)? '}' 
			| recordMacro=MacroCall
		) 
	')' 
	FULL_STOP  
;

RecordFieldDef:
	name=NAMEVAR ('=' value=Expression)? ('::' type=TopType)?
;

ExportAttribute:
	'-' => tag='export' 
		'(' '[' (funs+=FunRef (',' funs+=FunRef)*)? ']' ')' 
	FULL_STOP
;

ImportAttribute:
	'-' => tag='import' 
		'(' module=AtomVarMacro ',' '[' (funs+=FunRef (',' funs+=FunRef)*)? ']' ')' 
	FULL_STOP
;

CompileAttribute:
	'-' => tag='compile' '(' options=Expression ')' 
	FULL_STOP
;

AbstractTypeAttribute:
  	  SpecAttribute
	| TypeAttribute
;

SpecAttribute:
	'-' => tag=('spec'|'callback') 
	(
  		      ref=SpecFun signatures+=TypeSig (';' signatures+=TypeSig)*
  		| '(' ref=SpecFun signatures+=TypeSig (';' signatures+=TypeSig)* ')'
	)
	FULL_STOP
;

TypeAttribute:
	'-' => tag=('type'|'opaque') 
	(
  	    	name=NAMEVAR '(' (args+=PatternExpression (',' args+=PatternExpression)*)? ')' '::' type=TopType 
  	  | '(' name=NAMEVAR '(' (args+=PatternExpression (',' args+=PatternExpression)*)? ')' '::' type=TopType ')'
	)
	FULL_STOP
;

CustomAttribute:
	'-' tag=ATOM '(' (value+=Expression (',' value+=Expression)*)? ')' FULL_STOP
;

// Functions

Function:
	name=NAME clauses+=FunctionClause ( ';' clauses+=FunctionClause )* FULL_STOP
;

// validate that all names for a function are identical
FunctionClause:
	  ref=NAME? '(' params=Expressions? ')' 
	  ('when'? guard=Guard)? // no 'when' if guard is a macro
	  '->' body=Expressions
;

Guard:
	guards+=Expressions (';' guards+=Expressions)*
;

Expressions:
	exprs+=LExpression (',' exprs+=LExpression)*
;

LExpression returns Expression:
	  => line?=LineExpr expr=Expression
	| Expression
;

LineExpr:
	'?' 'line'  
;

Expression returns Expression:
	  {CatchExpr} 'catch' expr=Expression 
	| Expr100 
;

Expr100 returns Expression: // right-associative
	Expr150 
	(   {MatchExpr.opLeft=current} op='=' opRight=Expr100
	  | {BinOp.opLeft=current} op=SENDOP opRight=Expr100
	)?;

Expr150 returns Expression:
	Expr160 ({BinOp.opLeft=current} op='orelse' opRight=Expr160)*;

Expr160 returns Expression:
	Expr200 ({BinOp.opLeft=current} op='andalso' opRight2=Expr200)*;

Expr200 returns Expression: // non-associative
	Expr300 ({BinOp.opLeft=current} op=COMPOP opRight=Expr300)?;

Expr300 returns Expression: 
	Expr400 ({BinOp.opLeft=current} op=LISTOP opRight=Expr400)*;

Expr400 returns Expression:
	Expr500 ({AddOp.opLeft=current} op=ADDOP opRight=Expr500)*;

Expr500 returns Expression:
	UnaryExpr ({MultOp.opLeft=current} op=MULTOP opRight=UnaryExpr)*;

UnaryExpr returns Expression:
	  {UnaryExpr} op=PREFIXOP operand=Expr700
	| Expr700
;

Expr700 returns Expression:
	Expr800 (	 
			// TODO can this be expressed better? 
			// we can have ?MACRO(args)(args2)
		  '(' {FunCall.target=current} args=Expressions? ')' 
		                                ('(' args2=Expressions? ')')?
		| ('#' {RecordExpr.ref=current} record=RecordExpr )+ 
	)? 
;

Expr800 returns Expression: // non-associative
	ExprMax ({RemoteTarget.module=current} ':' function=ExprMax)?
;

ExprMax returns Expression:
	  TermExpression
	| '(' Expression ')' 
	| {BlockExpr} 'begin' body=Expressions 'end' 
	| IfExpr 
	| CaseExpr 
	| ReceiveExpr 
	| FunExpr 
	| TryExpr
	| CondExpr
	| QueryExpr
	| LetExpr
;

TermExpression returns Expression:	  
	  Tuple
	| => ListComprehension 
	| List 
	| => BinaryComprehension 
	| Binary 
	| '#' RecordExpr
	| LiteralExpression
;

MacroCall:
	macroName=MacroLiteral (=> '(' args=Expressions? ')')?  
;

RecordExpr:
	rec=AtomVarMacro (('.' field=AtomVarMacro) | tuple=RecordTuple)
;

// NYI
QueryExpr:
	{QueryExpr} 'query'
;

// NYI
CondExpr:
	{CondExpr} 'cond'
;

// NYI
LetExpr:
	{LetExpr} 'let'
;

RecordTuple:
	{RecordTuple} '{' (fields+=RecordFieldExpr (',' fields+=RecordFieldExpr)*)? '}';

RecordFieldExpr:
	ref=AtomVarMacro ('=' value=Expression)? ('::' type=TopType)?
;

LiteralExpressionNoNumber returns Expression:
	  AtomRefLiteral
	| VariableLiteral 
	| {ErlChar} value=CHAR 
	| MacroLiteral 
	| StringLiteral  
;

AtomRefLiteral returns Expression: 
	{Atom} value=[AtomRefTarget|NAME]
;

MacroLiteral returns Expression:
	{Macro} value=[DefineAttribute|MACRO]
;

MacroRef returns Expression:
	{Macro} value=[DefineAttribute|NAMEVAR]
;

VariableLiteral returns Expression:
	{Variable} value=[Expression|VARIABLE]
;

StringLiteral returns Expression:
	string=STRING more+=StringLiteralPart*
;

StringLiteralPart:
	  string=STRING 
	| macro=MacroCall 
;

LiteralExpression returns Expression:
	  LiteralExpressionNoNumber
	| IntegerLiteral 
	| {ErlFloat} value=FLOAT
;

IntegerLiteral returns Expression:
	{ErlInteger} value=INTEGER
;

PatternExpression returns Expression:
	TermExpression (
		({MatchExpr.opLeft=current} op='=' opRight=TermExpression)+
	  | ({FunCall.target=current} '(' args=Expressions? ')') 
	)?
;

IfExpr:
	'if' clauses+=IfClause (';' clauses+=IfClause)* 'end'
;

IfClause:
	guard=Guard '->' body=Expressions
;

CaseExpr:
	'case' expr=Expression 'of' clauses+=CrClause (';' clauses+=CrClause)* 'end'
;

CrClause:
	expr=Expression ('when' guard=Guard)? '->' body=Expressions
;

ReceiveExpr:
	'receive' 
	( clauses+=CrClause (';' clauses+=CrClause)*
		('after' after_expr=Expression '->' after_body=Expressions)? 
	  | 'after' after_expr=Expression '->' after_body=Expressions 
	) 
	'end'
;

FunExpr:
	'fun' (FunRef | InlineFun)
;

FunRef:
	(module=AtomVarMacro ':')? function=AtomVarMacro '/' arity=IntVarMacro
;

InlineFun returns FunExpr:
	clauses+=FunctionClause (';' clauses+=FunctionClause)* 'end'
;

TryExpr:
	'try' body=Expressions  
	('of' of_clauses+=CrClause (';' of_clauses+=CrClause)*)? 
	( 'catch' catch+=TryClause (';' catch+=TryClause)* ('after' after_body=Expressions)? 
	  | 'after' after_body=Expressions
    )   
	'end'
;

TryClause:
	(=> (hdr=NAMEVAR ':')?) cond=PatternExpression 	
	('when' guard=Guard)? '->' body=Expressions
;

List returns ErlList:
	'[' 
	(
	  {ErlList} 
	  | elements+=Expression (',' elements+=Expression)* ('|' tail=Expression)? 
	)
	']'
;

ListComprehension:
	'[' element=Expression '||' generators+=LCExpr (',' generators+=LCExpr)* ']'
;

Tuple returns ErlTuple:
	'{' 
	(   {ErlTuple} 
		| elements+=Expression (',' elements+=Expression)*
	)
	'}';

BinaryComprehension:
	'<<' expr=TermExpression '||' generators+=LCExpr (',' generators+=LCExpr)* '>>'
;

Binary returns ErlBinary:
	'<<' (     
		  {ErlBinary}
		| elements+=BinaryItem (',' elements+=BinaryItem)*
	) '>>'
;

BinaryItem:
	expr=UnaryExprMax (=> ':' size=ExprMax)? (=> '/' types+=BitType ('-' type+=BitType)*)? 
;

BitType:
	typeName=NAME (':' size=INT)?
;

UnaryExprMax returns Expression:
	  {UnaryExpr} op=PREFIXOP operand=ExprMax
	| ExprMax
;

LCExpr:
	o1=Expression (op=('<-'|'<=') o2=Expression)? 
;

// Operators

ADDOP:
	'+' | '-' | 'bor' | 'bxor' | 'bsl' | 'bsr' | 'or' | 'xor';

MULTOP:
	'*' | '/' | 'div' | 'rem' | 'band' | 'and';

PREFIXOP:
	'+' | '-' | 'bnot' | 'not';

LISTOP:
	'++' | '--';

COMPOP:
	'==' | '/=' | '=<' | '<' | '>=' | '>' | '=:=' | '=/=';
	
SENDOP:
	'!';

// Literal combinations

AtomVarMacro returns Expression:
	AtomRefLiteral	| VariableLiteral | MacroLiteral
;

IntVarMacro returns Expression: 
	IntegerLiteral | VariableLiteral | MacroLiteral 
;

// Literals

NAME:
	ATOM | KW
;

NAMEVAR:
    ATOM | KW | VARIABLE
;

MACRO:
    ('?'|'??') (ATOM | KW1 | VARIABLE)
;

KW:
	KW1 | 'line'
;

KW1:
	  'spec' | 'endif' | 'ifdef' | 'ifndef' | 'type' | 'opaque' | 'record' 
	| 'undef' | 'module' | 'include' | 'include_lib' | 'define'  
	| 'file' | 'callback' | 'else' | 'export' | 'import' | 'compile'
;

RealKw:
	  'after' | 'and' | 'andalso' | 'band' | 'begin' | 'bnot' | 'bor' | 'bsl' 
	| 'bsr' | 'bxor' | 'case' | 'catch' | 'cond' | 'div' | 'end' | 'fun' 
	| 'if' | 'let' | 'not' | 'of' | 'or' | 'orelse' | 'query' | 'receive' 
	| 'rem' | 'try' | 'when' | 'xor';

terminal ATOM:
	  ATOM_STARTER IN_WORD_CHAR* 
	| "'" ('\\' ESCAPE | !('\\' | "'"))* ("'" | EOF)
;

terminal STRING:
	'"' ('\\' ESCAPE | !('\\' | '"'))* ('"' | EOF);

terminal VARIABLE:
	('A'..'Z' | '_' | 'À'..'Ö' | 'Ø'..'Þ') IN_WORD_CHAR*;

terminal SL_COMMENT:
	'%' !('\n' | '\r')* ('\r'? '\n' | EOF);

terminal WS:
	(!('!'..'~'|'\u00a1'..'\u00ff'))+
;

terminal FULL_STOP:
	'.' (WS | SL_COMMENT | EOF)
;

INTEGER:
	  INT 
	| BASED_INT 
;

terminal BASED_INT:
	('1'..'3')? ('0'..'9') '#' ('0'..'9' | 'a'..'z' | 'A'..'Z')+
;

terminal INT:
	('0'..'9')+ 
;

FLOAT hidden():
	INT '.' ( EXT_INT | INT ) 
;

terminal EXT_INT:
	INT ('e' | 'E') ('+' | '-')? INT
;

terminal CHAR:
	'$' ('\\' ESCAPE | .);

terminal fragment IN_WORD_CHAR:
     'a'..'z' | 'A'..'Z' | '_' | '@' | '0'..'9' | 'ß'..'ö' | 'ø'..'ÿ' | 'À'..'Ö' | 'Ø'..'Þ'
;

terminal fragment ATOM_STARTER:
    'a'..'z' | 'ß'..'ö' | 'ø'..'ÿ'
;

terminal fragment ESCAPE:
	( 'b' | 'd' | 'e' | 'f' | 'n' | 'r' | 's' | 't' | 'v'
		| '0'..'7' ('0'..'7' '0'..'7'?)?
		| ('x'|'X') HEX_DIGIT HEX_DIGIT
		| ('x'|'X') '{' HEX_DIGIT+ '}'
		| '^' ('a'..'z' | 'A'..'Z' | ']')
		| .
	)
;

terminal fragment HEX_DIGIT:
	'0'..'9' | 'A'..'F' | 'a'..'f'
;

// Type language

SpecFun returns FunRef:
	(module=AtomVarMacro ':')? function=AtomVarMacro ('/' arity=IntVarMacro '::')?
;

TypeSig:
	decl=FunType ('when' guards=TypeGuards)?;

FunType:
	'(' (args+=TopType (',' args+=TopType)*)? ')' '->' return=TopType;

TypeGuards:
	items+=TypeGuard (',' items+=TypeGuard)*;

TypeGuard:
	  typeName=NAME '(' types+=TopType (',' types+=TopType)* ')' 
	| typeName=VARIABLE '::' type=TopType
;

TopType:
	(var=VARIABLE '::')? type=Type100;

Type100:
	Type200 (=> ({TopType.leftOperand=current} op='|') rightOperand=Type200)*;

Type200:
	Type300 (=> ({TopType.leftOperand=current} op='..') rightOperand=Type300)*;

Type300:
	Type400 (=> ({TopType.leftOperand=current} op=ADDOP) rightOperand=Type400)*;

Type400:
	Type500 (=> ({TopType.leftOperand=current} op=MULTOP) rightOperand=Type500)*;

Type500:
	  {UnaryType} op=PREFIXOP operand=Type
	| Type
;

Type:
	'(' TopType ')' 
	| {RemoteType} (m=AtomVarMacro ':')? typeName=NAME ('(' (args+=TopType (',' args+=TopType)*)? ')')? 
	| typeName=VARIABLE 
	| value=INTEGER 
	| '[' {ListType} (type=TopType	(',' '...')?)? ']' 
	| '{' {TupleType} (types+=TopType (',' types+=TopType)*)? '}' 
	| '#' {RecordType} rec=NAME '{' (fields+=FieldType (',' fields+=FieldType)*)? '}' 
	| BinaryType
	| 'fun' {FunType} '(' type=FunType100? ')' 
;

FieldType:
	typeName=NAME '::' type=TopType;

BinaryType:
	'<<' {BinaryType}
	(type+=BinBaseType (',' type+=BinUnitType)? | type+=BinUnitType)? 
	'>>'
;

BinBaseType:
	typeName=VARIABLE ':' type=Type;

BinUnitType:
	typeName=VARIABLE ':' m=VARIABLE '*' type=Type;

FunType100:
	{FunTypeList} '(' ('...' | (items+=TopType (',' items+=TopType)*))? ')' '->' return=TopType;


	