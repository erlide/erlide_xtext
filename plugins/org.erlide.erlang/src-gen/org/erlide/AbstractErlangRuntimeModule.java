/*
 * generated by Xtext
 */
package org.erlide;

import java.util.Properties;

import org.eclipse.xtext.Constants;

import com.google.inject.Binder;
import com.google.inject.name.Names;

/**
 * Manual modifications go to {org.erlide.ErlangRuntimeModule}
 */
@SuppressWarnings("all")
public abstract class AbstractErlangRuntimeModule extends
        org.eclipse.xtext.service.DefaultRuntimeModule {

    protected Properties properties = null;

    @Override
    public void configure(final Binder binder) {
        properties = tryBindProperties(binder, "org/erlide/Erlang.properties");
        super.configure(binder);
    }

    public void configureLanguageName(final Binder binder) {
        binder.bind(String.class)
                .annotatedWith(Names.named(Constants.LANGUAGE_NAME))
                .toInstance("org.erlide.Erlang");
    }

    public void configureFileExtensions(final Binder binder) {
        if (properties == null
                || properties.getProperty(Constants.FILE_EXTENSIONS) == null) {
            binder.bind(String.class)
                    .annotatedWith(Names.named(Constants.FILE_EXTENSIONS))
                    .toInstance("erl");
        }
    }

    // contributed by
    // org.eclipse.xtext.generator.grammarAccess.GrammarAccessFragment
    public java.lang.ClassLoader bindClassLoaderToInstance() {
        return getClass().getClassLoader();
    }

    // contributed by
    // org.eclipse.xtext.generator.grammarAccess.GrammarAccessFragment
    public Class<? extends org.eclipse.xtext.IGrammarAccess> bindIGrammarAccess() {
        return org.erlide.services.ErlangGrammarAccess.class;
    }

    // contributed by org.eclipse.xtext.generator.serializer.SerializerFragment
    @Override
    public Class<? extends org.eclipse.xtext.serializer.sequencer.ISemanticSequencer> bindISemanticSequencer() {
        return org.erlide.serializer.ErlangSemanticSequencer.class;
    }

    // contributed by org.eclipse.xtext.generator.serializer.SerializerFragment
    public Class<? extends org.eclipse.xtext.serializer.sequencer.ISyntacticSequencer> bindISyntacticSequencer() {
        return org.erlide.serializer.ErlangSyntacticSequencer.class;
    }

    // contributed by org.eclipse.xtext.generator.serializer.SerializerFragment
    @Override
    public Class<? extends org.eclipse.xtext.serializer.ISerializer> bindISerializer() {
        return org.eclipse.xtext.serializer.impl.Serializer.class;
    }

    // contributed by
    // org.eclipse.xtext.generator.parseTreeConstructor.ParseTreeConstructorFragment
    public Class<? extends org.eclipse.xtext.parsetree.reconstr.IParseTreeConstructor> bindIParseTreeConstructor() {
        return org.erlide.parseTreeConstruction.ErlangParsetreeConstructor.class;
    }

    // contributed by
    // org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment
    public Class<? extends org.eclipse.xtext.parser.IParser> bindIParser() {
        return org.erlide.parser.antlr.ErlangParser.class;
    }

    // contributed by
    // org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment
    @Override
    public Class<? extends org.eclipse.xtext.parser.ITokenToStringConverter> bindITokenToStringConverter() {
        return org.eclipse.xtext.parser.antlr.AntlrTokenToStringConverter.class;
    }

    // contributed by
    // org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment
    public Class<? extends org.eclipse.xtext.parser.antlr.IAntlrTokenFileProvider> bindIAntlrTokenFileProvider() {
        return org.erlide.parser.antlr.ErlangAntlrTokenFileProvider.class;
    }

    // contributed by
    // org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment
    public Class<? extends org.eclipse.xtext.parser.antlr.Lexer> bindLexer() {
        return org.erlide.parser.antlr.internal.InternalErlangLexer.class;
    }

    // contributed by
    // org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment
    public com.google.inject.Provider<org.erlide.parser.antlr.internal.InternalErlangLexer> provideInternalErlangLexer() {
        return org.eclipse.xtext.parser.antlr.LexerProvider
                .create(org.erlide.parser.antlr.internal.InternalErlangLexer.class);
    }

    // contributed by
    // org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment
    public void configureRuntimeLexer(final com.google.inject.Binder binder) {
        binder.bind(org.eclipse.xtext.parser.antlr.Lexer.class)
                .annotatedWith(
                        com.google.inject.name.Names
                                .named(org.eclipse.xtext.parser.antlr.LexerBindings.RUNTIME))
                .to(org.erlide.parser.antlr.internal.InternalErlangLexer.class);
    }

    // contributed by
    // org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment
    @Override
    public Class<? extends org.eclipse.xtext.parser.antlr.ITokenDefProvider> bindITokenDefProvider() {
        return org.eclipse.xtext.parser.antlr.AntlrTokenDefProvider.class;
    }

    // contributed by
    // org.eclipse.xtext.generator.validation.JavaValidatorFragment
    @org.eclipse.xtext.service.SingletonBinding(eager = true)
    public Class<? extends org.erlide.validation.ErlangJavaValidator> bindErlangJavaValidator() {
        return org.erlide.validation.ErlangJavaValidator.class;
    }

    // contributed by
    // org.eclipse.xtext.generator.scoping.AbstractScopingFragment
    @Override
    public Class<? extends org.eclipse.xtext.scoping.IScopeProvider> bindIScopeProvider() {
        return org.erlide.scoping.ErlangScopeProvider.class;
    }

    // contributed by
    // org.eclipse.xtext.generator.scoping.AbstractScopingFragment
    public void configureIScopeProviderDelegate(
            final com.google.inject.Binder binder) {
        binder.bind(org.eclipse.xtext.scoping.IScopeProvider.class)
                .annotatedWith(
                        com.google.inject.name.Names
                                .named(org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider.NAMED_DELEGATE))
                .to(org.eclipse.xtext.scoping.impl.ImportedNamespaceAwareLocalScopeProvider.class);
    }

    // contributed by
    // org.eclipse.xtext.generator.scoping.AbstractScopingFragment
    @Override
    public Class<? extends org.eclipse.xtext.scoping.IGlobalScopeProvider> bindIGlobalScopeProvider() {
        return org.eclipse.xtext.scoping.impl.DefaultGlobalScopeProvider.class;
    }

    // contributed by
    // org.eclipse.xtext.generator.scoping.AbstractScopingFragment
    public void configureIgnoreCaseLinking(final com.google.inject.Binder binder) {
        binder.bindConstant()
                .annotatedWith(
                        org.eclipse.xtext.scoping.IgnoreCaseLinking.class)
                .to(false);
    }

    // contributed by
    // org.eclipse.xtext.generator.exporting.QualifiedNamesFragment
    @Override
    public Class<? extends org.eclipse.xtext.naming.IQualifiedNameProvider> bindIQualifiedNameProvider() {
        return org.eclipse.xtext.naming.DefaultDeclarativeQualifiedNameProvider.class;
    }

    // contributed by
    // org.eclipse.xtext.generator.builder.BuilderIntegrationFragment
    @Override
    public Class<? extends org.eclipse.xtext.resource.IContainer.Manager> bindIContainer$Manager() {
        return org.eclipse.xtext.resource.containers.StateBasedContainerManager.class;
    }

    // contributed by
    // org.eclipse.xtext.generator.builder.BuilderIntegrationFragment
    public Class<? extends org.eclipse.xtext.resource.containers.IAllContainersState.Provider> bindIAllContainersState$Provider() {
        return org.eclipse.xtext.resource.containers.ResourceSetBasedAllContainersStateProvider.class;
    }

    // contributed by
    // org.eclipse.xtext.generator.builder.BuilderIntegrationFragment
    @Override
    public void configureIResourceDescriptions(
            final com.google.inject.Binder binder) {
        binder.bind(org.eclipse.xtext.resource.IResourceDescriptions.class)
                .to(org.eclipse.xtext.resource.impl.ResourceSetBasedResourceDescriptions.class);
    }

    // contributed by
    // org.eclipse.xtext.generator.builder.BuilderIntegrationFragment
    public void configureIResourceDescriptionsPersisted(
            final com.google.inject.Binder binder) {
        binder.bind(org.eclipse.xtext.resource.IResourceDescriptions.class)
                .annotatedWith(
                        com.google.inject.name.Names
                                .named(org.eclipse.xtext.resource.impl.ResourceDescriptionsProvider.PERSISTED_DESCRIPTIONS))
                .to(org.eclipse.xtext.resource.impl.ResourceSetBasedResourceDescriptions.class);
    }

    // contributed by org.eclipse.xtext.generator.formatting.FormatterFragment
    @Override
    public Class<? extends org.eclipse.xtext.formatting.IFormatter> bindIFormatter() {
        return org.erlide.formatting.ErlangFormatter.class;
    }

}
