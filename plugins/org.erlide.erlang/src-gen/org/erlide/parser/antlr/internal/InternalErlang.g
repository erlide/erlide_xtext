/*
* generated by Xtext
*/
grammar InternalErlang;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.erlide.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.erlide.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.erlide.services.ErlangGrammarAccess;

}

@parser::members {

 	private ErlangGrammarAccess grammarAccess;
 	
    public InternalErlangParser(TokenStream input, ErlangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Module";	
   	}
   	
   	@Override
   	protected ErlangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;

// Rule Module
ruleModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getFormsFormParserRuleCall_0()); 
	    }
		lv_forms_0_0=ruleForm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"forms",
        		lv_forms_0_0, 
        		"Form");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;







// Entry rule entryRuleForm
entryRuleForm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFormRule()); }
	 iv_ruleForm=ruleForm 
	 { $current=$iv_ruleForm.current; } 
	 EOF 
;

// Rule Form
ruleForm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFormAccess().getAttributeParserRuleCall_0()); 
    }
    this_Attribute_0=ruleAttribute
    { 
        $current = $this_Attribute_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFormAccess().getFunctionParserRuleCall_1()); 
    }
    this_Function_1=ruleFunction
    { 
        $current = $this_Function_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFormAccess().getConditionalFormBlockParserRuleCall_2()); 
    }
    this_ConditionalFormBlock_2=ruleConditionalFormBlock
    { 
        $current = $this_ConditionalFormBlock_2.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFormAccess().getMacroFormAction_3_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFormAccess().getCallMacroCallParserRuleCall_3_1_0()); 
	    }
		lv_call_4_0=ruleMacroCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormRule());
	        }
       		set(
       			$current, 
       			"call",
        		lv_call_4_0, 
        		"MacroCall");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='.' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFormAccess().getFullStopKeyword_3_2());
    }
))
;





// Entry rule entryRuleConditionalFormBlock
entryRuleConditionalFormBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalFormBlockRule()); }
	 iv_ruleConditionalFormBlock=ruleConditionalFormBlock 
	 { $current=$iv_ruleConditionalFormBlock.current; } 
	 EOF 
;

// Rule ConditionalFormBlock
ruleConditionalFormBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalFormBlockAccess().getConditionIfdefAttributeParserRuleCall_0_0()); 
	    }
		lv_condition_0_0=ruleIfdefAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalFormBlockRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_0_0, 
        		"IfdefAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalFormBlockAccess().getIfFormsFormParserRuleCall_1_0()); 
	    }
		lv_ifForms_1_0=ruleForm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalFormBlockRule());
	        }
       		add(
       			$current, 
       			"ifForms",
        		lv_ifForms_1_0, 
        		"Form");
	        afterParserOrEnumRuleCall();
	    }

)
)*(((
(
ruleElseAttribute
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalFormBlockAccess().getHasElseElseAttributeParserRuleCall_2_0_0()); 
	    }
		lv_hasElse_2_0=ruleElseAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalFormBlockRule());
	        }
       		set(
       			$current, 
       			"hasElse",
        		true, 
        		"ElseAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalFormBlockAccess().getElseFormsFormParserRuleCall_2_1_0()); 
	    }
		lv_elseForms_3_0=ruleForm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalFormBlockRule());
	        }
       		add(
       			$current, 
       			"elseForms",
        		lv_elseForms_3_0, 
        		"Form");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalFormBlockAccess().getEndEndifAttributeParserRuleCall_3_0()); 
	    }
		lv_end_4_0=ruleEndifAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalFormBlockRule());
	        }
       		set(
       			$current, 
       			"end",
        		lv_end_4_0, 
        		"EndifAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='-' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAttributeAccess().getHyphenMinusKeyword_0());
    }
(((
(
	'module' 
 

)
)=>
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getModuleAttributeParserRuleCall_1_0()); 
    }
    this_ModuleAttribute_1=ruleModuleAttribute
    { 
        $current = $this_ModuleAttribute_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |((
(
	'encoding' 
 

)
)=>
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getEncodingAttributeParserRuleCall_1_1()); 
    }
    this_EncodingAttribute_2=ruleEncodingAttribute
    { 
        $current = $this_EncodingAttribute_2.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getAbstractDefineAttributeParserRuleCall_1_2()); 
    }
    this_AbstractDefineAttribute_3=ruleAbstractDefineAttribute
    { 
        $current = $this_AbstractDefineAttribute_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getAbstractIncludeAttributeParserRuleCall_1_3()); 
    }
    this_AbstractIncludeAttribute_4=ruleAbstractIncludeAttribute
    { 
        $current = $this_AbstractIncludeAttribute_4.current; 
        afterParserOrEnumRuleCall();
    }

    |((
(
	'file' 
 

)
)=>
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getFileAttributeParserRuleCall_1_4()); 
    }
    this_FileAttribute_5=ruleFileAttribute
    { 
        $current = $this_FileAttribute_5.current; 
        afterParserOrEnumRuleCall();
    }
)
    |((
(
	'record' 
 

)
)=>
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getRecordAttributeParserRuleCall_1_5()); 
    }
    this_RecordAttribute_6=ruleRecordAttribute
    { 
        $current = $this_RecordAttribute_6.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getAbstractTypeAttributeParserRuleCall_1_6()); 
    }
    this_AbstractTypeAttribute_7=ruleAbstractTypeAttribute
    { 
        $current = $this_AbstractTypeAttribute_7.current; 
        afterParserOrEnumRuleCall();
    }

    |((
(
	'export' 
 

)
)=>
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getExportAttributeParserRuleCall_1_7()); 
    }
    this_ExportAttribute_8=ruleExportAttribute
    { 
        $current = $this_ExportAttribute_8.current; 
        afterParserOrEnumRuleCall();
    }
)
    |((
(
	'import' 
 

)
)=>
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getImportAttributeParserRuleCall_1_8()); 
    }
    this_ImportAttribute_9=ruleImportAttribute
    { 
        $current = $this_ImportAttribute_9.current; 
        afterParserOrEnumRuleCall();
    }
)
    |((
(
	'compile' 
 

)
)=>
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getCompileAttributeParserRuleCall_1_9()); 
    }
    this_CompileAttribute_10=ruleCompileAttribute
    { 
        $current = $this_CompileAttribute_10.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getCustomAttributeParserRuleCall_1_10()); 
    }
    this_CustomAttribute_11=ruleCustomAttribute
    { 
        $current = $this_CustomAttribute_11.current; 
        afterParserOrEnumRuleCall();
    }
))
;







// Entry rule entryRuleAbstractDefineAttribute
entryRuleAbstractDefineAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractDefineAttributeRule()); }
	 iv_ruleAbstractDefineAttribute=ruleAbstractDefineAttribute 
	 { $current=$iv_ruleAbstractDefineAttribute.current; } 
	 EOF 
;

// Rule AbstractDefineAttribute
ruleAbstractDefineAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
	'define' 
 

)
)=>
    { 
        newCompositeNode(grammarAccess.getAbstractDefineAttributeAccess().getDefineAttributeParserRuleCall_0()); 
    }
    this_DefineAttribute_0=ruleDefineAttribute
    { 
        $current = $this_DefineAttribute_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |((
(
	'undef' 
 

)
)=>
    { 
        newCompositeNode(grammarAccess.getAbstractDefineAttributeAccess().getUndefAttributeParserRuleCall_1()); 
    }
    this_UndefAttribute_1=ruleUndefAttribute
    { 
        $current = $this_UndefAttribute_1.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleDefineAttribute
entryRuleDefineAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefineAttributeRule()); }
	 iv_ruleDefineAttribute=ruleDefineAttribute 
	 { $current=$iv_ruleDefineAttribute.current; } 
	 EOF 
;

// Rule DefineAttribute
ruleDefineAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
	'define' 
 

)
)=>
(
		lv_tag_0_0=	'define' 
    {
        newLeafNode(lv_tag_0_0, grammarAccess.getDefineAttributeAccess().getTagDefineKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefineAttributeRule());
	        }
       		setWithLastConsumed($current, "tag", lv_tag_0_0, "define");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDefineAttributeAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefineAttributeAccess().getMacroNameNAMEVARParserRuleCall_2_0()); 
	    }
		lv_macroName_2_0=ruleNAMEVAR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefineAttributeRule());
	        }
       		set(
       			$current, 
       			"macroName",
        		lv_macroName_2_0, 
        		"NAMEVAR");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDefineAttributeAccess().getLeftParenthesisKeyword_3_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getDefineAttributeAccess().getArgsPatternExpressionParserRuleCall_3_1_0_0()); 
	    }
		lv_args_4_0=rulePatternExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefineAttributeRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_4_0, 
        		"PatternExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDefineAttributeAccess().getCommaKeyword_3_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefineAttributeAccess().getArgsPatternExpressionParserRuleCall_3_1_1_1_0()); 
	    }
		lv_args_6_0=rulePatternExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefineAttributeRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_6_0, 
        		"PatternExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDefineAttributeAccess().getRightParenthesisKeyword_3_2());
    }
)?(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDefineAttributeAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefineAttributeAccess().getValueGuardParserRuleCall_4_1_0()); 
	    }
		lv_value_9_0=ruleGuard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefineAttributeRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_9_0, 
        		"Guard");
	        afterParserOrEnumRuleCall();
	    }

)
)?)?	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getDefineAttributeAccess().getRightParenthesisKeyword_5());
    }
	otherlv_11='.' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getDefineAttributeAccess().getFullStopKeyword_6());
    }
)
;





// Entry rule entryRuleUndefAttribute
entryRuleUndefAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUndefAttributeRule()); }
	 iv_ruleUndefAttribute=ruleUndefAttribute 
	 { $current=$iv_ruleUndefAttribute.current; } 
	 EOF 
;

// Rule UndefAttribute
ruleUndefAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
	'undef' 
 

)
)=>
(
		lv_tag_0_0=	'undef' 
    {
        newLeafNode(lv_tag_0_0, grammarAccess.getUndefAttributeAccess().getTagUndefKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUndefAttributeRule());
	        }
       		setWithLastConsumed($current, "tag", lv_tag_0_0, "undef");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUndefAttributeAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUndefAttributeAccess().getRefMacroRefParserRuleCall_2_0()); 
	    }
		lv_ref_2_0=ruleMacroRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUndefAttributeRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_2_0, 
        		"MacroRef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUndefAttributeAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='.' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUndefAttributeAccess().getFullStopKeyword_4());
    }
)
;





// Entry rule entryRuleIfdefAttribute
entryRuleIfdefAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfdefAttributeRule()); }
	 iv_ruleIfdefAttribute=ruleIfdefAttribute 
	 { $current=$iv_ruleIfdefAttribute.current; } 
	 EOF 
;

// Rule IfdefAttribute
ruleIfdefAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='-' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfdefAttributeAccess().getHyphenMinusKeyword_0());
    }
((
(
(
	'ifdef' 
 

    |			'ifndef' 
 

)

)
)=>
(
(
		lv_tag_1_1=	'ifdef' 
    {
        newLeafNode(lv_tag_1_1, grammarAccess.getIfdefAttributeAccess().getTagIfdefKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIfdefAttributeRule());
	        }
       		setWithLastConsumed($current, "tag", lv_tag_1_1, null);
	    }

    |		lv_tag_1_2=	'ifndef' 
    {
        newLeafNode(lv_tag_1_2, grammarAccess.getIfdefAttributeAccess().getTagIfndefKeyword_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIfdefAttributeRule());
	        }
       		setWithLastConsumed($current, "tag", lv_tag_1_2, null);
	    }

)

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIfdefAttributeAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfdefAttributeAccess().getRefMacroRefParserRuleCall_3_0()); 
	    }
		lv_ref_3_0=ruleMacroRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfdefAttributeRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_3_0, 
        		"MacroRef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfdefAttributeAccess().getRightParenthesisKeyword_4());
    }
	otherlv_5='.' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIfdefAttributeAccess().getFullStopKeyword_5());
    }
)
;





// Entry rule entryRuleElseAttribute
entryRuleElseAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElseAttributeRule()); }
	 iv_ruleElseAttribute=ruleElseAttribute 
	 { $current=$iv_ruleElseAttribute.current; } 
	 EOF 
;

// Rule ElseAttribute
ruleElseAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='-' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getElseAttributeAccess().getHyphenMinusKeyword_0());
    }
((
(
	'else' 
 

)
)=>
(
		lv_tag_1_0=	'else' 
    {
        newLeafNode(lv_tag_1_0, grammarAccess.getElseAttributeAccess().getTagElseKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElseAttributeRule());
	        }
       		setWithLastConsumed($current, "tag", lv_tag_1_0, "else");
	    }

)
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getElseAttributeAccess().getFullStopKeyword_2());
    }
)
;





// Entry rule entryRuleEndifAttribute
entryRuleEndifAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEndifAttributeRule()); }
	 iv_ruleEndifAttribute=ruleEndifAttribute 
	 { $current=$iv_ruleEndifAttribute.current; } 
	 EOF 
;

// Rule EndifAttribute
ruleEndifAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='-' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEndifAttributeAccess().getHyphenMinusKeyword_0());
    }
((
(
	'endif' 
 

)
)=>
(
		lv_tag_1_0=	'endif' 
    {
        newLeafNode(lv_tag_1_0, grammarAccess.getEndifAttributeAccess().getTagEndifKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEndifAttributeRule());
	        }
       		setWithLastConsumed($current, "tag", lv_tag_1_0, "endif");
	    }

)
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEndifAttributeAccess().getFullStopKeyword_2());
    }
)
;





// Entry rule entryRuleAbstractIncludeAttribute
entryRuleAbstractIncludeAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractIncludeAttributeRule()); }
	 iv_ruleAbstractIncludeAttribute=ruleAbstractIncludeAttribute 
	 { $current=$iv_ruleAbstractIncludeAttribute.current; } 
	 EOF 
;

// Rule AbstractIncludeAttribute
ruleAbstractIncludeAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
	'include' 
 

)
)=>
    { 
        newCompositeNode(grammarAccess.getAbstractIncludeAttributeAccess().getIncludeAttributeParserRuleCall_0()); 
    }
    this_IncludeAttribute_0=ruleIncludeAttribute
    { 
        $current = $this_IncludeAttribute_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |((
(
	'include_lib' 
 

)
)=>
    { 
        newCompositeNode(grammarAccess.getAbstractIncludeAttributeAccess().getIncludeLibAttributeParserRuleCall_1()); 
    }
    this_IncludeLibAttribute_1=ruleIncludeLibAttribute
    { 
        $current = $this_IncludeLibAttribute_1.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleIncludeAttribute
entryRuleIncludeAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIncludeAttributeRule()); }
	 iv_ruleIncludeAttribute=ruleIncludeAttribute 
	 { $current=$iv_ruleIncludeAttribute.current; } 
	 EOF 
;

// Rule IncludeAttribute
ruleIncludeAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
	'include' 
 

)
)=>
(
		lv_tag_0_0=	'include' 
    {
        newLeafNode(lv_tag_0_0, grammarAccess.getIncludeAttributeAccess().getTagIncludeKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIncludeAttributeRule());
	        }
       		setWithLastConsumed($current, "tag", lv_tag_0_0, "include");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIncludeAttributeAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_importURI_2_0=RULE_STRING
		{
			newLeafNode(lv_importURI_2_0, grammarAccess.getIncludeAttributeAccess().getImportURISTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIncludeAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_2_0, 
        		"STRING");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIncludeAttributeAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='.' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIncludeAttributeAccess().getFullStopKeyword_4());
    }
)
;





// Entry rule entryRuleIncludeLibAttribute
entryRuleIncludeLibAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIncludeLibAttributeRule()); }
	 iv_ruleIncludeLibAttribute=ruleIncludeLibAttribute 
	 { $current=$iv_ruleIncludeLibAttribute.current; } 
	 EOF 
;

// Rule IncludeLibAttribute
ruleIncludeLibAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
	'include_lib' 
 

)
)=>
(
		lv_tag_0_0=	'include_lib' 
    {
        newLeafNode(lv_tag_0_0, grammarAccess.getIncludeLibAttributeAccess().getTagInclude_libKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIncludeLibAttributeRule());
	        }
       		setWithLastConsumed($current, "tag", lv_tag_0_0, "include_lib");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIncludeLibAttributeAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_importURI_2_0=RULE_STRING
		{
			newLeafNode(lv_importURI_2_0, grammarAccess.getIncludeLibAttributeAccess().getImportURISTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIncludeLibAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_2_0, 
        		"STRING");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIncludeLibAttributeAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='.' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIncludeLibAttributeAccess().getFullStopKeyword_4());
    }
)
;





// Entry rule entryRuleFileAttribute
entryRuleFileAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFileAttributeRule()); }
	 iv_ruleFileAttribute=ruleFileAttribute 
	 { $current=$iv_ruleFileAttribute.current; } 
	 EOF 
;

// Rule FileAttribute
ruleFileAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
	'file' 
 

)
)=>
(
		lv_tag_0_0=	'file' 
    {
        newLeafNode(lv_tag_0_0, grammarAccess.getFileAttributeAccess().getTagFileKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFileAttributeRule());
	        }
       		setWithLastConsumed($current, "tag", lv_tag_0_0, "file");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFileAttributeAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_file_2_0=RULE_STRING
		{
			newLeafNode(lv_file_2_0, grammarAccess.getFileAttributeAccess().getFileSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFileAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"file",
        		lv_file_2_0, 
        		"STRING");
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFileAttributeAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFileAttributeAccess().getLineINTEGERParserRuleCall_4_0()); 
	    }
		lv_line_4_0=ruleINTEGER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFileAttributeRule());
	        }
       		set(
       			$current, 
       			"line",
        		lv_line_4_0, 
        		"INTEGER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFileAttributeAccess().getRightParenthesisKeyword_5());
    }
	otherlv_6='.' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFileAttributeAccess().getFullStopKeyword_6());
    }
)
;





// Entry rule entryRuleModuleAttribute
entryRuleModuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleAttributeRule()); }
	 iv_ruleModuleAttribute=ruleModuleAttribute 
	 { $current=$iv_ruleModuleAttribute.current; } 
	 EOF 
;

// Rule ModuleAttribute
ruleModuleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
	'module' 
 

)
)=>
(
		lv_tag_0_0=	'module' 
    {
        newLeafNode(lv_tag_0_0, grammarAccess.getModuleAttributeAccess().getTagModuleKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleAttributeRule());
	        }
       		setWithLastConsumed($current, "tag", lv_tag_0_0, "module");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModuleAttributeAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAttributeAccess().getModuleNameNAMEParserRuleCall_2_0()); 
	    }
		lv_moduleName_2_0=ruleNAME		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleAttributeRule());
	        }
       		set(
       			$current, 
       			"moduleName",
        		lv_moduleName_2_0, 
        		"NAME");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModuleAttributeAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='.' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getModuleAttributeAccess().getFullStopKeyword_4());
    }
)
;





// Entry rule entryRuleEncodingAttribute
entryRuleEncodingAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEncodingAttributeRule()); }
	 iv_ruleEncodingAttribute=ruleEncodingAttribute 
	 { $current=$iv_ruleEncodingAttribute.current; } 
	 EOF 
;

// Rule EncodingAttribute
ruleEncodingAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
	'encoding' 
 

)
)=>
(
		lv_tag_0_0=	'encoding' 
    {
        newLeafNode(lv_tag_0_0, grammarAccess.getEncodingAttributeAccess().getTagEncodingKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEncodingAttributeRule());
	        }
       		setWithLastConsumed($current, "tag", lv_tag_0_0, "encoding");
	    }

)
)((	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEncodingAttributeAccess().getLeftParenthesisKeyword_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEncodingAttributeAccess().getCharsetNAMEParserRuleCall_1_0_1_0()); 
	    }
		lv_charset_2_0=ruleNAME		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEncodingAttributeRule());
	        }
       		set(
       			$current, 
       			"charset",
        		lv_charset_2_0, 
        		"NAME");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEncodingAttributeAccess().getRightParenthesisKeyword_1_0_2());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getEncodingAttributeAccess().getCharsetNAMEParserRuleCall_1_1_0()); 
	    }
		lv_charset_4_0=ruleNAME		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEncodingAttributeRule());
	        }
       		set(
       			$current, 
       			"charset",
        		lv_charset_4_0, 
        		"NAME");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_5='.' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEncodingAttributeAccess().getFullStopKeyword_2());
    }
)
;





// Entry rule entryRuleRecordAttribute
entryRuleRecordAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordAttributeRule()); }
	 iv_ruleRecordAttribute=ruleRecordAttribute 
	 { $current=$iv_ruleRecordAttribute.current; } 
	 EOF 
;

// Rule RecordAttribute
ruleRecordAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
	'record' 
 

)
)=>
(
		lv_tag_0_0=	'record' 
    {
        newLeafNode(lv_tag_0_0, grammarAccess.getRecordAttributeAccess().getTagRecordKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRecordAttributeRule());
	        }
       		setWithLastConsumed($current, "tag", lv_tag_0_0, "record");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRecordAttributeAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordAttributeAccess().getNameNAMEMACROParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleNAMEMACRO		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordAttributeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"NAMEMACRO");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRecordAttributeAccess().getCommaKeyword_3());
    }
((	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRecordAttributeAccess().getLeftCurlyBracketKeyword_4_0_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getRecordAttributeAccess().getFieldsRecordFieldDefParserRuleCall_4_0_1_0_0()); 
	    }
		lv_fields_5_0=ruleRecordFieldDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordAttributeRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_5_0, 
        		"RecordFieldDef");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRecordAttributeAccess().getCommaKeyword_4_0_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordAttributeAccess().getFieldsRecordFieldDefParserRuleCall_4_0_1_1_1_0()); 
	    }
		lv_fields_7_0=ruleRecordFieldDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordAttributeRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_7_0, 
        		"RecordFieldDef");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRecordAttributeAccess().getRightCurlyBracketKeyword_4_0_2());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordAttributeAccess().getRecordMacroMacroCallParserRuleCall_4_1_0()); 
	    }
		lv_recordMacro_9_0=ruleMacroCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordAttributeRule());
	        }
       		set(
       			$current, 
       			"recordMacro",
        		lv_recordMacro_9_0, 
        		"MacroCall");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRecordAttributeAccess().getRightParenthesisKeyword_5());
    }
	otherlv_11='.' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getRecordAttributeAccess().getFullStopKeyword_6());
    }
)
;





// Entry rule entryRuleRecordFieldDef
entryRuleRecordFieldDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordFieldDefRule()); }
	 iv_ruleRecordFieldDef=ruleRecordFieldDef 
	 { $current=$iv_ruleRecordFieldDef.current; } 
	 EOF 
;

// Rule RecordFieldDef
ruleRecordFieldDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRecordFieldDefAccess().getNameNAMEVARParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleNAMEVAR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordFieldDefRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"NAMEVAR");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRecordFieldDefAccess().getEqualsSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordFieldDefAccess().getValueExpressionParserRuleCall_1_1_0()); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordFieldDefRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_3='::' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRecordFieldDefAccess().getColonColonKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordFieldDefAccess().getTypeTopTypeParserRuleCall_2_1_0()); 
	    }
		lv_type_4_0=ruleTopType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordFieldDefRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"TopType");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleExportAttribute
entryRuleExportAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExportAttributeRule()); }
	 iv_ruleExportAttribute=ruleExportAttribute 
	 { $current=$iv_ruleExportAttribute.current; } 
	 EOF 
;

// Rule ExportAttribute
ruleExportAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
	'export' 
 

)
)=>
(
		lv_tag_0_0=	'export' 
    {
        newLeafNode(lv_tag_0_0, grammarAccess.getExportAttributeAccess().getTagExportKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExportAttributeRule());
	        }
       		setWithLastConsumed($current, "tag", lv_tag_0_0, "export");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExportAttributeAccess().getLeftParenthesisKeyword_1());
    }
	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExportAttributeAccess().getLeftSquareBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getExportAttributeAccess().getFunsFunRefParserRuleCall_3_0_0()); 
	    }
		lv_funs_3_0=ruleFunRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExportAttributeRule());
	        }
       		add(
       			$current, 
       			"funs",
        		lv_funs_3_0, 
        		"FunRef");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExportAttributeAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExportAttributeAccess().getFunsFunRefParserRuleCall_3_1_1_0()); 
	    }
		lv_funs_5_0=ruleFunRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExportAttributeRule());
	        }
       		add(
       			$current, 
       			"funs",
        		lv_funs_5_0, 
        		"FunRef");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getExportAttributeAccess().getRightSquareBracketKeyword_4());
    }
	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExportAttributeAccess().getRightParenthesisKeyword_5());
    }
	otherlv_8='.' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getExportAttributeAccess().getFullStopKeyword_6());
    }
)
;





// Entry rule entryRuleImportAttribute
entryRuleImportAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportAttributeRule()); }
	 iv_ruleImportAttribute=ruleImportAttribute 
	 { $current=$iv_ruleImportAttribute.current; } 
	 EOF 
;

// Rule ImportAttribute
ruleImportAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
	'import' 
 

)
)=>
(
		lv_tag_0_0=	'import' 
    {
        newLeafNode(lv_tag_0_0, grammarAccess.getImportAttributeAccess().getTagImportKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportAttributeRule());
	        }
       		setWithLastConsumed($current, "tag", lv_tag_0_0, "import");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getImportAttributeAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAttributeAccess().getModuleModuleVarMacroParserRuleCall_2_0()); 
	    }
		lv_module_2_0=ruleModuleVarMacro		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportAttributeRule());
	        }
       		set(
       			$current, 
       			"module",
        		lv_module_2_0, 
        		"ModuleVarMacro");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getImportAttributeAccess().getCommaKeyword_3());
    }
	otherlv_4='[' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getImportAttributeAccess().getLeftSquareBracketKeyword_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getImportAttributeAccess().getFunsFunRefParserRuleCall_5_0_0()); 
	    }
		lv_funs_5_0=ruleFunRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportAttributeRule());
	        }
       		add(
       			$current, 
       			"funs",
        		lv_funs_5_0, 
        		"FunRef");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getImportAttributeAccess().getCommaKeyword_5_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAttributeAccess().getFunsFunRefParserRuleCall_5_1_1_0()); 
	    }
		lv_funs_7_0=ruleFunRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportAttributeRule());
	        }
       		add(
       			$current, 
       			"funs",
        		lv_funs_7_0, 
        		"FunRef");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_8=']' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getImportAttributeAccess().getRightSquareBracketKeyword_6());
    }
	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getImportAttributeAccess().getRightParenthesisKeyword_7());
    }
	otherlv_10='.' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getImportAttributeAccess().getFullStopKeyword_8());
    }
)
;





// Entry rule entryRuleCompileAttribute
entryRuleCompileAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompileAttributeRule()); }
	 iv_ruleCompileAttribute=ruleCompileAttribute 
	 { $current=$iv_ruleCompileAttribute.current; } 
	 EOF 
;

// Rule CompileAttribute
ruleCompileAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
	'compile' 
 

)
)=>
(
		lv_tag_0_0=	'compile' 
    {
        newLeafNode(lv_tag_0_0, grammarAccess.getCompileAttributeAccess().getTagCompileKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCompileAttributeRule());
	        }
       		setWithLastConsumed($current, "tag", lv_tag_0_0, "compile");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCompileAttributeAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompileAttributeAccess().getOptionsExpressionParserRuleCall_2_0()); 
	    }
		lv_options_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompileAttributeRule());
	        }
       		set(
       			$current, 
       			"options",
        		lv_options_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCompileAttributeAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='.' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCompileAttributeAccess().getFullStopKeyword_4());
    }
)
;





// Entry rule entryRuleAbstractTypeAttribute
entryRuleAbstractTypeAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractTypeAttributeRule()); }
	 iv_ruleAbstractTypeAttribute=ruleAbstractTypeAttribute 
	 { $current=$iv_ruleAbstractTypeAttribute.current; } 
	 EOF 
;

// Rule AbstractTypeAttribute
ruleAbstractTypeAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
(
	'spec' 
 

    |			'callback' 
 

)

)
)=>
    { 
        newCompositeNode(grammarAccess.getAbstractTypeAttributeAccess().getSpecAttributeParserRuleCall_0()); 
    }
    this_SpecAttribute_0=ruleSpecAttribute
    { 
        $current = $this_SpecAttribute_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |((
(
(
	'type' 
 

    |			'opaque' 
 

)

)
)=>
    { 
        newCompositeNode(grammarAccess.getAbstractTypeAttributeAccess().getTypeAttributeParserRuleCall_1()); 
    }
    this_TypeAttribute_1=ruleTypeAttribute
    { 
        $current = $this_TypeAttribute_1.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleSpecAttribute
entryRuleSpecAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpecAttributeRule()); }
	 iv_ruleSpecAttribute=ruleSpecAttribute 
	 { $current=$iv_ruleSpecAttribute.current; } 
	 EOF 
;

// Rule SpecAttribute
ruleSpecAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
(
	'spec' 
 

    |			'callback' 
 

)

)
)=>
(
(
		lv_tag_0_1=	'spec' 
    {
        newLeafNode(lv_tag_0_1, grammarAccess.getSpecAttributeAccess().getTagSpecKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpecAttributeRule());
	        }
       		setWithLastConsumed($current, "tag", lv_tag_0_1, null);
	    }

    |		lv_tag_0_2=	'callback' 
    {
        newLeafNode(lv_tag_0_2, grammarAccess.getSpecAttributeAccess().getTagCallbackKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpecAttributeRule());
	        }
       		setWithLastConsumed($current, "tag", lv_tag_0_2, null);
	    }

)

)
)(((
(
		{ 
	        newCompositeNode(grammarAccess.getSpecAttributeAccess().getRefSpecFunParserRuleCall_1_0_0_0()); 
	    }
		lv_ref_1_0=ruleSpecFun		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecAttributeRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_1_0, 
        		"SpecFun");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecAttributeAccess().getSignaturesTypeSigParserRuleCall_1_0_1_0()); 
	    }
		lv_signatures_2_0=ruleTypeSig		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecAttributeRule());
	        }
       		add(
       			$current, 
       			"signatures",
        		lv_signatures_2_0, 
        		"TypeSig");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSpecAttributeAccess().getSemicolonKeyword_1_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecAttributeAccess().getSignaturesTypeSigParserRuleCall_1_0_2_1_0()); 
	    }
		lv_signatures_4_0=ruleTypeSig		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecAttributeRule());
	        }
       		add(
       			$current, 
       			"signatures",
        		lv_signatures_4_0, 
        		"TypeSig");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
    |(	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSpecAttributeAccess().getLeftParenthesisKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecAttributeAccess().getRefSpecFunParserRuleCall_1_1_1_0()); 
	    }
		lv_ref_6_0=ruleSpecFun		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecAttributeRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_6_0, 
        		"SpecFun");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecAttributeAccess().getSignaturesTypeSigParserRuleCall_1_1_2_0()); 
	    }
		lv_signatures_7_0=ruleTypeSig		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecAttributeRule());
	        }
       		add(
       			$current, 
       			"signatures",
        		lv_signatures_7_0, 
        		"TypeSig");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSpecAttributeAccess().getSemicolonKeyword_1_1_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecAttributeAccess().getSignaturesTypeSigParserRuleCall_1_1_3_1_0()); 
	    }
		lv_signatures_9_0=ruleTypeSig		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecAttributeRule());
	        }
       		add(
       			$current, 
       			"signatures",
        		lv_signatures_9_0, 
        		"TypeSig");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSpecAttributeAccess().getRightParenthesisKeyword_1_1_4());
    }
))	otherlv_11='.' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getSpecAttributeAccess().getFullStopKeyword_2());
    }
)
;





// Entry rule entryRuleTypeAttribute
entryRuleTypeAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeAttributeRule()); }
	 iv_ruleTypeAttribute=ruleTypeAttribute 
	 { $current=$iv_ruleTypeAttribute.current; } 
	 EOF 
;

// Rule TypeAttribute
ruleTypeAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
(
	'type' 
 

    |			'opaque' 
 

)

)
)=>
(
(
		lv_tag_0_1=	'type' 
    {
        newLeafNode(lv_tag_0_1, grammarAccess.getTypeAttributeAccess().getTagTypeKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeAttributeRule());
	        }
       		setWithLastConsumed($current, "tag", lv_tag_0_1, null);
	    }

    |		lv_tag_0_2=	'opaque' 
    {
        newLeafNode(lv_tag_0_2, grammarAccess.getTypeAttributeAccess().getTagOpaqueKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeAttributeRule());
	        }
       		setWithLastConsumed($current, "tag", lv_tag_0_2, null);
	    }

)

)
)(((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAttributeAccess().getNameNAMEVARParserRuleCall_1_0_0_0()); 
	    }
		lv_name_1_0=ruleNAMEVAR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeAttributeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"NAMEVAR");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeAttributeAccess().getLeftParenthesisKeyword_1_0_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAttributeAccess().getArgsPatternExpressionParserRuleCall_1_0_2_0_0()); 
	    }
		lv_args_3_0=rulePatternExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeAttributeRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_3_0, 
        		"PatternExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypeAttributeAccess().getCommaKeyword_1_0_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAttributeAccess().getArgsPatternExpressionParserRuleCall_1_0_2_1_1_0()); 
	    }
		lv_args_5_0=rulePatternExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeAttributeRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_5_0, 
        		"PatternExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTypeAttributeAccess().getRightParenthesisKeyword_1_0_3());
    }
	otherlv_7='::' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTypeAttributeAccess().getColonColonKeyword_1_0_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAttributeAccess().getTypeTopTypeParserRuleCall_1_0_5_0()); 
	    }
		lv_type_8_0=ruleTopType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeAttributeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_8_0, 
        		"TopType");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_9='(' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTypeAttributeAccess().getLeftParenthesisKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAttributeAccess().getNameNAMEVARParserRuleCall_1_1_1_0()); 
	    }
		lv_name_10_0=ruleNAMEVAR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeAttributeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_10_0, 
        		"NAMEVAR");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11='(' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTypeAttributeAccess().getLeftParenthesisKeyword_1_1_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAttributeAccess().getArgsPatternExpressionParserRuleCall_1_1_3_0_0()); 
	    }
		lv_args_12_0=rulePatternExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeAttributeRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_12_0, 
        		"PatternExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_13=',' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getTypeAttributeAccess().getCommaKeyword_1_1_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAttributeAccess().getArgsPatternExpressionParserRuleCall_1_1_3_1_1_0()); 
	    }
		lv_args_14_0=rulePatternExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeAttributeRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_14_0, 
        		"PatternExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_15=')' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getTypeAttributeAccess().getRightParenthesisKeyword_1_1_4());
    }
	otherlv_16='::' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getTypeAttributeAccess().getColonColonKeyword_1_1_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAttributeAccess().getTypeTopTypeParserRuleCall_1_1_6_0()); 
	    }
		lv_type_17_0=ruleTopType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeAttributeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_17_0, 
        		"TopType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_18=')' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getTypeAttributeAccess().getRightParenthesisKeyword_1_1_7());
    }
))	otherlv_19='.' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getTypeAttributeAccess().getFullStopKeyword_2());
    }
)
;





// Entry rule entryRuleCustomAttribute
entryRuleCustomAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCustomAttributeRule()); }
	 iv_ruleCustomAttribute=ruleCustomAttribute 
	 { $current=$iv_ruleCustomAttribute.current; } 
	 EOF 
;

// Rule CustomAttribute
ruleCustomAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_tag_0_0=RULE_ATOM
		{
			newLeafNode(lv_tag_0_0, grammarAccess.getCustomAttributeAccess().getTagATOMTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCustomAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"tag",
        		lv_tag_0_0, 
        		"ATOM");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCustomAttributeAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getCustomAttributeAccess().getValueExpressionParserRuleCall_2_0_0()); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCustomAttributeRule());
	        }
       		add(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCustomAttributeAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCustomAttributeAccess().getValueExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_value_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCustomAttributeRule());
	        }
       		add(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCustomAttributeAccess().getRightParenthesisKeyword_3());
    }
	otherlv_6='.' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCustomAttributeAccess().getFullStopKeyword_4());
    }
)
;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getNameNAMEParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleNAME		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"NAME");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getClausesFunctionClauseParserRuleCall_1_0()); 
	    }
		lv_clauses_1_0=ruleFunctionClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		add(
       			$current, 
       			"clauses",
        		lv_clauses_1_0, 
        		"FunctionClause");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionAccess().getSemicolonKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getClausesFunctionClauseParserRuleCall_2_1_0()); 
	    }
		lv_clauses_3_0=ruleFunctionClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		add(
       			$current, 
       			"clauses",
        		lv_clauses_3_0, 
        		"FunctionClause");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='.' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionAccess().getFullStopKeyword_3());
    }
)
;





// Entry rule entryRuleFunctionClause
entryRuleFunctionClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionClauseRule()); }
	 iv_ruleFunctionClause=ruleFunctionClause 
	 { $current=$iv_ruleFunctionClause.current; } 
	 EOF 
;

// Rule FunctionClause
ruleFunctionClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionClauseRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFunctionClauseAccess().getRefFunctionCrossReference_0_0()); 
	    }
		ruleNAME		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionClauseAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionClauseAccess().getParamsExpressionsParserRuleCall_2_0()); 
	    }
		lv_params_2_0=ruleExpressions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionClauseRule());
	        }
       		set(
       			$current, 
       			"params",
        		lv_params_2_0, 
        		"Expressions");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionClauseAccess().getRightParenthesisKeyword_3());
    }
((	otherlv_4='when' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionClauseAccess().getWhenKeyword_4_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionClauseAccess().getGuardGuardParserRuleCall_4_1_0()); 
	    }
		lv_guard_5_0=ruleGuard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionClauseRule());
	        }
       		set(
       			$current, 
       			"guard",
        		lv_guard_5_0, 
        		"Guard");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6='->' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunctionClauseAccess().getHyphenMinusGreaterThanSignKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionClauseAccess().getBodyExpressionsParserRuleCall_6_0()); 
	    }
		lv_body_7_0=ruleExpressions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionClauseRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_7_0, 
        		"Expressions");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleGuard
entryRuleGuard returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGuardRule()); }
	 iv_ruleGuard=ruleGuard 
	 { $current=$iv_ruleGuard.current; } 
	 EOF 
;

// Rule Guard
ruleGuard returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getGuardAccess().getGuardsExpressionsParserRuleCall_0_0()); 
	    }
		lv_guards_0_0=ruleExpressions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGuardRule());
	        }
       		add(
       			$current, 
       			"guards",
        		lv_guards_0_0, 
        		"Expressions");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGuardAccess().getSemicolonKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGuardAccess().getGuardsExpressionsParserRuleCall_1_1_0()); 
	    }
		lv_guards_2_0=ruleExpressions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGuardRule());
	        }
       		add(
       			$current, 
       			"guards",
        		lv_guards_2_0, 
        		"Expressions");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpressions
entryRuleExpressions returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionsRule()); }
	 iv_ruleExpressions=ruleExpressions 
	 { $current=$iv_ruleExpressions.current; } 
	 EOF 
;

// Rule Expressions
ruleExpressions returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionsAccess().getExprsLExpressionParserRuleCall_0_0()); 
	    }
		lv_exprs_0_0=ruleLExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionsRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_0_0, 
        		"LExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpressionsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionsAccess().getExprsLExpressionParserRuleCall_1_1_0()); 
	    }
		lv_exprs_2_0=ruleLExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionsRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_2_0, 
        		"LExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleLExpression
entryRuleLExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLExpressionRule()); }
	 iv_ruleLExpression=ruleLExpression 
	 { $current=$iv_ruleLExpression.current; } 
	 EOF 
;

// Rule LExpression
ruleLExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((
(
ruleLineExpr
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getLExpressionAccess().getLineLineExprParserRuleCall_0_0_0()); 
	    }
		lv_line_0_0=ruleLineExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLExpressionRule());
	        }
       		set(
       			$current, 
       			"line",
        		true, 
        		"LineExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLExpressionAccess().getExprExpressionParserRuleCall_0_1_0()); 
	    }
		lv_expr_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getLExpressionAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_2=ruleExpression
    { 
        $current = $this_Expression_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLineExpr
entryRuleLineExpr returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLineExprRule()); } 
	 iv_ruleLineExpr=ruleLineExpr 
	 { $current=$iv_ruleLineExpr.current.getText(); }  
	 EOF 
;

// Rule LineExpr
ruleLineExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='?' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLineExprAccess().getQuestionMarkKeyword_0()); 
    }

	kw='line' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLineExprAccess().getLineKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpressionAccess().getCatchExprAction_0_0(),
            $current);
    }
)	otherlv_1='catch' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpressionAccess().getCatchKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getExprExpressionParserRuleCall_0_2_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getExpr100ParserRuleCall_1()); 
    }
    this_Expr100_3=ruleExpr100
    { 
        $current = $this_Expr100_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleExpr100
entryRuleExpr100 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpr100Rule()); }
	 iv_ruleExpr100=ruleExpr100 
	 { $current=$iv_ruleExpr100.current; } 
	 EOF 
;

// Rule Expr100
ruleExpr100 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpr100Access().getExpr150ParserRuleCall_0()); 
    }
    this_Expr150_0=ruleExpr150
    { 
        $current = $this_Expr150_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpr100Access().getMatchExprOpLeftAction_1_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'=' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getExpr100Access().getOpEqualsSignKeyword_1_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpr100Rule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "=");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpr100Access().getOpRightExpr100ParserRuleCall_1_0_2_0()); 
	    }
		lv_opRight_3_0=ruleExpr100		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpr100Rule());
	        }
       		set(
       			$current, 
       			"opRight",
        		lv_opRight_3_0, 
        		"Expr100");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpr100Access().getBinOpOpLeftAction_1_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpr100Access().getOpSENDOPParserRuleCall_1_1_1_0()); 
	    }
		lv_op_5_0=ruleSENDOP		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpr100Rule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_5_0, 
        		"SENDOP");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpr100Access().getOpRightExpr100ParserRuleCall_1_1_2_0()); 
	    }
		lv_opRight_6_0=ruleExpr100		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpr100Rule());
	        }
       		set(
       			$current, 
       			"opRight",
        		lv_opRight_6_0, 
        		"Expr100");
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRuleExpr150
entryRuleExpr150 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpr150Rule()); }
	 iv_ruleExpr150=ruleExpr150 
	 { $current=$iv_ruleExpr150.current; } 
	 EOF 
;

// Rule Expr150
ruleExpr150 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpr150Access().getExpr160ParserRuleCall_0()); 
    }
    this_Expr160_0=ruleExpr160
    { 
        $current = $this_Expr160_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpr150Access().getBinOpOpLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'orelse' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getExpr150Access().getOpOrelseKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpr150Rule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "orelse");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpr150Access().getOpRightExpr160ParserRuleCall_1_2_0()); 
	    }
		lv_opRight_3_0=ruleExpr160		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpr150Rule());
	        }
       		set(
       			$current, 
       			"opRight",
        		lv_opRight_3_0, 
        		"Expr160");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpr160
entryRuleExpr160 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpr160Rule()); }
	 iv_ruleExpr160=ruleExpr160 
	 { $current=$iv_ruleExpr160.current; } 
	 EOF 
;

// Rule Expr160
ruleExpr160 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpr160Access().getExpr200ParserRuleCall_0()); 
    }
    this_Expr200_0=ruleExpr200
    { 
        $current = $this_Expr200_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpr160Access().getBinOpOpLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'andalso' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getExpr160Access().getOpAndalsoKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpr160Rule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "andalso");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpr160Access().getOpRight2Expr200ParserRuleCall_1_2_0()); 
	    }
		lv_opRight2_3_0=ruleExpr200		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpr160Rule());
	        }
       		set(
       			$current, 
       			"opRight2",
        		lv_opRight2_3_0, 
        		"Expr200");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpr200
entryRuleExpr200 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpr200Rule()); }
	 iv_ruleExpr200=ruleExpr200 
	 { $current=$iv_ruleExpr200.current; } 
	 EOF 
;

// Rule Expr200
ruleExpr200 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpr200Access().getExpr300ParserRuleCall_0()); 
    }
    this_Expr300_0=ruleExpr300
    { 
        $current = $this_Expr300_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpr200Access().getBinOpOpLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpr200Access().getOpCOMPOPParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleCOMPOP		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpr200Rule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"COMPOP");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpr200Access().getOpRightExpr300ParserRuleCall_1_2_0()); 
	    }
		lv_opRight_3_0=ruleExpr300		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpr200Rule());
	        }
       		set(
       			$current, 
       			"opRight",
        		lv_opRight_3_0, 
        		"Expr300");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleExpr300
entryRuleExpr300 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpr300Rule()); }
	 iv_ruleExpr300=ruleExpr300 
	 { $current=$iv_ruleExpr300.current; } 
	 EOF 
;

// Rule Expr300
ruleExpr300 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpr300Access().getExpr400ParserRuleCall_0()); 
    }
    this_Expr400_0=ruleExpr400
    { 
        $current = $this_Expr400_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpr300Access().getBinOpOpLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpr300Access().getOpLISTOPParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleLISTOP		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpr300Rule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"LISTOP");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpr300Access().getOpRightExpr400ParserRuleCall_1_2_0()); 
	    }
		lv_opRight_3_0=ruleExpr400		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpr300Rule());
	        }
       		set(
       			$current, 
       			"opRight",
        		lv_opRight_3_0, 
        		"Expr400");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpr400
entryRuleExpr400 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpr400Rule()); }
	 iv_ruleExpr400=ruleExpr400 
	 { $current=$iv_ruleExpr400.current; } 
	 EOF 
;

// Rule Expr400
ruleExpr400 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpr400Access().getExpr500ParserRuleCall_0()); 
    }
    this_Expr500_0=ruleExpr500
    { 
        $current = $this_Expr500_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpr400Access().getAddOpOpLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpr400Access().getOpADDOPParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleADDOP		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpr400Rule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"ADDOP");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpr400Access().getOpRightExpr500ParserRuleCall_1_2_0()); 
	    }
		lv_opRight_3_0=ruleExpr500		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpr400Rule());
	        }
       		set(
       			$current, 
       			"opRight",
        		lv_opRight_3_0, 
        		"Expr500");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpr500
entryRuleExpr500 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpr500Rule()); }
	 iv_ruleExpr500=ruleExpr500 
	 { $current=$iv_ruleExpr500.current; } 
	 EOF 
;

// Rule Expr500
ruleExpr500 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpr500Access().getUnaryExprParserRuleCall_0()); 
    }
    this_UnaryExpr_0=ruleUnaryExpr
    { 
        $current = $this_UnaryExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpr500Access().getMultOpOpLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpr500Access().getOpMULTOPParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleMULTOP		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpr500Rule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"MULTOP");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpr500Access().getOpRightUnaryExprParserRuleCall_1_2_0()); 
	    }
		lv_opRight_3_0=ruleUnaryExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpr500Rule());
	        }
       		set(
       			$current, 
       			"opRight",
        		lv_opRight_3_0, 
        		"UnaryExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnaryExpr
entryRuleUnaryExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExprRule()); }
	 iv_ruleUnaryExpr=ruleUnaryExpr 
	 { $current=$iv_ruleUnaryExpr.current; } 
	 EOF 
;

// Rule UnaryExpr
ruleUnaryExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnaryExprAccess().getUnaryExprAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExprAccess().getOpPREFIXOPParserRuleCall_0_1_0()); 
	    }
		lv_op_1_0=rulePREFIXOP		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExprRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"PREFIXOP");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExprAccess().getOperandExpr700ParserRuleCall_0_2_0()); 
	    }
		lv_operand_2_0=ruleExpr700		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExprRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_2_0, 
        		"Expr700");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getUnaryExprAccess().getExpr700ParserRuleCall_1()); 
    }
    this_Expr700_3=ruleExpr700
    { 
        $current = $this_Expr700_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleExpr700
entryRuleExpr700 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpr700Rule()); }
	 iv_ruleExpr700=ruleExpr700 
	 { $current=$iv_ruleExpr700.current; } 
	 EOF 
;

// Rule Expr700
ruleExpr700 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpr700Access().getExpr800ParserRuleCall_0()); 
    }
    this_Expr800_0=ruleExpr800
    { 
        $current = $this_Expr800_0.current; 
        afterParserOrEnumRuleCall();
    }
((	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpr700Access().getLeftParenthesisKeyword_1_0_0());
    }
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpr700Access().getFunCallTargetAction_1_0_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpr700Access().getArgsExpressionsParserRuleCall_1_0_2_0()); 
	    }
		lv_args_3_0=ruleExpressions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpr700Rule());
	        }
       		set(
       			$current, 
       			"args",
        		lv_args_3_0, 
        		"Expressions");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExpr700Access().getRightParenthesisKeyword_1_0_3());
    }
(	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExpr700Access().getLeftParenthesisKeyword_1_0_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpr700Access().getArgs2ExpressionsParserRuleCall_1_0_4_1_0()); 
	    }
		lv_args2_6_0=ruleExpressions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpr700Rule());
	        }
       		set(
       			$current, 
       			"args2",
        		lv_args2_6_0, 
        		"Expressions");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExpr700Access().getRightParenthesisKeyword_1_0_4_2());
    }
)?)
    |(	otherlv_8='#' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getExpr700Access().getNumberSignKeyword_1_1_0());
    }
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpr700Access().getRecordExprRefAction_1_1_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpr700Access().getRecordRecordExprParserRuleCall_1_1_2_0()); 
	    }
		lv_record_10_0=ruleRecordExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpr700Rule());
	        }
       		set(
       			$current, 
       			"record",
        		lv_record_10_0, 
        		"RecordExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleExpr800
entryRuleExpr800 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpr800Rule()); }
	 iv_ruleExpr800=ruleExpr800 
	 { $current=$iv_ruleExpr800.current; } 
	 EOF 
;

// Rule Expr800
ruleExpr800 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpr800Access().getExprMaxParserRuleCall_0()); 
    }
    this_ExprMax_0=ruleExprMax
    { 
        $current = $this_ExprMax_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpr800Access().getRemoteTargetModuleAction_1_0(),
            $current);
    }
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpr800Access().getColonKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpr800Access().getFunctionExprMaxParserRuleCall_1_2_0()); 
	    }
		lv_function_3_0=ruleExprMax		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpr800Rule());
	        }
       		set(
       			$current, 
       			"function",
        		lv_function_3_0, 
        		"ExprMax");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleExprMax
entryRuleExprMax returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprMaxRule()); }
	 iv_ruleExprMax=ruleExprMax 
	 { $current=$iv_ruleExprMax.current; } 
	 EOF 
;

// Rule ExprMax
ruleExprMax returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExprMaxAccess().getTermExpressionParserRuleCall_0()); 
    }
    this_TermExpression_0=ruleTermExpression
    { 
        $current = $this_TermExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExprMaxAccess().getLeftParenthesisKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getExprMaxAccess().getExpressionParserRuleCall_1_1()); 
    }
    this_Expression_2=ruleExpression
    { 
        $current = $this_Expression_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExprMaxAccess().getRightParenthesisKeyword_1_2());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExprMaxAccess().getBlockExprAction_2_0(),
            $current);
    }
)	otherlv_5='begin' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExprMaxAccess().getBeginKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprMaxAccess().getBodyExpressionsParserRuleCall_2_2_0()); 
	    }
		lv_body_6_0=ruleExpressions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprMaxRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_6_0, 
        		"Expressions");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='end' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExprMaxAccess().getEndKeyword_2_3());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getExprMaxAccess().getIfExprParserRuleCall_3()); 
    }
    this_IfExpr_8=ruleIfExpr
    { 
        $current = $this_IfExpr_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExprMaxAccess().getCaseExprParserRuleCall_4()); 
    }
    this_CaseExpr_9=ruleCaseExpr
    { 
        $current = $this_CaseExpr_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExprMaxAccess().getReceiveExprParserRuleCall_5()); 
    }
    this_ReceiveExpr_10=ruleReceiveExpr
    { 
        $current = $this_ReceiveExpr_10.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExprMaxAccess().getFunExprParserRuleCall_6()); 
    }
    this_FunExpr_11=ruleFunExpr
    { 
        $current = $this_FunExpr_11.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExprMaxAccess().getTryExprParserRuleCall_7()); 
    }
    this_TryExpr_12=ruleTryExpr
    { 
        $current = $this_TryExpr_12.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExprMaxAccess().getCondExprParserRuleCall_8()); 
    }
    this_CondExpr_13=ruleCondExpr
    { 
        $current = $this_CondExpr_13.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExprMaxAccess().getQueryExprParserRuleCall_9()); 
    }
    this_QueryExpr_14=ruleQueryExpr
    { 
        $current = $this_QueryExpr_14.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExprMaxAccess().getLetExprParserRuleCall_10()); 
    }
    this_LetExpr_15=ruleLetExpr
    { 
        $current = $this_LetExpr_15.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTermExpression
entryRuleTermExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermExpressionRule()); }
	 iv_ruleTermExpression=ruleTermExpression 
	 { $current=$iv_ruleTermExpression.current; } 
	 EOF 
;

// Rule TermExpression
ruleTermExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTermExpressionAccess().getTupleParserRuleCall_0()); 
    }
    this_Tuple_0=ruleTuple
    { 
        $current = $this_Tuple_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTermExpressionAccess().getListOrComprehensionParserRuleCall_1()); 
    }
    this_ListOrComprehension_1=ruleListOrComprehension
    { 
        $current = $this_ListOrComprehension_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTermExpressionAccess().getBinaryOrComprehensionParserRuleCall_2()); 
    }
    this_BinaryOrComprehension_2=ruleBinaryOrComprehension
    { 
        $current = $this_BinaryOrComprehension_2.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_3='#' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTermExpressionAccess().getNumberSignKeyword_3_0());
    }

    { 
        newCompositeNode(grammarAccess.getTermExpressionAccess().getRecordExprParserRuleCall_3_1()); 
    }
    this_RecordExpr_4=ruleRecordExpr
    { 
        $current = $this_RecordExpr_4.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getTermExpressionAccess().getLiteralExpressionParserRuleCall_4()); 
    }
    this_LiteralExpression_5=ruleLiteralExpression
    { 
        $current = $this_LiteralExpression_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMacroCall
entryRuleMacroCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMacroCallRule()); }
	 iv_ruleMacroCall=ruleMacroCall 
	 { $current=$iv_ruleMacroCall.current; } 
	 EOF 
;

// Rule MacroCall
ruleMacroCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMacroCallAccess().getMacroNameMacroLiteralParserRuleCall_0_0()); 
	    }
		lv_macroName_0_0=ruleMacroLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMacroCallRule());
	        }
       		set(
       			$current, 
       			"macroName",
        		lv_macroName_0_0, 
        		"MacroLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'(' 
)=>	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMacroCallAccess().getLeftParenthesisKeyword_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMacroCallAccess().getArgsExpressionsParserRuleCall_1_1_0()); 
	    }
		lv_args_2_0=ruleExpressions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMacroCallRule());
	        }
       		set(
       			$current, 
       			"args",
        		lv_args_2_0, 
        		"Expressions");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMacroCallAccess().getRightParenthesisKeyword_1_2());
    }
)?)
;





// Entry rule entryRuleRecordExpr
entryRuleRecordExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordExprRule()); }
	 iv_ruleRecordExpr=ruleRecordExpr 
	 { $current=$iv_ruleRecordExpr.current; } 
	 EOF 
;

// Rule RecordExpr
ruleRecordExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRecordExprAccess().getRecRecordVarMacroParserRuleCall_0_0()); 
	    }
		lv_rec_0_0=ruleRecordVarMacro		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordExprRule());
	        }
       		set(
       			$current, 
       			"rec",
        		lv_rec_0_0, 
        		"RecordVarMacro");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRecordExprAccess().getFullStopKeyword_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordExprAccess().getFieldRecordFieldVarMacroParserRuleCall_1_0_1_0()); 
	    }
		lv_field_2_0=ruleRecordFieldVarMacro		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordExprRule());
	        }
       		set(
       			$current, 
       			"field",
        		lv_field_2_0, 
        		"RecordFieldVarMacro");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordExprAccess().getTupleRecordTupleParserRuleCall_1_1_0()); 
	    }
		lv_tuple_3_0=ruleRecordTuple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordExprRule());
	        }
       		set(
       			$current, 
       			"tuple",
        		lv_tuple_3_0, 
        		"RecordTuple");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleQueryExpr
entryRuleQueryExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQueryExprRule()); }
	 iv_ruleQueryExpr=ruleQueryExpr 
	 { $current=$iv_ruleQueryExpr.current; } 
	 EOF 
;

// Rule QueryExpr
ruleQueryExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getQueryExprAccess().getQueryExprAction_0(),
            $current);
    }
)	otherlv_1='query' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getQueryExprAccess().getQueryKeyword_1());
    }
)
;





// Entry rule entryRuleCondExpr
entryRuleCondExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCondExprRule()); }
	 iv_ruleCondExpr=ruleCondExpr 
	 { $current=$iv_ruleCondExpr.current; } 
	 EOF 
;

// Rule CondExpr
ruleCondExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCondExprAccess().getCondExprAction_0(),
            $current);
    }
)	otherlv_1='cond' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCondExprAccess().getCondKeyword_1());
    }
)
;





// Entry rule entryRuleLetExpr
entryRuleLetExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLetExprRule()); }
	 iv_ruleLetExpr=ruleLetExpr 
	 { $current=$iv_ruleLetExpr.current; } 
	 EOF 
;

// Rule LetExpr
ruleLetExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLetExprAccess().getLetExprAction_0(),
            $current);
    }
)	otherlv_1='let' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLetExprAccess().getLetKeyword_1());
    }
)
;





// Entry rule entryRuleRecordTuple
entryRuleRecordTuple returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordTupleRule()); }
	 iv_ruleRecordTuple=ruleRecordTuple 
	 { $current=$iv_ruleRecordTuple.current; } 
	 EOF 
;

// Rule RecordTuple
ruleRecordTuple returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRecordTupleAccess().getRecordTupleAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRecordTupleAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getRecordTupleAccess().getFieldsRecordFieldExprParserRuleCall_2_0_0()); 
	    }
		lv_fields_2_0=ruleRecordFieldExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordTupleRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_2_0, 
        		"RecordFieldExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRecordTupleAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordTupleAccess().getFieldsRecordFieldExprParserRuleCall_2_1_1_0()); 
	    }
		lv_fields_4_0=ruleRecordFieldExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordTupleRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_4_0, 
        		"RecordFieldExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRecordTupleAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleRecordFieldExpr
entryRuleRecordFieldExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordFieldExprRule()); }
	 iv_ruleRecordFieldExpr=ruleRecordFieldExpr 
	 { $current=$iv_ruleRecordFieldExpr.current; } 
	 EOF 
;

// Rule RecordFieldExpr
ruleRecordFieldExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRecordFieldExprAccess().getRefRecordFieldVarMacroParserRuleCall_0_0()); 
	    }
		lv_ref_0_0=ruleRecordFieldVarMacro		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordFieldExprRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_0_0, 
        		"RecordFieldVarMacro");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRecordFieldExprAccess().getEqualsSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordFieldExprAccess().getValueExpressionParserRuleCall_1_1_0()); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordFieldExprRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_3='::' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRecordFieldExprAccess().getColonColonKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordFieldExprAccess().getTypeTopTypeParserRuleCall_2_1_0()); 
	    }
		lv_type_4_0=ruleTopType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordFieldExprRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"TopType");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleLiteralExpressionNoNumber
entryRuleLiteralExpressionNoNumber returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralExpressionNoNumberRule()); }
	 iv_ruleLiteralExpressionNoNumber=ruleLiteralExpressionNoNumber 
	 { $current=$iv_ruleLiteralExpressionNoNumber.current; } 
	 EOF 
;

// Rule LiteralExpressionNoNumber
ruleLiteralExpressionNoNumber returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralExpressionNoNumberAccess().getAtomAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralExpressionNoNumberAccess().getValueNAMEParserRuleCall_0_1_0()); 
	    }
		lv_value_1_0=ruleNAME		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralExpressionNoNumberRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"NAME");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionNoNumberAccess().getVariableLiteralParserRuleCall_1()); 
    }
    this_VariableLiteral_2=ruleVariableLiteral
    { 
        $current = $this_VariableLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralExpressionNoNumberAccess().getErlCharAction_2_0(),
            $current);
    }
)(
(
		lv_value_4_0=RULE_CHAR
		{
			newLeafNode(lv_value_4_0, grammarAccess.getLiteralExpressionNoNumberAccess().getValueCHARTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralExpressionNoNumberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"CHAR");
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionNoNumberAccess().getMacroLiteralParserRuleCall_3()); 
    }
    this_MacroLiteral_5=ruleMacroLiteral
    { 
        $current = $this_MacroLiteral_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionNoNumberAccess().getStringLiteralParserRuleCall_4()); 
    }
    this_StringLiteral_6=ruleStringLiteral
    { 
        $current = $this_StringLiteral_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleModuleRef
entryRuleModuleRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleRefRule()); }
	 iv_ruleModuleRef=ruleModuleRef 
	 { $current=$iv_ruleModuleRef.current; } 
	 EOF 
;

// Rule ModuleRef
ruleModuleRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModuleRefAccess().getAtomRefAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleRefRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getModuleRefAccess().getValueModuleCrossReference_1_0()); 
	    }
		ruleNAME		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFunctionRef
entryRuleFunctionRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRefRule()); }
	 iv_ruleFunctionRef=ruleFunctionRef 
	 { $current=$iv_ruleFunctionRef.current; } 
	 EOF 
;

// Rule FunctionRef
ruleFunctionRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunctionRefAccess().getAtomRefAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionRefRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFunctionRefAccess().getValueFunctionCrossReference_1_0()); 
	    }
		ruleNAME		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRecordRef
entryRuleRecordRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordRefRule()); }
	 iv_ruleRecordRef=ruleRecordRef 
	 { $current=$iv_ruleRecordRef.current; } 
	 EOF 
;

// Rule RecordRef
ruleRecordRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRecordRefAccess().getAtomRefAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRecordRefRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRecordRefAccess().getValueRecordAttributeCrossReference_1_0()); 
	    }
		ruleNAME		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRecordFieldRef
entryRuleRecordFieldRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordFieldRefRule()); }
	 iv_ruleRecordFieldRef=ruleRecordFieldRef 
	 { $current=$iv_ruleRecordFieldRef.current; } 
	 EOF 
;

// Rule RecordFieldRef
ruleRecordFieldRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRecordFieldRefAccess().getAtomRefAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRecordFieldRefRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRecordFieldRefAccess().getValueRecordFieldDefCrossReference_1_0()); 
	    }
		ruleNAME		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTypeRef
entryRuleTypeRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRefRule()); }
	 iv_ruleTypeRef=ruleTypeRef 
	 { $current=$iv_ruleTypeRef.current; } 
	 EOF 
;

// Rule TypeRef
ruleTypeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeRefAccess().getAtomRefAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRefRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTypeRefAccess().getValueTypeAttributeCrossReference_1_0()); 
	    }
		ruleNAME		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMacroLiteral
entryRuleMacroLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMacroLiteralRule()); }
	 iv_ruleMacroLiteral=ruleMacroLiteral 
	 { $current=$iv_ruleMacroLiteral.current; } 
	 EOF 
;

// Rule MacroLiteral
ruleMacroLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMacroLiteralAccess().getMacroAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMacroLiteralRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getMacroLiteralAccess().getValueDefineAttributeCrossReference_1_0()); 
	    }
		ruleMACRO		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMacroRef
entryRuleMacroRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMacroRefRule()); }
	 iv_ruleMacroRef=ruleMacroRef 
	 { $current=$iv_ruleMacroRef.current; } 
	 EOF 
;

// Rule MacroRef
ruleMacroRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMacroRefAccess().getMacroAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMacroRefRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getMacroRefAccess().getValueDefineAttributeCrossReference_1_0()); 
	    }
		ruleNAMEVAR		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVariableLiteral
entryRuleVariableLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableLiteralRule()); }
	 iv_ruleVariableLiteral=ruleVariableLiteral 
	 { $current=$iv_ruleVariableLiteral.current; } 
	 EOF 
;

// Rule VariableLiteral
ruleVariableLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVariableLiteralAccess().getVariableAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableLiteralRule());
	        }
        }
	otherlv_1=RULE_VARIABLE
	{
		newLeafNode(otherlv_1, grammarAccess.getVariableLiteralAccess().getValueExpressionCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStringLiteralAccess().getPartsStringLiteralLiteralParserRuleCall_0_0()); 
	    }
		lv_parts_0_0=ruleStringLiteralLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringLiteralRule());
	        }
       		add(
       			$current, 
       			"parts",
        		lv_parts_0_0, 
        		"StringLiteralLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStringLiteralAccess().getPartsStringLiteralPartParserRuleCall_1_0()); 
	    }
		lv_parts_1_0=ruleStringLiteralPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringLiteralRule());
	        }
       		add(
       			$current, 
       			"parts",
        		lv_parts_1_0, 
        		"StringLiteralPart");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleStringLiteralPart
entryRuleStringLiteralPart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralPartRule()); }
	 iv_ruleStringLiteralPart=ruleStringLiteralPart 
	 { $current=$iv_ruleStringLiteralPart.current; } 
	 EOF 
;

// Rule StringLiteralPart
ruleStringLiteralPart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStringLiteralPartAccess().getStringLiteralLiteralParserRuleCall_0()); 
    }
    this_StringLiteralLiteral_0=ruleStringLiteralLiteral
    { 
        $current = $this_StringLiteralLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStringLiteralPartAccess().getMacroMacroCallParserRuleCall_1_0()); 
	    }
		lv_macro_1_0=ruleMacroCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringLiteralPartRule());
	        }
       		set(
       			$current, 
       			"macro",
        		lv_macro_1_0, 
        		"MacroCall");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStringLiteralLiteral
entryRuleStringLiteralLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralLiteralRule()); }
	 iv_ruleStringLiteralLiteral=ruleStringLiteralLiteral 
	 { $current=$iv_ruleStringLiteralLiteral.current; } 
	 EOF 
;

// Rule StringLiteralLiteral
ruleStringLiteralLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_string_0_0=RULE_STRING
		{
			newLeafNode(lv_string_0_0, grammarAccess.getStringLiteralLiteralAccess().getStringSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLiteralLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"string",
        		lv_string_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralExpressionRule()); }
	 iv_ruleLiteralExpression=ruleLiteralExpression 
	 { $current=$iv_ruleLiteralExpression.current; } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getLiteralExpressionNoNumberParserRuleCall_0()); 
    }
    this_LiteralExpressionNoNumber_0=ruleLiteralExpressionNoNumber
    { 
        $current = $this_LiteralExpressionNoNumber_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getIntegerLiteralParserRuleCall_1()); 
    }
    this_IntegerLiteral_1=ruleIntegerLiteral
    { 
        $current = $this_IntegerLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralExpressionAccess().getErlFloatAction_2_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getValueFLOATParserRuleCall_2_1_0()); 
	    }
		lv_value_3_0=ruleFLOAT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"FLOAT");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerLiteralRule()); }
	 iv_ruleIntegerLiteral=ruleIntegerLiteral 
	 { $current=$iv_ruleIntegerLiteral.current; } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIntegerLiteralAccess().getErlIntegerAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerLiteralAccess().getValueINTEGERParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleINTEGER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INTEGER");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePatternExpression
entryRulePatternExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPatternExpressionRule()); }
	 iv_rulePatternExpression=rulePatternExpression 
	 { $current=$iv_rulePatternExpression.current; } 
	 EOF 
;

// Rule PatternExpression
rulePatternExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPatternExpressionAccess().getTermExpressionParserRuleCall_0()); 
    }
    this_TermExpression_0=ruleTermExpression
    { 
        $current = $this_TermExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPatternExpressionAccess().getMatchExprOpLeftAction_1_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'=' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getPatternExpressionAccess().getOpEqualsSignKeyword_1_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPatternExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "=");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPatternExpressionAccess().getOpRightTermExpressionParserRuleCall_1_0_2_0()); 
	    }
		lv_opRight_3_0=ruleTermExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPatternExpressionRule());
	        }
       		set(
       			$current, 
       			"opRight",
        		lv_opRight_3_0, 
        		"TermExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))+
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPatternExpressionAccess().getFunCallTargetAction_1_1_0(),
            $current);
    }
)	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPatternExpressionAccess().getLeftParenthesisKeyword_1_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPatternExpressionAccess().getArgsExpressionsParserRuleCall_1_1_2_0()); 
	    }
		lv_args_6_0=ruleExpressions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPatternExpressionRule());
	        }
       		set(
       			$current, 
       			"args",
        		lv_args_6_0, 
        		"Expressions");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPatternExpressionAccess().getRightParenthesisKeyword_1_1_3());
    }
))?)
;





// Entry rule entryRuleIfExpr
entryRuleIfExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfExprRule()); }
	 iv_ruleIfExpr=ruleIfExpr 
	 { $current=$iv_ruleIfExpr.current; } 
	 EOF 
;

// Rule IfExpr
ruleIfExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfExprAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExprAccess().getClausesIfClauseParserRuleCall_1_0()); 
	    }
		lv_clauses_1_0=ruleIfClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExprRule());
	        }
       		add(
       			$current, 
       			"clauses",
        		lv_clauses_1_0, 
        		"IfClause");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIfExprAccess().getSemicolonKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExprAccess().getClausesIfClauseParserRuleCall_2_1_0()); 
	    }
		lv_clauses_3_0=ruleIfClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExprRule());
	        }
       		add(
       			$current, 
       			"clauses",
        		lv_clauses_3_0, 
        		"IfClause");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='end' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfExprAccess().getEndKeyword_3());
    }
)
;





// Entry rule entryRuleIfClause
entryRuleIfClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfClauseRule()); }
	 iv_ruleIfClause=ruleIfClause 
	 { $current=$iv_ruleIfClause.current; } 
	 EOF 
;

// Rule IfClause
ruleIfClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIfClauseAccess().getGuardGuardParserRuleCall_0_0()); 
	    }
		lv_guard_0_0=ruleGuard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfClauseRule());
	        }
       		set(
       			$current, 
       			"guard",
        		lv_guard_0_0, 
        		"Guard");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfClauseAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfClauseAccess().getBodyExpressionsParserRuleCall_2_0()); 
	    }
		lv_body_2_0=ruleExpressions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfClauseRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_2_0, 
        		"Expressions");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCaseExpr
entryRuleCaseExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCaseExprRule()); }
	 iv_ruleCaseExpr=ruleCaseExpr 
	 { $current=$iv_ruleCaseExpr.current; } 
	 EOF 
;

// Rule CaseExpr
ruleCaseExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='case' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCaseExprAccess().getCaseKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseExprAccess().getExprExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='of' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCaseExprAccess().getOfKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseExprAccess().getClausesCrClauseParserRuleCall_3_0()); 
	    }
		lv_clauses_3_0=ruleCrClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseExprRule());
	        }
       		add(
       			$current, 
       			"clauses",
        		lv_clauses_3_0, 
        		"CrClause");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCaseExprAccess().getSemicolonKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseExprAccess().getClausesCrClauseParserRuleCall_4_1_0()); 
	    }
		lv_clauses_5_0=ruleCrClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseExprRule());
	        }
       		add(
       			$current, 
       			"clauses",
        		lv_clauses_5_0, 
        		"CrClause");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6='end' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCaseExprAccess().getEndKeyword_5());
    }
)
;





// Entry rule entryRuleCrClause
entryRuleCrClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCrClauseRule()); }
	 iv_ruleCrClause=ruleCrClause 
	 { $current=$iv_ruleCrClause.current; } 
	 EOF 
;

// Rule CrClause
ruleCrClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCrClauseAccess().getExprExpressionParserRuleCall_0_0()); 
	    }
		lv_expr_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCrClauseRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='when' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCrClauseAccess().getWhenKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCrClauseAccess().getGuardGuardParserRuleCall_1_1_0()); 
	    }
		lv_guard_2_0=ruleGuard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCrClauseRule());
	        }
       		set(
       			$current, 
       			"guard",
        		lv_guard_2_0, 
        		"Guard");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_3='->' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCrClauseAccess().getHyphenMinusGreaterThanSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCrClauseAccess().getBodyExpressionsParserRuleCall_3_0()); 
	    }
		lv_body_4_0=ruleExpressions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCrClauseRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_4_0, 
        		"Expressions");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleReceiveExpr
entryRuleReceiveExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReceiveExprRule()); }
	 iv_ruleReceiveExpr=ruleReceiveExpr 
	 { $current=$iv_ruleReceiveExpr.current; } 
	 EOF 
;

// Rule ReceiveExpr
ruleReceiveExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='receive' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getReceiveExprAccess().getReceiveKeyword_0());
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getReceiveExprAccess().getClausesCrClauseParserRuleCall_1_0_0_0()); 
	    }
		lv_clauses_1_0=ruleCrClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReceiveExprRule());
	        }
       		add(
       			$current, 
       			"clauses",
        		lv_clauses_1_0, 
        		"CrClause");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReceiveExprAccess().getSemicolonKeyword_1_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReceiveExprAccess().getClausesCrClauseParserRuleCall_1_0_1_1_0()); 
	    }
		lv_clauses_3_0=ruleCrClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReceiveExprRule());
	        }
       		add(
       			$current, 
       			"clauses",
        		lv_clauses_3_0, 
        		"CrClause");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_4='after' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getReceiveExprAccess().getAfterKeyword_1_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReceiveExprAccess().getAfter_exprExpressionParserRuleCall_1_0_2_1_0()); 
	    }
		lv_after_expr_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReceiveExprRule());
	        }
       		set(
       			$current, 
       			"after_expr",
        		lv_after_expr_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='->' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getReceiveExprAccess().getHyphenMinusGreaterThanSignKeyword_1_0_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReceiveExprAccess().getAfter_bodyExpressionsParserRuleCall_1_0_2_3_0()); 
	    }
		lv_after_body_7_0=ruleExpressions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReceiveExprRule());
	        }
       		set(
       			$current, 
       			"after_body",
        		lv_after_body_7_0, 
        		"Expressions");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(	otherlv_8='after' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getReceiveExprAccess().getAfterKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReceiveExprAccess().getAfter_exprExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_after_expr_9_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReceiveExprRule());
	        }
       		set(
       			$current, 
       			"after_expr",
        		lv_after_expr_9_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10='->' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getReceiveExprAccess().getHyphenMinusGreaterThanSignKeyword_1_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReceiveExprAccess().getAfter_bodyExpressionsParserRuleCall_1_1_3_0()); 
	    }
		lv_after_body_11_0=ruleExpressions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReceiveExprRule());
	        }
       		set(
       			$current, 
       			"after_body",
        		lv_after_body_11_0, 
        		"Expressions");
	        afterParserOrEnumRuleCall();
	    }

)
)))	otherlv_12='end' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getReceiveExprAccess().getEndKeyword_2());
    }
)
;





// Entry rule entryRuleFunExpr
entryRuleFunExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunExprRule()); }
	 iv_ruleFunExpr=ruleFunExpr 
	 { $current=$iv_ruleFunExpr.current; } 
	 EOF 
;

// Rule FunExpr
ruleFunExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='fun' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunExprAccess().getFunKeyword_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getFunExprAccess().getFunRefParserRuleCall_1_0()); 
    }
    this_FunRef_1=ruleFunRef
    { 
        $current = $this_FunRef_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFunExprAccess().getInlineFunParserRuleCall_1_1()); 
    }
    this_InlineFun_2=ruleInlineFun
    { 
        $current = $this_InlineFun_2.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleFunRef
entryRuleFunRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunRefRule()); }
	 iv_ruleFunRef=ruleFunRef 
	 { $current=$iv_ruleFunRef.current; } 
	 EOF 
;

// Rule FunRef
ruleFunRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getFunRefAccess().getModuleModuleVarMacroParserRuleCall_0_0_0()); 
	    }
		lv_module_0_0=ruleModuleVarMacro		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunRefRule());
	        }
       		set(
       			$current, 
       			"module",
        		lv_module_0_0, 
        		"ModuleVarMacro");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunRefAccess().getColonKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFunRefAccess().getFunctionFunctionVarMacroParserRuleCall_1_0()); 
	    }
		lv_function_2_0=ruleFunctionVarMacro		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunRefRule());
	        }
       		set(
       			$current, 
       			"function",
        		lv_function_2_0, 
        		"FunctionVarMacro");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='/' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunRefAccess().getSolidusKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunRefAccess().getArityIntVarMacroParserRuleCall_3_0()); 
	    }
		lv_arity_4_0=ruleIntVarMacro		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunRefRule());
	        }
       		set(
       			$current, 
       			"arity",
        		lv_arity_4_0, 
        		"IntVarMacro");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInlineFun
entryRuleInlineFun returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInlineFunRule()); }
	 iv_ruleInlineFun=ruleInlineFun 
	 { $current=$iv_ruleInlineFun.current; } 
	 EOF 
;

// Rule InlineFun
ruleInlineFun returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInlineFunAccess().getClausesFunctionClauseParserRuleCall_0_0()); 
	    }
		lv_clauses_0_0=ruleFunctionClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInlineFunRule());
	        }
       		add(
       			$current, 
       			"clauses",
        		lv_clauses_0_0, 
        		"FunctionClause");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInlineFunAccess().getSemicolonKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInlineFunAccess().getClausesFunctionClauseParserRuleCall_1_1_0()); 
	    }
		lv_clauses_2_0=ruleFunctionClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInlineFunRule());
	        }
       		add(
       			$current, 
       			"clauses",
        		lv_clauses_2_0, 
        		"FunctionClause");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_3='end' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInlineFunAccess().getEndKeyword_2());
    }
)
;





// Entry rule entryRuleTryExpr
entryRuleTryExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTryExprRule()); }
	 iv_ruleTryExpr=ruleTryExpr 
	 { $current=$iv_ruleTryExpr.current; } 
	 EOF 
;

// Rule TryExpr
ruleTryExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='try' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTryExprAccess().getTryKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTryExprAccess().getBodyExpressionsParserRuleCall_1_0()); 
	    }
		lv_body_1_0=ruleExpressions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryExprRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_1_0, 
        		"Expressions");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='of' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTryExprAccess().getOfKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTryExprAccess().getOf_clausesCrClauseParserRuleCall_2_1_0()); 
	    }
		lv_of_clauses_3_0=ruleCrClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryExprRule());
	        }
       		add(
       			$current, 
       			"of_clauses",
        		lv_of_clauses_3_0, 
        		"CrClause");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTryExprAccess().getSemicolonKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTryExprAccess().getOf_clausesCrClauseParserRuleCall_2_2_1_0()); 
	    }
		lv_of_clauses_5_0=ruleCrClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryExprRule());
	        }
       		add(
       			$current, 
       			"of_clauses",
        		lv_of_clauses_5_0, 
        		"CrClause");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?((	otherlv_6='catch' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTryExprAccess().getCatchKeyword_3_0_0());
    }
((((
(
ruleNAMEVAR
)
)	':' 
))=>
(
		{ 
	        newCompositeNode(grammarAccess.getTryExprAccess().getCatchTryClauseParserRuleCall_3_0_1_0()); 
	    }
		lv_catch_7_0=ruleTryClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryExprRule());
	        }
       		add(
       			$current, 
       			"catch",
        		lv_catch_7_0, 
        		"TryClause");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTryExprAccess().getSemicolonKeyword_3_0_2_0());
    }
((((
(
ruleNAMEVAR
)
)	':' 
))=>
(
		{ 
	        newCompositeNode(grammarAccess.getTryExprAccess().getCatchTryClauseParserRuleCall_3_0_2_1_0()); 
	    }
		lv_catch_9_0=ruleTryClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryExprRule());
	        }
       		add(
       			$current, 
       			"catch",
        		lv_catch_9_0, 
        		"TryClause");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_10='after' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTryExprAccess().getAfterKeyword_3_0_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTryExprAccess().getAfter_bodyExpressionsParserRuleCall_3_0_3_1_0()); 
	    }
		lv_after_body_11_0=ruleExpressions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryExprRule());
	        }
       		set(
       			$current, 
       			"after_body",
        		lv_after_body_11_0, 
        		"Expressions");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(	otherlv_12='after' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getTryExprAccess().getAfterKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTryExprAccess().getAfter_bodyExpressionsParserRuleCall_3_1_1_0()); 
	    }
		lv_after_body_13_0=ruleExpressions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryExprRule());
	        }
       		set(
       			$current, 
       			"after_body",
        		lv_after_body_13_0, 
        		"Expressions");
	        afterParserOrEnumRuleCall();
	    }

)
)))	otherlv_14='end' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getTryExprAccess().getEndKeyword_4());
    }
)
;





// Entry rule entryRuleTryClause
entryRuleTryClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTryClauseRule()); }
	 iv_ruleTryClause=ruleTryClause 
	 { $current=$iv_ruleTryClause.current; } 
	 EOF 
;

// Rule TryClause
ruleTryClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
(
ruleNAMEVAR
)
)	':' 
))=>((
(
		{ 
	        newCompositeNode(grammarAccess.getTryClauseAccess().getHdrNAMEVARParserRuleCall_0_0_0_0()); 
	    }
		lv_hdr_0_0=ruleNAMEVAR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryClauseRule());
	        }
       		set(
       			$current, 
       			"hdr",
        		lv_hdr_0_0, 
        		"NAMEVAR");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTryClauseAccess().getColonKeyword_0_0_1());
    }
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getTryClauseAccess().getCondPatternExpressionParserRuleCall_1_0()); 
	    }
		lv_cond_2_0=rulePatternExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryClauseRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_2_0, 
        		"PatternExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='when' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTryClauseAccess().getWhenKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTryClauseAccess().getGuardGuardParserRuleCall_2_1_0()); 
	    }
		lv_guard_4_0=ruleGuard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryClauseRule());
	        }
       		set(
       			$current, 
       			"guard",
        		lv_guard_4_0, 
        		"Guard");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5='->' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTryClauseAccess().getHyphenMinusGreaterThanSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTryClauseAccess().getBodyExpressionsParserRuleCall_4_0()); 
	    }
		lv_body_6_0=ruleExpressions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryClauseRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_6_0, 
        		"Expressions");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleListOrComprehension
entryRuleListOrComprehension returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListOrComprehensionRule()); }
	 iv_ruleListOrComprehension=ruleListOrComprehension 
	 { $current=$iv_ruleListOrComprehension.current; } 
	 EOF 
;

// Rule ListOrComprehension
ruleListOrComprehension returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getListOrComprehensionAccess().getLeftSquareBracketKeyword_0());
    }
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getListOrComprehensionAccess().getErlListAction_1_0(),
            $current);
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getListOrComprehensionAccess().getElementsExpressionParserRuleCall_1_1_0_0()); 
	    }
		lv_elements_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListOrComprehensionRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getListOrComprehensionAccess().getCommaKeyword_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListOrComprehensionAccess().getElementsExpressionParserRuleCall_1_1_1_1_0()); 
	    }
		lv_elements_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListOrComprehensionRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*((	otherlv_5='|' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getListOrComprehensionAccess().getVerticalLineKeyword_1_1_2_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListOrComprehensionAccess().getTailExpressionParserRuleCall_1_1_2_0_1_0()); 
	    }
		lv_tail_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListOrComprehensionRule());
	        }
       		set(
       			$current, 
       			"tail",
        		lv_tail_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getListOrComprehensionAccess().getListComprehensionRootAction_1_1_2_1_0(),
            $current);
    }
)	otherlv_8='||' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getListOrComprehensionAccess().getVerticalLineVerticalLineKeyword_1_1_2_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListOrComprehensionAccess().getGeneratorsLCExprParserRuleCall_1_1_2_1_2_0()); 
	    }
		lv_generators_9_0=ruleLCExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListOrComprehensionRule());
	        }
       		add(
       			$current, 
       			"generators",
        		lv_generators_9_0, 
        		"LCExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getListOrComprehensionAccess().getCommaKeyword_1_1_2_1_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListOrComprehensionAccess().getGeneratorsLCExprParserRuleCall_1_1_2_1_3_1_0()); 
	    }
		lv_generators_11_0=ruleLCExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListOrComprehensionRule());
	        }
       		add(
       			$current, 
       			"generators",
        		lv_generators_11_0, 
        		"LCExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*))?))	otherlv_12=']' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getListOrComprehensionAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleTuple
entryRuleTuple returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTupleRule()); }
	 iv_ruleTuple=ruleTuple 
	 { $current=$iv_ruleTuple.current; } 
	 EOF 
;

// Rule Tuple
ruleTuple returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTupleAccess().getLeftCurlyBracketKeyword_0());
    }
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTupleAccess().getErlTupleAction_1_0(),
            $current);
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getTupleAccess().getElementsExpressionParserRuleCall_1_1_0_0()); 
	    }
		lv_elements_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTupleAccess().getCommaKeyword_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTupleAccess().getElementsExpressionParserRuleCall_1_1_1_1_0()); 
	    }
		lv_elements_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*))	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTupleAccess().getRightCurlyBracketKeyword_2());
    }
)
;





// Entry rule entryRuleBinaryOrComprehension
entryRuleBinaryOrComprehension returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryOrComprehensionRule()); }
	 iv_ruleBinaryOrComprehension=ruleBinaryOrComprehension 
	 { $current=$iv_ruleBinaryOrComprehension.current; } 
	 EOF 
;

// Rule BinaryOrComprehension
ruleBinaryOrComprehension returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBinaryOrComprehensionAccess().getLessThanSignLessThanSignKeyword_0());
    }
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBinaryOrComprehensionAccess().getErlBinaryAction_1_0(),
            $current);
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryOrComprehensionAccess().getElementsBinaryItemParserRuleCall_1_1_0_0()); 
	    }
		lv_elements_2_0=ruleBinaryItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryOrComprehensionRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"BinaryItem");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBinaryOrComprehensionAccess().getCommaKeyword_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryOrComprehensionAccess().getElementsBinaryItemParserRuleCall_1_1_1_1_0()); 
	    }
		lv_elements_4_0=ruleBinaryItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryOrComprehensionRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_4_0, 
        		"BinaryItem");
	        afterParserOrEnumRuleCall();
	    }

)
))*((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBinaryOrComprehensionAccess().getBinaryComprehensionRootAction_1_1_2_0(),
            $current);
    }
)	otherlv_6='||' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getBinaryOrComprehensionAccess().getVerticalLineVerticalLineKeyword_1_1_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryOrComprehensionAccess().getGeneratorsLCExprParserRuleCall_1_1_2_2_0()); 
	    }
		lv_generators_7_0=ruleLCExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryOrComprehensionRule());
	        }
       		add(
       			$current, 
       			"generators",
        		lv_generators_7_0, 
        		"LCExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getBinaryOrComprehensionAccess().getCommaKeyword_1_1_2_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryOrComprehensionAccess().getGeneratorsLCExprParserRuleCall_1_1_2_3_1_0()); 
	    }
		lv_generators_9_0=ruleLCExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryOrComprehensionRule());
	        }
       		add(
       			$current, 
       			"generators",
        		lv_generators_9_0, 
        		"LCExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?))	otherlv_10='>>' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getBinaryOrComprehensionAccess().getGreaterThanSignGreaterThanSignKeyword_2());
    }
)
;





// Entry rule entryRuleBinaryItem
entryRuleBinaryItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryItemRule()); }
	 iv_ruleBinaryItem=ruleBinaryItem 
	 { $current=$iv_ruleBinaryItem.current; } 
	 EOF 
;

// Rule BinaryItem
ruleBinaryItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryItemAccess().getExprUnaryExprMaxParserRuleCall_0_0()); 
	    }
		lv_expr_0_0=ruleUnaryExprMax		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryItemRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"UnaryExprMax");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	':' 
)=>	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBinaryItemAccess().getColonKeyword_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryItemAccess().getSizeExprMaxParserRuleCall_1_1_0()); 
	    }
		lv_size_2_0=ruleExprMax		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryItemRule());
	        }
       		set(
       			$current, 
       			"size",
        		lv_size_2_0, 
        		"ExprMax");
	        afterParserOrEnumRuleCall();
	    }

)
))?(((	'/' 
)=>	otherlv_3='/' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBinaryItemAccess().getSolidusKeyword_2_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryItemAccess().getTypesBitTypeParserRuleCall_2_1_0()); 
	    }
		lv_types_4_0=ruleBitType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryItemRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_4_0, 
        		"BitType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='-' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getBinaryItemAccess().getHyphenMinusKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryItemAccess().getTypeBitTypeParserRuleCall_2_2_1_0()); 
	    }
		lv_type_6_0=ruleBitType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryItemRule());
	        }
       		add(
       			$current, 
       			"type",
        		lv_type_6_0, 
        		"BitType");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleBitType
entryRuleBitType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitTypeRule()); }
	 iv_ruleBitType=ruleBitType 
	 { $current=$iv_ruleBitType.current; } 
	 EOF 
;

// Rule BitType
ruleBitType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBitTypeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getBitTypeAccess().getTypeNameAtomRefTargetCrossReference_0_0()); 
	    }
		ruleNAMEMACRO		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBitTypeAccess().getColonKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBitTypeAccess().getSizeIntVarMacroParserRuleCall_1_1_0()); 
	    }
		lv_size_2_0=ruleIntVarMacro		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitTypeRule());
	        }
       		set(
       			$current, 
       			"size",
        		lv_size_2_0, 
        		"IntVarMacro");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleUnaryExprMax
entryRuleUnaryExprMax returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExprMaxRule()); }
	 iv_ruleUnaryExprMax=ruleUnaryExprMax 
	 { $current=$iv_ruleUnaryExprMax.current; } 
	 EOF 
;

// Rule UnaryExprMax
ruleUnaryExprMax returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnaryExprMaxAccess().getUnaryExprAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExprMaxAccess().getOpPREFIXOPParserRuleCall_0_1_0()); 
	    }
		lv_op_1_0=rulePREFIXOP		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExprMaxRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"PREFIXOP");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExprMaxAccess().getOperandExprMaxParserRuleCall_0_2_0()); 
	    }
		lv_operand_2_0=ruleExprMax		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExprMaxRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_2_0, 
        		"ExprMax");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getUnaryExprMaxAccess().getExprMaxParserRuleCall_1()); 
    }
    this_ExprMax_3=ruleExprMax
    { 
        $current = $this_ExprMax_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLCExpr
entryRuleLCExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLCExprRule()); }
	 iv_ruleLCExpr=ruleLCExpr 
	 { $current=$iv_ruleLCExpr.current; } 
	 EOF 
;

// Rule LCExpr
ruleLCExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLCExprAccess().getO1ExpressionParserRuleCall_0_0()); 
	    }
		lv_o1_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLCExprRule());
	        }
       		set(
       			$current, 
       			"o1",
        		lv_o1_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
(
		lv_op_1_1=	'<-' 
    {
        newLeafNode(lv_op_1_1, grammarAccess.getLCExprAccess().getOpLessThanSignHyphenMinusKeyword_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLCExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_1, null);
	    }

    |		lv_op_1_2=	'<=' 
    {
        newLeafNode(lv_op_1_2, grammarAccess.getLCExprAccess().getOpLessThanSignEqualsSignKeyword_1_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLCExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLCExprAccess().getO2ExpressionParserRuleCall_1_1_0()); 
	    }
		lv_o2_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLCExprRule());
	        }
       		set(
       			$current, 
       			"o2",
        		lv_o2_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleADDOP
entryRuleADDOP returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getADDOPRule()); } 
	 iv_ruleADDOP=ruleADDOP 
	 { $current=$iv_ruleADDOP.current.getText(); }  
	 EOF 
;

// Rule ADDOP
ruleADDOP returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getADDOPAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getADDOPAccess().getHyphenMinusKeyword_1()); 
    }

    |
	kw='bor' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getADDOPAccess().getBorKeyword_2()); 
    }

    |
	kw='bxor' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getADDOPAccess().getBxorKeyword_3()); 
    }

    |
	kw='bsl' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getADDOPAccess().getBslKeyword_4()); 
    }

    |
	kw='bsr' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getADDOPAccess().getBsrKeyword_5()); 
    }

    |
	kw='or' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getADDOPAccess().getOrKeyword_6()); 
    }

    |
	kw='xor' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getADDOPAccess().getXorKeyword_7()); 
    }
)
    ;





// Entry rule entryRuleMULTOP
entryRuleMULTOP returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMULTOPRule()); } 
	 iv_ruleMULTOP=ruleMULTOP 
	 { $current=$iv_ruleMULTOP.current.getText(); }  
	 EOF 
;

// Rule MULTOP
ruleMULTOP returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMULTOPAccess().getAsteriskKeyword_0()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMULTOPAccess().getSolidusKeyword_1()); 
    }

    |
	kw='div' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMULTOPAccess().getDivKeyword_2()); 
    }

    |
	kw='rem' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMULTOPAccess().getRemKeyword_3()); 
    }

    |
	kw='band' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMULTOPAccess().getBandKeyword_4()); 
    }

    |
	kw='and' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMULTOPAccess().getAndKeyword_5()); 
    }
)
    ;





// Entry rule entryRulePREFIXOP
entryRulePREFIXOP returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPREFIXOPRule()); } 
	 iv_rulePREFIXOP=rulePREFIXOP 
	 { $current=$iv_rulePREFIXOP.current.getText(); }  
	 EOF 
;

// Rule PREFIXOP
rulePREFIXOP returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPREFIXOPAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPREFIXOPAccess().getHyphenMinusKeyword_1()); 
    }

    |
	kw='bnot' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPREFIXOPAccess().getBnotKeyword_2()); 
    }

    |
	kw='not' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPREFIXOPAccess().getNotKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleLISTOP
entryRuleLISTOP returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLISTOPRule()); } 
	 iv_ruleLISTOP=ruleLISTOP 
	 { $current=$iv_ruleLISTOP.current.getText(); }  
	 EOF 
;

// Rule LISTOP
ruleLISTOP returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='++' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLISTOPAccess().getPlusSignPlusSignKeyword_0()); 
    }

    |
	kw='--' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLISTOPAccess().getHyphenMinusHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleCOMPOP
entryRuleCOMPOP returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCOMPOPRule()); } 
	 iv_ruleCOMPOP=ruleCOMPOP 
	 { $current=$iv_ruleCOMPOP.current.getText(); }  
	 EOF 
;

// Rule COMPOP
ruleCOMPOP returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCOMPOPAccess().getEqualsSignEqualsSignKeyword_0()); 
    }

    |
	kw='/=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCOMPOPAccess().getSolidusEqualsSignKeyword_1()); 
    }

    |
	kw='=<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCOMPOPAccess().getEqualsSignLessThanSignKeyword_2()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCOMPOPAccess().getLessThanSignKeyword_3()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCOMPOPAccess().getGreaterThanSignEqualsSignKeyword_4()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCOMPOPAccess().getGreaterThanSignKeyword_5()); 
    }

    |
	kw='=:=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCOMPOPAccess().getEqualsSignColonEqualsSignKeyword_6()); 
    }

    |
	kw='=/=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCOMPOPAccess().getEqualsSignSolidusEqualsSignKeyword_7()); 
    }
)
    ;





// Entry rule entryRuleSENDOP
entryRuleSENDOP returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSENDOPRule()); } 
	 iv_ruleSENDOP=ruleSENDOP 
	 { $current=$iv_ruleSENDOP.current.getText(); }  
	 EOF 
;

// Rule SENDOP
ruleSENDOP returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSENDOPAccess().getExclamationMarkKeyword()); 
    }

    ;





// Entry rule entryRuleModuleVarMacro
entryRuleModuleVarMacro returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleVarMacroRule()); }
	 iv_ruleModuleVarMacro=ruleModuleVarMacro 
	 { $current=$iv_ruleModuleVarMacro.current; } 
	 EOF 
;

// Rule ModuleVarMacro
ruleModuleVarMacro returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getModuleVarMacroAccess().getModuleRefParserRuleCall_0()); 
    }
    this_ModuleRef_0=ruleModuleRef
    { 
        $current = $this_ModuleRef_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModuleVarMacroAccess().getVariableLiteralParserRuleCall_1()); 
    }
    this_VariableLiteral_1=ruleVariableLiteral
    { 
        $current = $this_VariableLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModuleVarMacroAccess().getMacroLiteralParserRuleCall_2()); 
    }
    this_MacroLiteral_2=ruleMacroLiteral
    { 
        $current = $this_MacroLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFunctionVarMacro
entryRuleFunctionVarMacro returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionVarMacroRule()); }
	 iv_ruleFunctionVarMacro=ruleFunctionVarMacro 
	 { $current=$iv_ruleFunctionVarMacro.current; } 
	 EOF 
;

// Rule FunctionVarMacro
ruleFunctionVarMacro returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFunctionVarMacroAccess().getFunctionRefParserRuleCall_0()); 
    }
    this_FunctionRef_0=ruleFunctionRef
    { 
        $current = $this_FunctionRef_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFunctionVarMacroAccess().getVariableLiteralParserRuleCall_1()); 
    }
    this_VariableLiteral_1=ruleVariableLiteral
    { 
        $current = $this_VariableLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFunctionVarMacroAccess().getMacroLiteralParserRuleCall_2()); 
    }
    this_MacroLiteral_2=ruleMacroLiteral
    { 
        $current = $this_MacroLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRecordVarMacro
entryRuleRecordVarMacro returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordVarMacroRule()); }
	 iv_ruleRecordVarMacro=ruleRecordVarMacro 
	 { $current=$iv_ruleRecordVarMacro.current; } 
	 EOF 
;

// Rule RecordVarMacro
ruleRecordVarMacro returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRecordVarMacroAccess().getRecordRefParserRuleCall_0()); 
    }
    this_RecordRef_0=ruleRecordRef
    { 
        $current = $this_RecordRef_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRecordVarMacroAccess().getVariableLiteralParserRuleCall_1()); 
    }
    this_VariableLiteral_1=ruleVariableLiteral
    { 
        $current = $this_VariableLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRecordVarMacroAccess().getMacroLiteralParserRuleCall_2()); 
    }
    this_MacroLiteral_2=ruleMacroLiteral
    { 
        $current = $this_MacroLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRecordFieldVarMacro
entryRuleRecordFieldVarMacro returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordFieldVarMacroRule()); }
	 iv_ruleRecordFieldVarMacro=ruleRecordFieldVarMacro 
	 { $current=$iv_ruleRecordFieldVarMacro.current; } 
	 EOF 
;

// Rule RecordFieldVarMacro
ruleRecordFieldVarMacro returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRecordFieldVarMacroAccess().getRecordFieldRefParserRuleCall_0()); 
    }
    this_RecordFieldRef_0=ruleRecordFieldRef
    { 
        $current = $this_RecordFieldRef_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRecordFieldVarMacroAccess().getVariableLiteralParserRuleCall_1()); 
    }
    this_VariableLiteral_1=ruleVariableLiteral
    { 
        $current = $this_VariableLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRecordFieldVarMacroAccess().getMacroLiteralParserRuleCall_2()); 
    }
    this_MacroLiteral_2=ruleMacroLiteral
    { 
        $current = $this_MacroLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;







// Entry rule entryRuleIntVarMacro
entryRuleIntVarMacro returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntVarMacroRule()); }
	 iv_ruleIntVarMacro=ruleIntVarMacro 
	 { $current=$iv_ruleIntVarMacro.current; } 
	 EOF 
;

// Rule IntVarMacro
ruleIntVarMacro returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIntVarMacroAccess().getIntegerLiteralParserRuleCall_0()); 
    }
    this_IntegerLiteral_0=ruleIntegerLiteral
    { 
        $current = $this_IntegerLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIntVarMacroAccess().getVariableLiteralParserRuleCall_1()); 
    }
    this_VariableLiteral_1=ruleVariableLiteral
    { 
        $current = $this_VariableLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIntVarMacroAccess().getMacroLiteralParserRuleCall_2()); 
    }
    this_MacroLiteral_2=ruleMacroLiteral
    { 
        $current = $this_MacroLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNAME
entryRuleNAME returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNAMERule()); } 
	 iv_ruleNAME=ruleNAME 
	 { $current=$iv_ruleNAME.current.getText(); }  
	 EOF 
;

// Rule NAME
ruleNAME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ATOM_0=RULE_ATOM    {
		$current.merge(this_ATOM_0);
    }

    { 
    newLeafNode(this_ATOM_0, grammarAccess.getNAMEAccess().getATOMTerminalRuleCall_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getNAMEAccess().getKWParserRuleCall_1()); 
    }
    this_KW_1=ruleKW    {
		$current.merge(this_KW_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleNAMEVAR
entryRuleNAMEVAR returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNAMEVARRule()); } 
	 iv_ruleNAMEVAR=ruleNAMEVAR 
	 { $current=$iv_ruleNAMEVAR.current.getText(); }  
	 EOF 
;

// Rule NAMEVAR
ruleNAMEVAR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ATOM_0=RULE_ATOM    {
		$current.merge(this_ATOM_0);
    }

    { 
    newLeafNode(this_ATOM_0, grammarAccess.getNAMEVARAccess().getATOMTerminalRuleCall_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getNAMEVARAccess().getKWParserRuleCall_1()); 
    }
    this_KW_1=ruleKW    {
		$current.merge(this_KW_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_VARIABLE_2=RULE_VARIABLE    {
		$current.merge(this_VARIABLE_2);
    }

    { 
    newLeafNode(this_VARIABLE_2, grammarAccess.getNAMEVARAccess().getVARIABLETerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleMACRO
entryRuleMACRO returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMACRORule()); } 
	 iv_ruleMACRO=ruleMACRO 
	 { $current=$iv_ruleMACRO.current.getText(); }  
	 EOF 
;

// Rule MACRO
ruleMACRO returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='?' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMACROAccess().getQuestionMarkKeyword_0_0()); 
    }

    |
	kw='??' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMACROAccess().getQuestionMarkQuestionMarkKeyword_0_1()); 
    }
)(    this_ATOM_2=RULE_ATOM    {
		$current.merge(this_ATOM_2);
    }

    { 
    newLeafNode(this_ATOM_2, grammarAccess.getMACROAccess().getATOMTerminalRuleCall_1_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getMACROAccess().getKW1ParserRuleCall_1_1()); 
    }
    this_KW1_3=ruleKW1    {
		$current.merge(this_KW1_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_VARIABLE_4=RULE_VARIABLE    {
		$current.merge(this_VARIABLE_4);
    }

    { 
    newLeafNode(this_VARIABLE_4, grammarAccess.getMACROAccess().getVARIABLETerminalRuleCall_1_2()); 
    }
))
    ;







// Entry rule entryRuleNAMEMACRO
entryRuleNAMEMACRO returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNAMEMACRORule()); } 
	 iv_ruleNAMEMACRO=ruleNAMEMACRO 
	 { $current=$iv_ruleNAMEMACRO.current.getText(); }  
	 EOF 
;

// Rule NAMEMACRO
ruleNAMEMACRO returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ATOM_0=RULE_ATOM    {
		$current.merge(this_ATOM_0);
    }

    { 
    newLeafNode(this_ATOM_0, grammarAccess.getNAMEMACROAccess().getATOMTerminalRuleCall_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getNAMEMACROAccess().getKWParserRuleCall_1()); 
    }
    this_KW_1=ruleKW    {
		$current.merge(this_KW_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNAMEMACROAccess().getMACROParserRuleCall_2()); 
    }
    this_MACRO_2=ruleMACRO    {
		$current.merge(this_MACRO_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleKW
entryRuleKW returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getKWRule()); } 
	 iv_ruleKW=ruleKW 
	 { $current=$iv_ruleKW.current.getText(); }  
	 EOF 
;

// Rule KW
ruleKW returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getKWAccess().getKW1ParserRuleCall_0()); 
    }
    this_KW1_0=ruleKW1    {
		$current.merge(this_KW1_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='line' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKWAccess().getLineKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleKW1
entryRuleKW1 returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getKW1Rule()); } 
	 iv_ruleKW1=ruleKW1 
	 { $current=$iv_ruleKW1.current.getText(); }  
	 EOF 
;

// Rule KW1
ruleKW1 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='spec' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKW1Access().getSpecKeyword_0()); 
    }

    |
	kw='endif' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKW1Access().getEndifKeyword_1()); 
    }

    |
	kw='ifdef' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKW1Access().getIfdefKeyword_2()); 
    }

    |
	kw='ifndef' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKW1Access().getIfndefKeyword_3()); 
    }

    |
	kw='type' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKW1Access().getTypeKeyword_4()); 
    }

    |
	kw='opaque' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKW1Access().getOpaqueKeyword_5()); 
    }

    |
	kw='record' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKW1Access().getRecordKeyword_6()); 
    }

    |
	kw='undef' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKW1Access().getUndefKeyword_7()); 
    }

    |
	kw='module' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKW1Access().getModuleKeyword_8()); 
    }

    |
	kw='include' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKW1Access().getIncludeKeyword_9()); 
    }

    |
	kw='include_lib' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKW1Access().getInclude_libKeyword_10()); 
    }

    |
	kw='define' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKW1Access().getDefineKeyword_11()); 
    }

    |
	kw='file' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKW1Access().getFileKeyword_12()); 
    }

    |
	kw='callback' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKW1Access().getCallbackKeyword_13()); 
    }

    |
	kw='else' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKW1Access().getElseKeyword_14()); 
    }

    |
	kw='export' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKW1Access().getExportKeyword_15()); 
    }

    |
	kw='import' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKW1Access().getImportKeyword_16()); 
    }

    |
	kw='compile' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKW1Access().getCompileKeyword_17()); 
    }

    |
	kw='encoding' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKW1Access().getEncodingKeyword_18()); 
    }
)
    ;







// Entry rule entryRuleINTEGER
entryRuleINTEGER returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getINTEGERRule()); } 
	 iv_ruleINTEGER=ruleINTEGER 
	 { $current=$iv_ruleINTEGER.current.getText(); }  
	 EOF 
;

// Rule INTEGER
ruleINTEGER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getINTEGERAccess().getINTTerminalRuleCall_0()); 
    }

    |    this_BASED_INT_1=RULE_BASED_INT    {
		$current.merge(this_BASED_INT_1);
    }

    { 
    newLeafNode(this_BASED_INT_1, grammarAccess.getINTEGERAccess().getBASED_INTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleFLOAT
entryRuleFLOAT returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getFLOATRule()); } 
	 iv_ruleFLOAT=ruleFLOAT 
	 { $current=$iv_ruleFLOAT.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule FLOAT
ruleFLOAT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getFLOATAccess().getINTTerminalRuleCall_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFLOATAccess().getFullStopKeyword_1()); 
    }
(    this_EXT_INT_2=RULE_EXT_INT    {
		$current.merge(this_EXT_INT_2);
    }

    { 
    newLeafNode(this_EXT_INT_2, grammarAccess.getFLOATAccess().getEXT_INTTerminalRuleCall_2_0()); 
    }

    |    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    newLeafNode(this_INT_3, grammarAccess.getFLOATAccess().getINTTerminalRuleCall_2_1()); 
    }
))
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleSpecFun
entryRuleSpecFun returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpecFunRule()); }
	 iv_ruleSpecFun=ruleSpecFun 
	 { $current=$iv_ruleSpecFun.current; } 
	 EOF 
;

// Rule SpecFun
ruleSpecFun returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getSpecFunAccess().getModuleModuleVarMacroParserRuleCall_0_0_0()); 
	    }
		lv_module_0_0=ruleModuleVarMacro		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecFunRule());
	        }
       		set(
       			$current, 
       			"module",
        		lv_module_0_0, 
        		"ModuleVarMacro");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSpecFunAccess().getColonKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecFunAccess().getFunctionFunctionVarMacroParserRuleCall_1_0()); 
	    }
		lv_function_2_0=ruleFunctionVarMacro		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecFunRule());
	        }
       		set(
       			$current, 
       			"function",
        		lv_function_2_0, 
        		"FunctionVarMacro");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='/' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSpecFunAccess().getSolidusKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecFunAccess().getArityIntVarMacroParserRuleCall_2_1_0()); 
	    }
		lv_arity_4_0=ruleIntVarMacro		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecFunRule());
	        }
       		set(
       			$current, 
       			"arity",
        		lv_arity_4_0, 
        		"IntVarMacro");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='::' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSpecFunAccess().getColonColonKeyword_2_2());
    }
)?)
;





// Entry rule entryRuleTypeSig
entryRuleTypeSig returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeSigRule()); }
	 iv_ruleTypeSig=ruleTypeSig 
	 { $current=$iv_ruleTypeSig.current; } 
	 EOF 
;

// Rule TypeSig
ruleTypeSig returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeSigAccess().getDeclFunTypeParserRuleCall_0_0()); 
	    }
		lv_decl_0_0=ruleFunType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeSigRule());
	        }
       		set(
       			$current, 
       			"decl",
        		lv_decl_0_0, 
        		"FunType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='when' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeSigAccess().getWhenKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeSigAccess().getGuardsTypeGuardsParserRuleCall_1_1_0()); 
	    }
		lv_guards_2_0=ruleTypeGuards		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeSigRule());
	        }
       		set(
       			$current, 
       			"guards",
        		lv_guards_2_0, 
        		"TypeGuards");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleFunType
entryRuleFunType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunTypeRule()); }
	 iv_ruleFunType=ruleFunType 
	 { $current=$iv_ruleFunType.current; } 
	 EOF 
;

// Rule FunType
ruleFunType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunTypeAccess().getLeftParenthesisKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunTypeAccess().getArgsTopTypeParserRuleCall_1_0_0()); 
	    }
		lv_args_1_0=ruleTopType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunTypeRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_1_0, 
        		"TopType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunTypeAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunTypeAccess().getArgsTopTypeParserRuleCall_1_1_1_0()); 
	    }
		lv_args_3_0=ruleTopType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunTypeRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_3_0, 
        		"TopType");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunTypeAccess().getRightParenthesisKeyword_2());
    }
	otherlv_5='->' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunTypeAccess().getHyphenMinusGreaterThanSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunTypeAccess().getReturnTopTypeParserRuleCall_4_0()); 
	    }
		lv_return_6_0=ruleTopType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunTypeRule());
	        }
       		set(
       			$current, 
       			"return",
        		lv_return_6_0, 
        		"TopType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTypeGuards
entryRuleTypeGuards returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeGuardsRule()); }
	 iv_ruleTypeGuards=ruleTypeGuards 
	 { $current=$iv_ruleTypeGuards.current; } 
	 EOF 
;

// Rule TypeGuards
ruleTypeGuards returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeGuardsAccess().getItemsTypeGuardParserRuleCall_0_0()); 
	    }
		lv_items_0_0=ruleTypeGuard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeGuardsRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_0_0, 
        		"TypeGuard");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeGuardsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeGuardsAccess().getItemsTypeGuardParserRuleCall_1_1_0()); 
	    }
		lv_items_2_0=ruleTypeGuard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeGuardsRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_2_0, 
        		"TypeGuard");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTypeGuard
entryRuleTypeGuard returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeGuardRule()); }
	 iv_ruleTypeGuard=ruleTypeGuard 
	 { $current=$iv_ruleTypeGuard.current; } 
	 EOF 
;

// Rule TypeGuard
ruleTypeGuard returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeGuardAccess().getTypeNameTypeRefParserRuleCall_0_0_0()); 
	    }
		lv_typeName_0_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeGuardRule());
	        }
       		set(
       			$current, 
       			"typeName",
        		lv_typeName_0_0, 
        		"TypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeGuardAccess().getLeftParenthesisKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeGuardAccess().getTypesTopTypeParserRuleCall_0_2_0()); 
	    }
		lv_types_2_0=ruleTopType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeGuardRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_2_0, 
        		"TopType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeGuardAccess().getCommaKeyword_0_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeGuardAccess().getTypesTopTypeParserRuleCall_0_3_1_0()); 
	    }
		lv_types_4_0=ruleTopType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeGuardRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_4_0, 
        		"TopType");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypeGuardAccess().getRightParenthesisKeyword_0_4());
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeGuardAccess().getTypeNameVariableLiteralParserRuleCall_1_0_0()); 
	    }
		lv_typeName_6_0=ruleVariableLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeGuardRule());
	        }
       		set(
       			$current, 
       			"typeName",
        		lv_typeName_6_0, 
        		"VariableLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='::' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTypeGuardAccess().getColonColonKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeGuardAccess().getTypeTopTypeParserRuleCall_1_2_0()); 
	    }
		lv_type_8_0=ruleTopType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeGuardRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_8_0, 
        		"TopType");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleTopType
entryRuleTopType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTopTypeRule()); }
	 iv_ruleTopType=ruleTopType 
	 { $current=$iv_ruleTopType.current; } 
	 EOF 
;

// Rule TopType
ruleTopType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_var_0_0=RULE_VARIABLE
		{
			newLeafNode(lv_var_0_0, grammarAccess.getTopTypeAccess().getVarVARIABLETerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTopTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"var",
        		lv_var_0_0, 
        		"VARIABLE");
	    }

)
)	otherlv_1='::' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTopTypeAccess().getColonColonKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTopTypeAccess().getTypeType100ParserRuleCall_1_0()); 
	    }
		lv_type_2_0=ruleType100		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTopTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type100");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleType100
entryRuleType100 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getType100Rule()); }
	 iv_ruleType100=ruleType100 
	 { $current=$iv_ruleType100.current; } 
	 EOF 
;

// Rule Type100
ruleType100 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getType100Access().getType200ParserRuleCall_0()); 
    }
    this_Type200_0=ruleType200
    { 
        $current = $this_Type200_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
	'|' 
 

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getType100Access().getTopTypeLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'|' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getType100Access().getOpVerticalLineKeyword_1_0_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getType100Rule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "|");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getType100Access().getRightOperandType200ParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleType200		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getType100Rule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"Type200");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleType200
entryRuleType200 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getType200Rule()); }
	 iv_ruleType200=ruleType200 
	 { $current=$iv_ruleType200.current; } 
	 EOF 
;

// Rule Type200
ruleType200 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getType200Access().getType300ParserRuleCall_0()); 
    }
    this_Type300_0=ruleType300
    { 
        $current = $this_Type300_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
	'..' 
 

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getType200Access().getTopTypeLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'..' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getType200Access().getOpFullStopFullStopKeyword_1_0_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getType200Rule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "..");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getType200Access().getRightOperandType300ParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleType300		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getType200Rule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"Type300");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleType300
entryRuleType300 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getType300Rule()); }
	 iv_ruleType300=ruleType300 
	 { $current=$iv_ruleType300.current; } 
	 EOF 
;

// Rule Type300
ruleType300 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getType300Access().getType400ParserRuleCall_0()); 
    }
    this_Type400_0=ruleType400
    { 
        $current = $this_Type400_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleADDOP
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getType300Access().getTopTypeLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getType300Access().getOpADDOPParserRuleCall_1_0_0_1_0()); 
	    }
		lv_op_2_0=ruleADDOP		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getType300Rule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"ADDOP");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getType300Access().getRightOperandType400ParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleType400		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getType300Rule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"Type400");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleType400
entryRuleType400 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getType400Rule()); }
	 iv_ruleType400=ruleType400 
	 { $current=$iv_ruleType400.current; } 
	 EOF 
;

// Rule Type400
ruleType400 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getType400Access().getType500ParserRuleCall_0()); 
    }
    this_Type500_0=ruleType500
    { 
        $current = $this_Type500_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleMULTOP
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getType400Access().getTopTypeLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getType400Access().getOpMULTOPParserRuleCall_1_0_0_1_0()); 
	    }
		lv_op_2_0=ruleMULTOP		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getType400Rule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"MULTOP");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getType400Access().getRightOperandType500ParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleType500		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getType400Rule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"Type500");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleType500
entryRuleType500 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getType500Rule()); }
	 iv_ruleType500=ruleType500 
	 { $current=$iv_ruleType500.current; } 
	 EOF 
;

// Rule Type500
ruleType500 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getType500Access().getUnaryTypeAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getType500Access().getOpPREFIXOPParserRuleCall_0_1_0()); 
	    }
		lv_op_1_0=rulePREFIXOP		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getType500Rule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"PREFIXOP");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getType500Access().getOperandTypeParserRuleCall_0_2_0()); 
	    }
		lv_operand_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getType500Rule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getType500Access().getTypeParserRuleCall_1()); 
    }
    this_Type_3=ruleType
    { 
        $current = $this_Type_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getTypeAccess().getTopTypeParserRuleCall_0_1()); 
    }
    this_TopType_1=ruleTopType
    { 
        $current = $this_TopType_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeAccess().getRightParenthesisKeyword_0_2());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getRemoteTypeAction_1_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getMModuleVarMacroParserRuleCall_1_1_0_0()); 
	    }
		lv_m_4_0=ruleModuleVarMacro		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"m",
        		lv_m_4_0, 
        		"ModuleVarMacro");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypeAccess().getColonKeyword_1_1_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getTypeNameTypeRefParserRuleCall_1_2_0()); 
	    }
		lv_typeName_6_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"typeName",
        		lv_typeName_6_0, 
        		"TypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7='(' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTypeAccess().getLeftParenthesisKeyword_1_3_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getArgsTopTypeParserRuleCall_1_3_1_0_0()); 
	    }
		lv_args_8_0=ruleTopType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_8_0, 
        		"TopType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTypeAccess().getCommaKeyword_1_3_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getArgsTopTypeParserRuleCall_1_3_1_1_1_0()); 
	    }
		lv_args_10_0=ruleTopType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_10_0, 
        		"TopType");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTypeAccess().getRightParenthesisKeyword_1_3_2());
    }
)?)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getTypeNameVariableLiteralParserRuleCall_2_0()); 
	    }
		lv_typeName_12_0=ruleVariableLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"typeName",
        		lv_typeName_12_0, 
        		"VariableLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getValueINTEGERParserRuleCall_3_0()); 
	    }
		lv_value_13_0=ruleINTEGER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_13_0, 
        		"INTEGER");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_14='[' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getTypeAccess().getLeftSquareBracketKeyword_4_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getListTypeAction_4_1(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getTypeTopTypeParserRuleCall_4_2_0_0()); 
	    }
		lv_type_16_0=ruleTopType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_16_0, 
        		"TopType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_17=',' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getTypeAccess().getCommaKeyword_4_2_1_0());
    }
	otherlv_18='...' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getTypeAccess().getFullStopFullStopFullStopKeyword_4_2_1_1());
    }
)?)?	otherlv_19=']' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getTypeAccess().getRightSquareBracketKeyword_4_3());
    }
)
    |(	otherlv_20='{' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getTypeAccess().getLeftCurlyBracketKeyword_5_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getTupleTypeAction_5_1(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getTypesTopTypeParserRuleCall_5_2_0_0()); 
	    }
		lv_types_22_0=ruleTopType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_22_0, 
        		"TopType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_23=',' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getTypeAccess().getCommaKeyword_5_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getTypesTopTypeParserRuleCall_5_2_1_1_0()); 
	    }
		lv_types_24_0=ruleTopType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_24_0, 
        		"TopType");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_25='}' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getTypeAccess().getRightCurlyBracketKeyword_5_3());
    }
)
    |(	otherlv_26='#' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getTypeAccess().getNumberSignKeyword_6_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getRecordTypeAction_6_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getRecRecordRefParserRuleCall_6_2_0()); 
	    }
		lv_rec_28_0=ruleRecordRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"rec",
        		lv_rec_28_0, 
        		"RecordRef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_29='{' 
    {
    	newLeafNode(otherlv_29, grammarAccess.getTypeAccess().getLeftCurlyBracketKeyword_6_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getFieldsFieldTypeParserRuleCall_6_4_0_0()); 
	    }
		lv_fields_30_0=ruleFieldType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_30_0, 
        		"FieldType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_31=',' 
    {
    	newLeafNode(otherlv_31, grammarAccess.getTypeAccess().getCommaKeyword_6_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getFieldsFieldTypeParserRuleCall_6_4_1_1_0()); 
	    }
		lv_fields_32_0=ruleFieldType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_32_0, 
        		"FieldType");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_33='}' 
    {
    	newLeafNode(otherlv_33, grammarAccess.getTypeAccess().getRightCurlyBracketKeyword_6_5());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getBinaryTypeParserRuleCall_7()); 
    }
    this_BinaryType_34=ruleBinaryType
    { 
        $current = $this_BinaryType_34.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_35='fun' 
    {
    	newLeafNode(otherlv_35, grammarAccess.getTypeAccess().getFunKeyword_8_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getFunTypeAction_8_1(),
            $current);
    }
)	otherlv_37='(' 
    {
    	newLeafNode(otherlv_37, grammarAccess.getTypeAccess().getLeftParenthesisKeyword_8_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getTypeFunType100ParserRuleCall_8_3_0()); 
	    }
		lv_type_38_0=ruleFunType100		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_38_0, 
        		"FunType100");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_39=')' 
    {
    	newLeafNode(otherlv_39, grammarAccess.getTypeAccess().getRightParenthesisKeyword_8_4());
    }
))
;





// Entry rule entryRuleFieldType
entryRuleFieldType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldTypeRule()); }
	 iv_ruleFieldType=ruleFieldType 
	 { $current=$iv_ruleFieldType.current; } 
	 EOF 
;

// Rule FieldType
ruleFieldType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldTypeRule());
	        }
        }
	otherlv_0=RULE_ATOM
	{
		newLeafNode(otherlv_0, grammarAccess.getFieldTypeAccess().getTypeNameTypeAttributeCrossReference_0_0()); 
	}

)
)	otherlv_1='::' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFieldTypeAccess().getColonColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldTypeAccess().getTypeTopTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleTopType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"TopType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBinaryType
entryRuleBinaryType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryTypeRule()); }
	 iv_ruleBinaryType=ruleBinaryType 
	 { $current=$iv_ruleBinaryType.current; } 
	 EOF 
;

// Rule BinaryType
ruleBinaryType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBinaryTypeAccess().getLessThanSignLessThanSignKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getBinaryTypeAccess().getBinaryTypeAction_1(),
            $current);
    }
)(((
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryTypeAccess().getTypeBinBaseTypeParserRuleCall_2_0_0_0()); 
	    }
		lv_type_2_0=ruleBinBaseType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryTypeRule());
	        }
       		add(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"BinBaseType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBinaryTypeAccess().getCommaKeyword_2_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryTypeAccess().getTypeBinUnitTypeParserRuleCall_2_0_1_1_0()); 
	    }
		lv_type_4_0=ruleBinUnitType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryTypeRule());
	        }
       		add(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"BinUnitType");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryTypeAccess().getTypeBinUnitTypeParserRuleCall_2_1_0()); 
	    }
		lv_type_5_0=ruleBinUnitType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryTypeRule());
	        }
       		add(
       			$current, 
       			"type",
        		lv_type_5_0, 
        		"BinUnitType");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6='>>' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getBinaryTypeAccess().getGreaterThanSignGreaterThanSignKeyword_3());
    }
)
;





// Entry rule entryRuleBinBaseType
entryRuleBinBaseType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinBaseTypeRule()); }
	 iv_ruleBinBaseType=ruleBinBaseType 
	 { $current=$iv_ruleBinBaseType.current; } 
	 EOF 
;

// Rule BinBaseType
ruleBinBaseType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBinBaseTypeAccess().getTypeNameVariableLiteralParserRuleCall_0_0()); 
	    }
		lv_typeName_0_0=ruleVariableLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinBaseTypeRule());
	        }
       		set(
       			$current, 
       			"typeName",
        		lv_typeName_0_0, 
        		"VariableLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBinBaseTypeAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinBaseTypeAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinBaseTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBinUnitType
entryRuleBinUnitType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinUnitTypeRule()); }
	 iv_ruleBinUnitType=ruleBinUnitType 
	 { $current=$iv_ruleBinUnitType.current; } 
	 EOF 
;

// Rule BinUnitType
ruleBinUnitType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBinUnitTypeAccess().getTypeNameVariableLiteralParserRuleCall_0_0()); 
	    }
		lv_typeName_0_0=ruleVariableLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinUnitTypeRule());
	        }
       		set(
       			$current, 
       			"typeName",
        		lv_typeName_0_0, 
        		"VariableLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBinUnitTypeAccess().getColonKeyword_1());
    }
(
(
		lv_m_2_0=RULE_VARIABLE
		{
			newLeafNode(lv_m_2_0, grammarAccess.getBinUnitTypeAccess().getMVARIABLETerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBinUnitTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"m",
        		lv_m_2_0, 
        		"VARIABLE");
	    }

)
)	otherlv_3='*' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBinUnitTypeAccess().getAsteriskKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinUnitTypeAccess().getTypeTypeParserRuleCall_4_0()); 
	    }
		lv_type_4_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinUnitTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFunType100
entryRuleFunType100 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunType100Rule()); }
	 iv_ruleFunType100=ruleFunType100 
	 { $current=$iv_ruleFunType100.current; } 
	 EOF 
;

// Rule FunType100
ruleFunType100 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunType100Access().getFunTypeListAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunType100Access().getLeftParenthesisKeyword_1());
    }
(	otherlv_2='...' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunType100Access().getFullStopFullStopFullStopKeyword_2_0());
    }

    |((
(
		{ 
	        newCompositeNode(grammarAccess.getFunType100Access().getItemsTopTypeParserRuleCall_2_1_0_0()); 
	    }
		lv_items_3_0=ruleTopType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunType100Rule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_3_0, 
        		"TopType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunType100Access().getCommaKeyword_2_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunType100Access().getItemsTopTypeParserRuleCall_2_1_1_1_0()); 
	    }
		lv_items_5_0=ruleTopType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunType100Rule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_5_0, 
        		"TopType");
	        afterParserOrEnumRuleCall();
	    }

)
))*))?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunType100Access().getRightParenthesisKeyword_3());
    }
	otherlv_7='->' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFunType100Access().getHyphenMinusGreaterThanSignKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunType100Access().getReturnTopTypeParserRuleCall_5_0()); 
	    }
		lv_return_8_0=ruleTopType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunType100Rule());
	        }
       		set(
       			$current, 
       			"return",
        		lv_return_8_0, 
        		"TopType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





RULE_ATOM : (RULE_ATOM_STARTER RULE_IN_WORD_CHAR*|'\'' ('\\' RULE_ESCAPE|~(('\\'|'\'')))* ('\''|EOF));

RULE_STRING : '"' ('\\' RULE_ESCAPE|~(('\\'|'"')))* ('"'|EOF);

RULE_VARIABLE : ('A'..'Z'|'_'|'\u00C0'..'\u00D6'|'\u00D8'..'\u00DE') RULE_IN_WORD_CHAR*;

fragment RULE_COMMENT : '%' ~(('\n'|'\r'))* ('\r'? '\n'|EOF);

RULE_SL_COMMENT : RULE_COMMENT+;

RULE_WS : ~(('!'..'~'|'\u00A1'..'\u00FF'))+;

RULE_BASED_INT : ('1'..'3')? '0'..'9' '#' ('0'..'9'|'a'..'z'|'A'..'Z')+;

RULE_INT : ('0'..'9')+;

RULE_EXT_INT : RULE_INT ('e'|'E') ('+'|'-')? RULE_INT;

RULE_CHAR : '$' ('\\' RULE_ESCAPE|.);

fragment RULE_IN_WORD_CHAR : ('a'..'z'|'A'..'Z'|'_'|'@'|'0'..'9'|'\u00DF'..'\u00F6'|'\u00F8'..'\u00FF'|'\u00C0'..'\u00D6'|'\u00D8'..'\u00DE');

fragment RULE_ATOM_STARTER : ('a'..'z'|'\u00DF'..'\u00F6'|'\u00F8'..'\u00FF');

fragment RULE_ESCAPE : ('b'|'d'|'e'|'f'|'n'|'r'|'s'|'t'|'v'|'0'..'7' ('0'..'7' ('0'..'7')?)?|('x'|'X') RULE_HEX_DIGIT RULE_HEX_DIGIT|('x'|'X') '{' RULE_HEX_DIGIT+ '}'|'^' ('a'..'z'|'A'..'Z'|']')|.);

fragment RULE_HEX_DIGIT : ('0'..'9'|'A'..'F'|'a'..'f');


