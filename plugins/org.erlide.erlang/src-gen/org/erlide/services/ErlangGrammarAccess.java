/*
 * generated by Xtext
 */
package org.erlide.services;

import java.util.List;

import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

import com.google.inject.Inject;
import com.google.inject.Singleton;

@Singleton
public class ErlangGrammarAccess extends AbstractGrammarElementFinder {

    public class ModuleElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "Module");
        private final Assignment cFormsAssignment = (Assignment) rule
                .eContents().get(1);
        private final RuleCall cFormsFormParserRuleCall_0 = (RuleCall) cFormsAssignment
                .eContents().get(0);

        // Module:
        // forms+=Form*;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // forms+=Form*
        public Assignment getFormsAssignment() {
            return cFormsAssignment;
        }

        // Form
        public RuleCall getFormsFormParserRuleCall_0() {
            return cFormsFormParserRuleCall_0;
        }
    }

    public class AtomRefTargetElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "AtomRefTarget");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final RuleCall cModuleParserRuleCall_0 = (RuleCall) cAlternatives
                .eContents().get(0);
        private final RuleCall cFunctionParserRuleCall_1 = (RuleCall) cAlternatives
                .eContents().get(1);
        private final RuleCall cRecordAttributeParserRuleCall_2 = (RuleCall) cAlternatives
                .eContents().get(2);
        private final RuleCall cRecordFieldDefParserRuleCall_3 = (RuleCall) cAlternatives
                .eContents().get(3);
        private final RuleCall cTypeAttributeParserRuleCall_4 = (RuleCall) cAlternatives
                .eContents().get(4);

        // // AtomRefTargets are the elements that an atom can refer to
        // AtomRefTarget:
        // Module | Function | RecordAttribute | RecordFieldDef | TypeAttribute;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // Module | Function | RecordAttribute | RecordFieldDef | TypeAttribute
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // Module
        public RuleCall getModuleParserRuleCall_0() {
            return cModuleParserRuleCall_0;
        }

        // Function
        public RuleCall getFunctionParserRuleCall_1() {
            return cFunctionParserRuleCall_1;
        }

        // RecordAttribute
        public RuleCall getRecordAttributeParserRuleCall_2() {
            return cRecordAttributeParserRuleCall_2;
        }

        // RecordFieldDef
        public RuleCall getRecordFieldDefParserRuleCall_3() {
            return cRecordFieldDefParserRuleCall_3;
        }

        // TypeAttribute
        public RuleCall getTypeAttributeParserRuleCall_4() {
            return cTypeAttributeParserRuleCall_4;
        }
    }

    public class FormElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "Form");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final RuleCall cAttributeParserRuleCall_0 = (RuleCall) cAlternatives
                .eContents().get(0);
        private final RuleCall cFunctionParserRuleCall_1 = (RuleCall) cAlternatives
                .eContents().get(1);
        private final RuleCall cConditionalFormBlockParserRuleCall_2 = (RuleCall) cAlternatives
                .eContents().get(2);
        private final Group cGroup_3 = (Group) cAlternatives.eContents().get(3);
        private final Action cMacroFormAction_3_0 = (Action) cGroup_3
                .eContents().get(0);
        private final Assignment cCallAssignment_3_1 = (Assignment) cGroup_3
                .eContents().get(1);
        private final RuleCall cCallMacroCallParserRuleCall_3_1_0 = (RuleCall) cCallAssignment_3_1
                .eContents().get(0);
        private final Keyword cFullStopKeyword_3_2 = (Keyword) cGroup_3
                .eContents().get(2);

        // Form:
        // Attribute | Function | ConditionalFormBlock | {MacroForm}
        // call=MacroCall ".";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // Attribute | Function | ConditionalFormBlock | {MacroForm}
        // call=MacroCall "."
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // Attribute
        public RuleCall getAttributeParserRuleCall_0() {
            return cAttributeParserRuleCall_0;
        }

        // Function
        public RuleCall getFunctionParserRuleCall_1() {
            return cFunctionParserRuleCall_1;
        }

        // ConditionalFormBlock
        public RuleCall getConditionalFormBlockParserRuleCall_2() {
            return cConditionalFormBlockParserRuleCall_2;
        }

        // {MacroForm} call=MacroCall "."
        public Group getGroup_3() {
            return cGroup_3;
        }

        // {MacroForm}
        public Action getMacroFormAction_3_0() {
            return cMacroFormAction_3_0;
        }

        // call=MacroCall
        public Assignment getCallAssignment_3_1() {
            return cCallAssignment_3_1;
        }

        // MacroCall
        public RuleCall getCallMacroCallParserRuleCall_3_1_0() {
            return cCallMacroCallParserRuleCall_3_1_0;
        }

        // "."
        public Keyword getFullStopKeyword_3_2() {
            return cFullStopKeyword_3_2;
        }
    }

    public class ConditionalFormBlockElements extends
            AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "ConditionalFormBlock");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cConditionAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final RuleCall cConditionIfdefAttributeParserRuleCall_0_0 = (RuleCall) cConditionAssignment_0
                .eContents().get(0);
        private final Assignment cIfFormsAssignment_1 = (Assignment) cGroup
                .eContents().get(1);
        private final RuleCall cIfFormsFormParserRuleCall_1_0 = (RuleCall) cIfFormsAssignment_1
                .eContents().get(0);
        private final Group cGroup_2 = (Group) cGroup.eContents().get(2);
        private final Assignment cHasElseAssignment_2_0 = (Assignment) cGroup_2
                .eContents().get(0);
        private final RuleCall cHasElseElseAttributeParserRuleCall_2_0_0 = (RuleCall) cHasElseAssignment_2_0
                .eContents().get(0);
        private final Assignment cElseFormsAssignment_2_1 = (Assignment) cGroup_2
                .eContents().get(1);
        private final RuleCall cElseFormsFormParserRuleCall_2_1_0 = (RuleCall) cElseFormsAssignment_2_1
                .eContents().get(0);
        private final Assignment cEndAssignment_3 = (Assignment) cGroup
                .eContents().get(3);
        private final RuleCall cEndEndifAttributeParserRuleCall_3_0 = (RuleCall) cEndAssignment_3
                .eContents().get(0);

        // ConditionalFormBlock:
        // condition=IfdefAttribute ifForms+=Form* (=> hasElse?=ElseAttribute
        // elseForms+=Form*)? end=EndifAttribute;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // condition=IfdefAttribute ifForms+=Form* (=> hasElse?=ElseAttribute
        // elseForms+=Form*)? end=EndifAttribute
        public Group getGroup() {
            return cGroup;
        }

        // condition=IfdefAttribute
        public Assignment getConditionAssignment_0() {
            return cConditionAssignment_0;
        }

        // IfdefAttribute
        public RuleCall getConditionIfdefAttributeParserRuleCall_0_0() {
            return cConditionIfdefAttributeParserRuleCall_0_0;
        }

        // ifForms+=Form*
        public Assignment getIfFormsAssignment_1() {
            return cIfFormsAssignment_1;
        }

        // Form
        public RuleCall getIfFormsFormParserRuleCall_1_0() {
            return cIfFormsFormParserRuleCall_1_0;
        }

        // (=> hasElse?=ElseAttribute elseForms+=Form*)?
        public Group getGroup_2() {
            return cGroup_2;
        }

        // => hasElse?=ElseAttribute
        public Assignment getHasElseAssignment_2_0() {
            return cHasElseAssignment_2_0;
        }

        // ElseAttribute
        public RuleCall getHasElseElseAttributeParserRuleCall_2_0_0() {
            return cHasElseElseAttributeParserRuleCall_2_0_0;
        }

        // elseForms+=Form*
        public Assignment getElseFormsAssignment_2_1() {
            return cElseFormsAssignment_2_1;
        }

        // Form
        public RuleCall getElseFormsFormParserRuleCall_2_1_0() {
            return cElseFormsFormParserRuleCall_2_1_0;
        }

        // end=EndifAttribute
        public Assignment getEndAssignment_3() {
            return cEndAssignment_3;
        }

        // EndifAttribute
        public RuleCall getEndEndifAttributeParserRuleCall_3_0() {
            return cEndEndifAttributeParserRuleCall_3_0;
        }
    }

    public class AttributeElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "Attribute");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Keyword cHyphenMinusKeyword_0 = (Keyword) cGroup
                .eContents().get(0);
        private final Alternatives cAlternatives_1 = (Alternatives) cGroup
                .eContents().get(1);
        private final RuleCall cModuleAttributeParserRuleCall_1_0 = (RuleCall) cAlternatives_1
                .eContents().get(0);
        private final RuleCall cEncodingAttributeParserRuleCall_1_1 = (RuleCall) cAlternatives_1
                .eContents().get(1);
        private final RuleCall cAbstractDefineAttributeParserRuleCall_1_2 = (RuleCall) cAlternatives_1
                .eContents().get(2);
        private final RuleCall cAbstractIncludeAttributeParserRuleCall_1_3 = (RuleCall) cAlternatives_1
                .eContents().get(3);
        private final RuleCall cFileAttributeParserRuleCall_1_4 = (RuleCall) cAlternatives_1
                .eContents().get(4);
        private final RuleCall cRecordAttributeParserRuleCall_1_5 = (RuleCall) cAlternatives_1
                .eContents().get(5);
        private final RuleCall cAbstractTypeAttributeParserRuleCall_1_6 = (RuleCall) cAlternatives_1
                .eContents().get(6);
        private final RuleCall cExportAttributeParserRuleCall_1_7 = (RuleCall) cAlternatives_1
                .eContents().get(7);
        private final RuleCall cImportAttributeParserRuleCall_1_8 = (RuleCall) cAlternatives_1
                .eContents().get(8);
        private final RuleCall cCompileAttributeParserRuleCall_1_9 = (RuleCall) cAlternatives_1
                .eContents().get(9);
        private final RuleCall cCustomAttributeParserRuleCall_1_10 = (RuleCall) cAlternatives_1
                .eContents().get(10);

        // // Attributes
        // Attribute:
        // "-" (ModuleAttribute | EncodingAttribute | AbstractDefineAttribute |
        // AbstractIncludeAttribute | FileAttribute |
        // RecordAttribute | AbstractTypeAttribute | ExportAttribute |
        // ImportAttribute | CompileAttribute | CustomAttribute);
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // "-" (ModuleAttribute | EncodingAttribute | AbstractDefineAttribute |
        // AbstractIncludeAttribute | FileAttribute |
        // RecordAttribute | AbstractTypeAttribute | ExportAttribute |
        // ImportAttribute | CompileAttribute | CustomAttribute)
        public Group getGroup() {
            return cGroup;
        }

        // "-"
        public Keyword getHyphenMinusKeyword_0() {
            return cHyphenMinusKeyword_0;
        }

        // ModuleAttribute | EncodingAttribute | AbstractDefineAttribute |
        // AbstractIncludeAttribute | FileAttribute |
        // RecordAttribute | AbstractTypeAttribute | ExportAttribute |
        // ImportAttribute | CompileAttribute | CustomAttribute
        public Alternatives getAlternatives_1() {
            return cAlternatives_1;
        }

        // ModuleAttribute
        public RuleCall getModuleAttributeParserRuleCall_1_0() {
            return cModuleAttributeParserRuleCall_1_0;
        }

        // EncodingAttribute
        public RuleCall getEncodingAttributeParserRuleCall_1_1() {
            return cEncodingAttributeParserRuleCall_1_1;
        }

        // AbstractDefineAttribute
        public RuleCall getAbstractDefineAttributeParserRuleCall_1_2() {
            return cAbstractDefineAttributeParserRuleCall_1_2;
        }

        // AbstractIncludeAttribute
        public RuleCall getAbstractIncludeAttributeParserRuleCall_1_3() {
            return cAbstractIncludeAttributeParserRuleCall_1_3;
        }

        // FileAttribute
        public RuleCall getFileAttributeParserRuleCall_1_4() {
            return cFileAttributeParserRuleCall_1_4;
        }

        // RecordAttribute
        public RuleCall getRecordAttributeParserRuleCall_1_5() {
            return cRecordAttributeParserRuleCall_1_5;
        }

        // AbstractTypeAttribute
        public RuleCall getAbstractTypeAttributeParserRuleCall_1_6() {
            return cAbstractTypeAttributeParserRuleCall_1_6;
        }

        // ExportAttribute
        public RuleCall getExportAttributeParserRuleCall_1_7() {
            return cExportAttributeParserRuleCall_1_7;
        }

        // ImportAttribute
        public RuleCall getImportAttributeParserRuleCall_1_8() {
            return cImportAttributeParserRuleCall_1_8;
        }

        // CompileAttribute
        public RuleCall getCompileAttributeParserRuleCall_1_9() {
            return cCompileAttributeParserRuleCall_1_9;
        }

        // CustomAttribute
        public RuleCall getCustomAttributeParserRuleCall_1_10() {
            return cCustomAttributeParserRuleCall_1_10;
        }
    }

    public class ConditionalAttributeElements extends
            AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "ConditionalAttribute");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final RuleCall cIfdefAttributeParserRuleCall_0 = (RuleCall) cAlternatives
                .eContents().get(0);
        private final RuleCall cElseAttributeParserRuleCall_1 = (RuleCall) cAlternatives
                .eContents().get(1);
        private final RuleCall cEndifAttributeParserRuleCall_2 = (RuleCall) cAlternatives
                .eContents().get(2);

        // ConditionalAttribute:
        // IfdefAttribute | ElseAttribute | EndifAttribute;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // IfdefAttribute | ElseAttribute | EndifAttribute
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // IfdefAttribute
        public RuleCall getIfdefAttributeParserRuleCall_0() {
            return cIfdefAttributeParserRuleCall_0;
        }

        // ElseAttribute
        public RuleCall getElseAttributeParserRuleCall_1() {
            return cElseAttributeParserRuleCall_1;
        }

        // EndifAttribute
        public RuleCall getEndifAttributeParserRuleCall_2() {
            return cEndifAttributeParserRuleCall_2;
        }
    }

    public class AbstractDefineAttributeElements extends
            AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "AbstractDefineAttribute");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final RuleCall cDefineAttributeParserRuleCall_0 = (RuleCall) cAlternatives
                .eContents().get(0);
        private final RuleCall cUndefAttributeParserRuleCall_1 = (RuleCall) cAlternatives
                .eContents().get(1);

        // AbstractDefineAttribute:
        // DefineAttribute | UndefAttribute;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // DefineAttribute | UndefAttribute
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // DefineAttribute
        public RuleCall getDefineAttributeParserRuleCall_0() {
            return cDefineAttributeParserRuleCall_0;
        }

        // UndefAttribute
        public RuleCall getUndefAttributeParserRuleCall_1() {
            return cUndefAttributeParserRuleCall_1;
        }
    }

    public class DefineAttributeElements extends
            AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "DefineAttribute");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cTagAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final Keyword cTagDefineKeyword_0_0 = (Keyword) cTagAssignment_0
                .eContents().get(0);
        private final Keyword cLeftParenthesisKeyword_1 = (Keyword) cGroup
                .eContents().get(1);
        private final Assignment cMacroNameAssignment_2 = (Assignment) cGroup
                .eContents().get(2);
        private final RuleCall cMacroNameNAMEVARParserRuleCall_2_0 = (RuleCall) cMacroNameAssignment_2
                .eContents().get(0);
        private final Group cGroup_3 = (Group) cGroup.eContents().get(3);
        private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword) cGroup_3
                .eContents().get(0);
        private final Group cGroup_3_1 = (Group) cGroup_3.eContents().get(1);
        private final Assignment cArgsAssignment_3_1_0 = (Assignment) cGroup_3_1
                .eContents().get(0);
        private final RuleCall cArgsPatternExpressionParserRuleCall_3_1_0_0 = (RuleCall) cArgsAssignment_3_1_0
                .eContents().get(0);
        private final Group cGroup_3_1_1 = (Group) cGroup_3_1.eContents()
                .get(1);
        private final Keyword cCommaKeyword_3_1_1_0 = (Keyword) cGroup_3_1_1
                .eContents().get(0);
        private final Assignment cArgsAssignment_3_1_1_1 = (Assignment) cGroup_3_1_1
                .eContents().get(1);
        private final RuleCall cArgsPatternExpressionParserRuleCall_3_1_1_1_0 = (RuleCall) cArgsAssignment_3_1_1_1
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_3_2 = (Keyword) cGroup_3
                .eContents().get(2);
        private final Group cGroup_4 = (Group) cGroup.eContents().get(4);
        private final Keyword cCommaKeyword_4_0 = (Keyword) cGroup_4
                .eContents().get(0);
        private final Assignment cValueAssignment_4_1 = (Assignment) cGroup_4
                .eContents().get(1);
        private final RuleCall cValueGuardParserRuleCall_4_1_0 = (RuleCall) cValueAssignment_4_1
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_5 = (Keyword) cGroup
                .eContents().get(5);
        private final Keyword cFullStopKeyword_6 = (Keyword) cGroup.eContents()
                .get(6);

        // DefineAttribute:
        // => tag="define" "(" macroName= // can't have feature 'name' because
        // multiple defines with the same macro can exist
        // NAMEVAR ("(" (args+=PatternExpression (","
        // args+=PatternExpression)*)? ")")? ("," value=Guard?)? ")" ".";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // => tag="define" "(" macroName= // can't have feature 'name' because
        // multiple defines with the same macro can exist
        // NAMEVAR ("(" (args+=PatternExpression (","
        // args+=PatternExpression)*)? ")")? ("," value=Guard?)? ")" "."
        public Group getGroup() {
            return cGroup;
        }

        // => tag="define"
        public Assignment getTagAssignment_0() {
            return cTagAssignment_0;
        }

        // "define"
        public Keyword getTagDefineKeyword_0_0() {
            return cTagDefineKeyword_0_0;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_1() {
            return cLeftParenthesisKeyword_1;
        }

        // macroName= // can't have feature 'name' because multiple defines with
        // the same macro can exist
        // NAMEVAR
        public Assignment getMacroNameAssignment_2() {
            return cMacroNameAssignment_2;
        }

        // // can't have feature 'name' because multiple defines with the same
        // macro can exist
        // NAMEVAR
        public RuleCall getMacroNameNAMEVARParserRuleCall_2_0() {
            return cMacroNameNAMEVARParserRuleCall_2_0;
        }

        // ("(" (args+=PatternExpression ("," args+=PatternExpression)*)? ")")?
        public Group getGroup_3() {
            return cGroup_3;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_3_0() {
            return cLeftParenthesisKeyword_3_0;
        }

        // (args+=PatternExpression ("," args+=PatternExpression)*)?
        public Group getGroup_3_1() {
            return cGroup_3_1;
        }

        // args+=PatternExpression
        public Assignment getArgsAssignment_3_1_0() {
            return cArgsAssignment_3_1_0;
        }

        // PatternExpression
        public RuleCall getArgsPatternExpressionParserRuleCall_3_1_0_0() {
            return cArgsPatternExpressionParserRuleCall_3_1_0_0;
        }

        // ("," args+=PatternExpression)*
        public Group getGroup_3_1_1() {
            return cGroup_3_1_1;
        }

        // ","
        public Keyword getCommaKeyword_3_1_1_0() {
            return cCommaKeyword_3_1_1_0;
        }

        // args+=PatternExpression
        public Assignment getArgsAssignment_3_1_1_1() {
            return cArgsAssignment_3_1_1_1;
        }

        // PatternExpression
        public RuleCall getArgsPatternExpressionParserRuleCall_3_1_1_1_0() {
            return cArgsPatternExpressionParserRuleCall_3_1_1_1_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_3_2() {
            return cRightParenthesisKeyword_3_2;
        }

        // ("," value=Guard?)?
        public Group getGroup_4() {
            return cGroup_4;
        }

        // ","
        public Keyword getCommaKeyword_4_0() {
            return cCommaKeyword_4_0;
        }

        // value=Guard?
        public Assignment getValueAssignment_4_1() {
            return cValueAssignment_4_1;
        }

        // Guard
        public RuleCall getValueGuardParserRuleCall_4_1_0() {
            return cValueGuardParserRuleCall_4_1_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_5() {
            return cRightParenthesisKeyword_5;
        }

        // "."
        public Keyword getFullStopKeyword_6() {
            return cFullStopKeyword_6;
        }
    }

    public class UndefAttributeElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "UndefAttribute");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cTagAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final Keyword cTagUndefKeyword_0_0 = (Keyword) cTagAssignment_0
                .eContents().get(0);
        private final Keyword cLeftParenthesisKeyword_1 = (Keyword) cGroup
                .eContents().get(1);
        private final Assignment cRefAssignment_2 = (Assignment) cGroup
                .eContents().get(2);
        private final RuleCall cRefMacroRefParserRuleCall_2_0 = (RuleCall) cRefAssignment_2
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_3 = (Keyword) cGroup
                .eContents().get(3);
        private final Keyword cFullStopKeyword_4 = (Keyword) cGroup.eContents()
                .get(4);

        // UndefAttribute:
        // => tag="undef" "(" ref=MacroRef ")" ".";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // => tag="undef" "(" ref=MacroRef ")" "."
        public Group getGroup() {
            return cGroup;
        }

        // => tag="undef"
        public Assignment getTagAssignment_0() {
            return cTagAssignment_0;
        }

        // "undef"
        public Keyword getTagUndefKeyword_0_0() {
            return cTagUndefKeyword_0_0;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_1() {
            return cLeftParenthesisKeyword_1;
        }

        // ref=MacroRef
        public Assignment getRefAssignment_2() {
            return cRefAssignment_2;
        }

        // MacroRef
        public RuleCall getRefMacroRefParserRuleCall_2_0() {
            return cRefMacroRefParserRuleCall_2_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_3() {
            return cRightParenthesisKeyword_3;
        }

        // "."
        public Keyword getFullStopKeyword_4() {
            return cFullStopKeyword_4;
        }
    }

    public class IfdefAttributeElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "IfdefAttribute");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Keyword cHyphenMinusKeyword_0 = (Keyword) cGroup
                .eContents().get(0);
        private final Assignment cTagAssignment_1 = (Assignment) cGroup
                .eContents().get(1);
        private final Alternatives cTagAlternatives_1_0 = (Alternatives) cTagAssignment_1
                .eContents().get(0);
        private final Keyword cTagIfdefKeyword_1_0_0 = (Keyword) cTagAlternatives_1_0
                .eContents().get(0);
        private final Keyword cTagIfndefKeyword_1_0_1 = (Keyword) cTagAlternatives_1_0
                .eContents().get(1);
        private final Keyword cLeftParenthesisKeyword_2 = (Keyword) cGroup
                .eContents().get(2);
        private final Assignment cRefAssignment_3 = (Assignment) cGroup
                .eContents().get(3);
        private final RuleCall cRefMacroRefParserRuleCall_3_0 = (RuleCall) cRefAssignment_3
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_4 = (Keyword) cGroup
                .eContents().get(4);
        private final Keyword cFullStopKeyword_5 = (Keyword) cGroup.eContents()
                .get(5);

        // IfdefAttribute:
        // "-" => tag=("ifdef" | "ifndef") "(" ref=MacroRef ")" ".";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // "-" => tag=("ifdef" | "ifndef") "(" ref=MacroRef ")" "."
        public Group getGroup() {
            return cGroup;
        }

        // "-"
        public Keyword getHyphenMinusKeyword_0() {
            return cHyphenMinusKeyword_0;
        }

        // => tag=("ifdef" | "ifndef")
        public Assignment getTagAssignment_1() {
            return cTagAssignment_1;
        }

        // "ifdef" | "ifndef"
        public Alternatives getTagAlternatives_1_0() {
            return cTagAlternatives_1_0;
        }

        // "ifdef"
        public Keyword getTagIfdefKeyword_1_0_0() {
            return cTagIfdefKeyword_1_0_0;
        }

        // "ifndef"
        public Keyword getTagIfndefKeyword_1_0_1() {
            return cTagIfndefKeyword_1_0_1;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_2() {
            return cLeftParenthesisKeyword_2;
        }

        // ref=MacroRef
        public Assignment getRefAssignment_3() {
            return cRefAssignment_3;
        }

        // MacroRef
        public RuleCall getRefMacroRefParserRuleCall_3_0() {
            return cRefMacroRefParserRuleCall_3_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_4() {
            return cRightParenthesisKeyword_4;
        }

        // "."
        public Keyword getFullStopKeyword_5() {
            return cFullStopKeyword_5;
        }
    }

    public class ElseAttributeElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "ElseAttribute");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Keyword cHyphenMinusKeyword_0 = (Keyword) cGroup
                .eContents().get(0);
        private final Assignment cTagAssignment_1 = (Assignment) cGroup
                .eContents().get(1);
        private final Keyword cTagElseKeyword_1_0 = (Keyword) cTagAssignment_1
                .eContents().get(0);
        private final Keyword cFullStopKeyword_2 = (Keyword) cGroup.eContents()
                .get(2);

        // ElseAttribute:
        // "-" => tag="else" ".";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // "-" => tag="else" "."
        public Group getGroup() {
            return cGroup;
        }

        // "-"
        public Keyword getHyphenMinusKeyword_0() {
            return cHyphenMinusKeyword_0;
        }

        // => tag="else"
        public Assignment getTagAssignment_1() {
            return cTagAssignment_1;
        }

        // "else"
        public Keyword getTagElseKeyword_1_0() {
            return cTagElseKeyword_1_0;
        }

        // "."
        public Keyword getFullStopKeyword_2() {
            return cFullStopKeyword_2;
        }
    }

    public class EndifAttributeElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "EndifAttribute");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Keyword cHyphenMinusKeyword_0 = (Keyword) cGroup
                .eContents().get(0);
        private final Assignment cTagAssignment_1 = (Assignment) cGroup
                .eContents().get(1);
        private final Keyword cTagEndifKeyword_1_0 = (Keyword) cTagAssignment_1
                .eContents().get(0);
        private final Keyword cFullStopKeyword_2 = (Keyword) cGroup.eContents()
                .get(2);

        // EndifAttribute:
        // "-" => tag="endif" ".";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // "-" => tag="endif" "."
        public Group getGroup() {
            return cGroup;
        }

        // "-"
        public Keyword getHyphenMinusKeyword_0() {
            return cHyphenMinusKeyword_0;
        }

        // => tag="endif"
        public Assignment getTagAssignment_1() {
            return cTagAssignment_1;
        }

        // "endif"
        public Keyword getTagEndifKeyword_1_0() {
            return cTagEndifKeyword_1_0;
        }

        // "."
        public Keyword getFullStopKeyword_2() {
            return cFullStopKeyword_2;
        }
    }

    public class AbstractIncludeAttributeElements extends
            AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "AbstractIncludeAttribute");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final RuleCall cIncludeAttributeParserRuleCall_0 = (RuleCall) cAlternatives
                .eContents().get(0);
        private final RuleCall cIncludeLibAttributeParserRuleCall_1 = (RuleCall) cAlternatives
                .eContents().get(1);

        // AbstractIncludeAttribute:
        // IncludeAttribute | IncludeLibAttribute;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // IncludeAttribute | IncludeLibAttribute
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // IncludeAttribute
        public RuleCall getIncludeAttributeParserRuleCall_0() {
            return cIncludeAttributeParserRuleCall_0;
        }

        // IncludeLibAttribute
        public RuleCall getIncludeLibAttributeParserRuleCall_1() {
            return cIncludeLibAttributeParserRuleCall_1;
        }
    }

    public class IncludeAttributeElements extends
            AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "IncludeAttribute");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cTagAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final Keyword cTagIncludeKeyword_0_0 = (Keyword) cTagAssignment_0
                .eContents().get(0);
        private final Keyword cLeftParenthesisKeyword_1 = (Keyword) cGroup
                .eContents().get(1);
        private final Assignment cImportURIAssignment_2 = (Assignment) cGroup
                .eContents().get(2);
        private final RuleCall cImportURISTRINGTerminalRuleCall_2_0 = (RuleCall) cImportURIAssignment_2
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_3 = (Keyword) cGroup
                .eContents().get(3);
        private final Keyword cFullStopKeyword_4 = (Keyword) cGroup.eContents()
                .get(4);

        // IncludeAttribute:
        // => tag="include" "(" importURI=STRING ")" ".";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // => tag="include" "(" importURI=STRING ")" "."
        public Group getGroup() {
            return cGroup;
        }

        // => tag="include"
        public Assignment getTagAssignment_0() {
            return cTagAssignment_0;
        }

        // "include"
        public Keyword getTagIncludeKeyword_0_0() {
            return cTagIncludeKeyword_0_0;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_1() {
            return cLeftParenthesisKeyword_1;
        }

        // importURI=STRING
        public Assignment getImportURIAssignment_2() {
            return cImportURIAssignment_2;
        }

        // STRING
        public RuleCall getImportURISTRINGTerminalRuleCall_2_0() {
            return cImportURISTRINGTerminalRuleCall_2_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_3() {
            return cRightParenthesisKeyword_3;
        }

        // "."
        public Keyword getFullStopKeyword_4() {
            return cFullStopKeyword_4;
        }
    }

    public class IncludeLibAttributeElements extends
            AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "IncludeLibAttribute");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cTagAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final Keyword cTagInclude_libKeyword_0_0 = (Keyword) cTagAssignment_0
                .eContents().get(0);
        private final Keyword cLeftParenthesisKeyword_1 = (Keyword) cGroup
                .eContents().get(1);
        private final Assignment cImportURIAssignment_2 = (Assignment) cGroup
                .eContents().get(2);
        private final RuleCall cImportURISTRINGTerminalRuleCall_2_0 = (RuleCall) cImportURIAssignment_2
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_3 = (Keyword) cGroup
                .eContents().get(3);
        private final Keyword cFullStopKeyword_4 = (Keyword) cGroup.eContents()
                .get(4);

        // IncludeLibAttribute:
        // => tag="include_lib" "(" importURI=STRING ")" ".";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // => tag="include_lib" "(" importURI=STRING ")" "."
        public Group getGroup() {
            return cGroup;
        }

        // => tag="include_lib"
        public Assignment getTagAssignment_0() {
            return cTagAssignment_0;
        }

        // "include_lib"
        public Keyword getTagInclude_libKeyword_0_0() {
            return cTagInclude_libKeyword_0_0;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_1() {
            return cLeftParenthesisKeyword_1;
        }

        // importURI=STRING
        public Assignment getImportURIAssignment_2() {
            return cImportURIAssignment_2;
        }

        // STRING
        public RuleCall getImportURISTRINGTerminalRuleCall_2_0() {
            return cImportURISTRINGTerminalRuleCall_2_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_3() {
            return cRightParenthesisKeyword_3;
        }

        // "."
        public Keyword getFullStopKeyword_4() {
            return cFullStopKeyword_4;
        }
    }

    public class FileAttributeElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "FileAttribute");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cTagAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final Keyword cTagFileKeyword_0_0 = (Keyword) cTagAssignment_0
                .eContents().get(0);
        private final Keyword cLeftParenthesisKeyword_1 = (Keyword) cGroup
                .eContents().get(1);
        private final Assignment cFileAssignment_2 = (Assignment) cGroup
                .eContents().get(2);
        private final RuleCall cFileSTRINGTerminalRuleCall_2_0 = (RuleCall) cFileAssignment_2
                .eContents().get(0);
        private final Keyword cCommaKeyword_3 = (Keyword) cGroup.eContents()
                .get(3);
        private final Assignment cLineAssignment_4 = (Assignment) cGroup
                .eContents().get(4);
        private final RuleCall cLineINTEGERParserRuleCall_4_0 = (RuleCall) cLineAssignment_4
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_5 = (Keyword) cGroup
                .eContents().get(5);
        private final Keyword cFullStopKeyword_6 = (Keyword) cGroup.eContents()
                .get(6);

        // FileAttribute:
        // => tag="file" "(" file=STRING "," line=INTEGER ")" ".";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // => tag="file" "(" file=STRING "," line=INTEGER ")" "."
        public Group getGroup() {
            return cGroup;
        }

        // => tag="file"
        public Assignment getTagAssignment_0() {
            return cTagAssignment_0;
        }

        // "file"
        public Keyword getTagFileKeyword_0_0() {
            return cTagFileKeyword_0_0;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_1() {
            return cLeftParenthesisKeyword_1;
        }

        // file=STRING
        public Assignment getFileAssignment_2() {
            return cFileAssignment_2;
        }

        // STRING
        public RuleCall getFileSTRINGTerminalRuleCall_2_0() {
            return cFileSTRINGTerminalRuleCall_2_0;
        }

        // ","
        public Keyword getCommaKeyword_3() {
            return cCommaKeyword_3;
        }

        // line=INTEGER
        public Assignment getLineAssignment_4() {
            return cLineAssignment_4;
        }

        // INTEGER
        public RuleCall getLineINTEGERParserRuleCall_4_0() {
            return cLineINTEGERParserRuleCall_4_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_5() {
            return cRightParenthesisKeyword_5;
        }

        // "."
        public Keyword getFullStopKeyword_6() {
            return cFullStopKeyword_6;
        }
    }

    public class ModuleAttributeElements extends
            AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "ModuleAttribute");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cTagAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final Keyword cTagModuleKeyword_0_0 = (Keyword) cTagAssignment_0
                .eContents().get(0);
        private final Keyword cLeftParenthesisKeyword_1 = (Keyword) cGroup
                .eContents().get(1);
        private final Assignment cModuleNameAssignment_2 = (Assignment) cGroup
                .eContents().get(2);
        private final RuleCall cModuleNameNAMEParserRuleCall_2_0 = (RuleCall) cModuleNameAssignment_2
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_3 = (Keyword) cGroup
                .eContents().get(3);
        private final Keyword cFullStopKeyword_4 = (Keyword) cGroup.eContents()
                .get(4);

        // ModuleAttribute:
        // => tag="module" "(" moduleName=NAME ")" ".";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // => tag="module" "(" moduleName=NAME ")" "."
        public Group getGroup() {
            return cGroup;
        }

        // => tag="module"
        public Assignment getTagAssignment_0() {
            return cTagAssignment_0;
        }

        // "module"
        public Keyword getTagModuleKeyword_0_0() {
            return cTagModuleKeyword_0_0;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_1() {
            return cLeftParenthesisKeyword_1;
        }

        // moduleName=NAME
        public Assignment getModuleNameAssignment_2() {
            return cModuleNameAssignment_2;
        }

        // NAME
        public RuleCall getModuleNameNAMEParserRuleCall_2_0() {
            return cModuleNameNAMEParserRuleCall_2_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_3() {
            return cRightParenthesisKeyword_3;
        }

        // "."
        public Keyword getFullStopKeyword_4() {
            return cFullStopKeyword_4;
        }
    }

    public class EncodingAttributeElements extends
            AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "EncodingAttribute");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cTagAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final Keyword cTagEncodingKeyword_0_0 = (Keyword) cTagAssignment_0
                .eContents().get(0);
        private final Alternatives cAlternatives_1 = (Alternatives) cGroup
                .eContents().get(1);
        private final Group cGroup_1_0 = (Group) cAlternatives_1.eContents()
                .get(0);
        private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword) cGroup_1_0
                .eContents().get(0);
        private final Assignment cCharsetAssignment_1_0_1 = (Assignment) cGroup_1_0
                .eContents().get(1);
        private final RuleCall cCharsetNAMEParserRuleCall_1_0_1_0 = (RuleCall) cCharsetAssignment_1_0_1
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword) cGroup_1_0
                .eContents().get(2);
        private final Assignment cCharsetAssignment_1_1 = (Assignment) cAlternatives_1
                .eContents().get(1);
        private final RuleCall cCharsetNAMEParserRuleCall_1_1_0 = (RuleCall) cCharsetAssignment_1_1
                .eContents().get(0);
        private final Keyword cFullStopKeyword_2 = (Keyword) cGroup.eContents()
                .get(2);

        // EncodingAttribute:
        // => tag="encoding" ("(" charset=NAME ")" | charset=NAME) ".";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // => tag="encoding" ("(" charset=NAME ")" | charset=NAME) "."
        public Group getGroup() {
            return cGroup;
        }

        // => tag="encoding"
        public Assignment getTagAssignment_0() {
            return cTagAssignment_0;
        }

        // "encoding"
        public Keyword getTagEncodingKeyword_0_0() {
            return cTagEncodingKeyword_0_0;
        }

        // "(" charset=NAME ")" | charset=NAME
        public Alternatives getAlternatives_1() {
            return cAlternatives_1;
        }

        // "(" charset=NAME ")"
        public Group getGroup_1_0() {
            return cGroup_1_0;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_1_0_0() {
            return cLeftParenthesisKeyword_1_0_0;
        }

        // charset=NAME
        public Assignment getCharsetAssignment_1_0_1() {
            return cCharsetAssignment_1_0_1;
        }

        // NAME
        public RuleCall getCharsetNAMEParserRuleCall_1_0_1_0() {
            return cCharsetNAMEParserRuleCall_1_0_1_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_1_0_2() {
            return cRightParenthesisKeyword_1_0_2;
        }

        // charset=NAME
        public Assignment getCharsetAssignment_1_1() {
            return cCharsetAssignment_1_1;
        }

        // NAME
        public RuleCall getCharsetNAMEParserRuleCall_1_1_0() {
            return cCharsetNAMEParserRuleCall_1_1_0;
        }

        // "."
        public Keyword getFullStopKeyword_2() {
            return cFullStopKeyword_2;
        }
    }

    public class RecordAttributeElements extends
            AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "RecordAttribute");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cTagAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final Keyword cTagRecordKeyword_0_0 = (Keyword) cTagAssignment_0
                .eContents().get(0);
        private final Keyword cLeftParenthesisKeyword_1 = (Keyword) cGroup
                .eContents().get(1);
        private final Assignment cNameAssignment_2 = (Assignment) cGroup
                .eContents().get(2);
        private final RuleCall cNameNAMEMACROParserRuleCall_2_0 = (RuleCall) cNameAssignment_2
                .eContents().get(0);
        private final Keyword cCommaKeyword_3 = (Keyword) cGroup.eContents()
                .get(3);
        private final Alternatives cAlternatives_4 = (Alternatives) cGroup
                .eContents().get(4);
        private final Group cGroup_4_0 = (Group) cAlternatives_4.eContents()
                .get(0);
        private final Keyword cLeftCurlyBracketKeyword_4_0_0 = (Keyword) cGroup_4_0
                .eContents().get(0);
        private final Group cGroup_4_0_1 = (Group) cGroup_4_0.eContents()
                .get(1);
        private final Assignment cFieldsAssignment_4_0_1_0 = (Assignment) cGroup_4_0_1
                .eContents().get(0);
        private final RuleCall cFieldsRecordFieldDefParserRuleCall_4_0_1_0_0 = (RuleCall) cFieldsAssignment_4_0_1_0
                .eContents().get(0);
        private final Group cGroup_4_0_1_1 = (Group) cGroup_4_0_1.eContents()
                .get(1);
        private final Keyword cCommaKeyword_4_0_1_1_0 = (Keyword) cGroup_4_0_1_1
                .eContents().get(0);
        private final Assignment cFieldsAssignment_4_0_1_1_1 = (Assignment) cGroup_4_0_1_1
                .eContents().get(1);
        private final RuleCall cFieldsRecordFieldDefParserRuleCall_4_0_1_1_1_0 = (RuleCall) cFieldsAssignment_4_0_1_1_1
                .eContents().get(0);
        private final Keyword cRightCurlyBracketKeyword_4_0_2 = (Keyword) cGroup_4_0
                .eContents().get(2);
        private final Assignment cRecordMacroAssignment_4_1 = (Assignment) cAlternatives_4
                .eContents().get(1);
        private final RuleCall cRecordMacroMacroCallParserRuleCall_4_1_0 = (RuleCall) cRecordMacroAssignment_4_1
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_5 = (Keyword) cGroup
                .eContents().get(5);
        private final Keyword cFullStopKeyword_6 = (Keyword) cGroup.eContents()
                .get(6);

        // RecordAttribute:
        // => tag="record" "(" name=NAMEMACRO "," ("{" (fields+=RecordFieldDef
        // ("," fields+=RecordFieldDef)*)? "}" |
        // recordMacro=MacroCall) ")" ".";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // => tag="record" "(" name=NAMEMACRO "," ("{" (fields+=RecordFieldDef
        // ("," fields+=RecordFieldDef)*)? "}" |
        // recordMacro=MacroCall) ")" "."
        public Group getGroup() {
            return cGroup;
        }

        // => tag="record"
        public Assignment getTagAssignment_0() {
            return cTagAssignment_0;
        }

        // "record"
        public Keyword getTagRecordKeyword_0_0() {
            return cTagRecordKeyword_0_0;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_1() {
            return cLeftParenthesisKeyword_1;
        }

        // name=NAMEMACRO
        public Assignment getNameAssignment_2() {
            return cNameAssignment_2;
        }

        // NAMEMACRO
        public RuleCall getNameNAMEMACROParserRuleCall_2_0() {
            return cNameNAMEMACROParserRuleCall_2_0;
        }

        // ","
        public Keyword getCommaKeyword_3() {
            return cCommaKeyword_3;
        }

        // "{" (fields+=RecordFieldDef ("," fields+=RecordFieldDef)*)? "}" |
        // recordMacro=MacroCall
        public Alternatives getAlternatives_4() {
            return cAlternatives_4;
        }

        // "{" (fields+=RecordFieldDef ("," fields+=RecordFieldDef)*)? "}"
        public Group getGroup_4_0() {
            return cGroup_4_0;
        }

        // "{"
        public Keyword getLeftCurlyBracketKeyword_4_0_0() {
            return cLeftCurlyBracketKeyword_4_0_0;
        }

        // (fields+=RecordFieldDef ("," fields+=RecordFieldDef)*)?
        public Group getGroup_4_0_1() {
            return cGroup_4_0_1;
        }

        // fields+=RecordFieldDef
        public Assignment getFieldsAssignment_4_0_1_0() {
            return cFieldsAssignment_4_0_1_0;
        }

        // RecordFieldDef
        public RuleCall getFieldsRecordFieldDefParserRuleCall_4_0_1_0_0() {
            return cFieldsRecordFieldDefParserRuleCall_4_0_1_0_0;
        }

        // ("," fields+=RecordFieldDef)*
        public Group getGroup_4_0_1_1() {
            return cGroup_4_0_1_1;
        }

        // ","
        public Keyword getCommaKeyword_4_0_1_1_0() {
            return cCommaKeyword_4_0_1_1_0;
        }

        // fields+=RecordFieldDef
        public Assignment getFieldsAssignment_4_0_1_1_1() {
            return cFieldsAssignment_4_0_1_1_1;
        }

        // RecordFieldDef
        public RuleCall getFieldsRecordFieldDefParserRuleCall_4_0_1_1_1_0() {
            return cFieldsRecordFieldDefParserRuleCall_4_0_1_1_1_0;
        }

        // "}"
        public Keyword getRightCurlyBracketKeyword_4_0_2() {
            return cRightCurlyBracketKeyword_4_0_2;
        }

        // recordMacro=MacroCall
        public Assignment getRecordMacroAssignment_4_1() {
            return cRecordMacroAssignment_4_1;
        }

        // MacroCall
        public RuleCall getRecordMacroMacroCallParserRuleCall_4_1_0() {
            return cRecordMacroMacroCallParserRuleCall_4_1_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_5() {
            return cRightParenthesisKeyword_5;
        }

        // "."
        public Keyword getFullStopKeyword_6() {
            return cFullStopKeyword_6;
        }
    }

    public class RecordFieldDefElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "RecordFieldDef");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cNameAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final RuleCall cNameNAMEVARParserRuleCall_0_0 = (RuleCall) cNameAssignment_0
                .eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Keyword cEqualsSignKeyword_1_0 = (Keyword) cGroup_1
                .eContents().get(0);
        private final Assignment cValueAssignment_1_1 = (Assignment) cGroup_1
                .eContents().get(1);
        private final RuleCall cValueExpressionParserRuleCall_1_1_0 = (RuleCall) cValueAssignment_1_1
                .eContents().get(0);
        private final Group cGroup_2 = (Group) cGroup.eContents().get(2);
        private final Keyword cColonColonKeyword_2_0 = (Keyword) cGroup_2
                .eContents().get(0);
        private final Assignment cTypeAssignment_2_1 = (Assignment) cGroup_2
                .eContents().get(1);
        private final RuleCall cTypeTopTypeParserRuleCall_2_1_0 = (RuleCall) cTypeAssignment_2_1
                .eContents().get(0);

        // RecordFieldDef:
        // name=NAMEVAR ("=" value=Expression)? ("::" type=TopType)?;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // name=NAMEVAR ("=" value=Expression)? ("::" type=TopType)?
        public Group getGroup() {
            return cGroup;
        }

        // name=NAMEVAR
        public Assignment getNameAssignment_0() {
            return cNameAssignment_0;
        }

        // NAMEVAR
        public RuleCall getNameNAMEVARParserRuleCall_0_0() {
            return cNameNAMEVARParserRuleCall_0_0;
        }

        // ("=" value=Expression)?
        public Group getGroup_1() {
            return cGroup_1;
        }

        // "="
        public Keyword getEqualsSignKeyword_1_0() {
            return cEqualsSignKeyword_1_0;
        }

        // value=Expression
        public Assignment getValueAssignment_1_1() {
            return cValueAssignment_1_1;
        }

        // Expression
        public RuleCall getValueExpressionParserRuleCall_1_1_0() {
            return cValueExpressionParserRuleCall_1_1_0;
        }

        // ("::" type=TopType)?
        public Group getGroup_2() {
            return cGroup_2;
        }

        // "::"
        public Keyword getColonColonKeyword_2_0() {
            return cColonColonKeyword_2_0;
        }

        // type=TopType
        public Assignment getTypeAssignment_2_1() {
            return cTypeAssignment_2_1;
        }

        // TopType
        public RuleCall getTypeTopTypeParserRuleCall_2_1_0() {
            return cTypeTopTypeParserRuleCall_2_1_0;
        }
    }

    public class ExportAttributeElements extends
            AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "ExportAttribute");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cTagAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final Keyword cTagExportKeyword_0_0 = (Keyword) cTagAssignment_0
                .eContents().get(0);
        private final Keyword cLeftParenthesisKeyword_1 = (Keyword) cGroup
                .eContents().get(1);
        private final Keyword cLeftSquareBracketKeyword_2 = (Keyword) cGroup
                .eContents().get(2);
        private final Group cGroup_3 = (Group) cGroup.eContents().get(3);
        private final Assignment cFunsAssignment_3_0 = (Assignment) cGroup_3
                .eContents().get(0);
        private final RuleCall cFunsFunRefParserRuleCall_3_0_0 = (RuleCall) cFunsAssignment_3_0
                .eContents().get(0);
        private final Group cGroup_3_1 = (Group) cGroup_3.eContents().get(1);
        private final Keyword cCommaKeyword_3_1_0 = (Keyword) cGroup_3_1
                .eContents().get(0);
        private final Assignment cFunsAssignment_3_1_1 = (Assignment) cGroup_3_1
                .eContents().get(1);
        private final RuleCall cFunsFunRefParserRuleCall_3_1_1_0 = (RuleCall) cFunsAssignment_3_1_1
                .eContents().get(0);
        private final Keyword cRightSquareBracketKeyword_4 = (Keyword) cGroup
                .eContents().get(4);
        private final Keyword cRightParenthesisKeyword_5 = (Keyword) cGroup
                .eContents().get(5);
        private final Keyword cFullStopKeyword_6 = (Keyword) cGroup.eContents()
                .get(6);

        // ExportAttribute:
        // => tag="export" "(" "[" (funs+=FunRef ("," funs+=FunRef)*)? "]" ")"
        // ".";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // => tag="export" "(" "[" (funs+=FunRef ("," funs+=FunRef)*)? "]" ")"
        // "."
        public Group getGroup() {
            return cGroup;
        }

        // => tag="export"
        public Assignment getTagAssignment_0() {
            return cTagAssignment_0;
        }

        // "export"
        public Keyword getTagExportKeyword_0_0() {
            return cTagExportKeyword_0_0;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_1() {
            return cLeftParenthesisKeyword_1;
        }

        // "["
        public Keyword getLeftSquareBracketKeyword_2() {
            return cLeftSquareBracketKeyword_2;
        }

        // (funs+=FunRef ("," funs+=FunRef)*)?
        public Group getGroup_3() {
            return cGroup_3;
        }

        // funs+=FunRef
        public Assignment getFunsAssignment_3_0() {
            return cFunsAssignment_3_0;
        }

        // FunRef
        public RuleCall getFunsFunRefParserRuleCall_3_0_0() {
            return cFunsFunRefParserRuleCall_3_0_0;
        }

        // ("," funs+=FunRef)*
        public Group getGroup_3_1() {
            return cGroup_3_1;
        }

        // ","
        public Keyword getCommaKeyword_3_1_0() {
            return cCommaKeyword_3_1_0;
        }

        // funs+=FunRef
        public Assignment getFunsAssignment_3_1_1() {
            return cFunsAssignment_3_1_1;
        }

        // FunRef
        public RuleCall getFunsFunRefParserRuleCall_3_1_1_0() {
            return cFunsFunRefParserRuleCall_3_1_1_0;
        }

        // "]"
        public Keyword getRightSquareBracketKeyword_4() {
            return cRightSquareBracketKeyword_4;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_5() {
            return cRightParenthesisKeyword_5;
        }

        // "."
        public Keyword getFullStopKeyword_6() {
            return cFullStopKeyword_6;
        }
    }

    public class ImportAttributeElements extends
            AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "ImportAttribute");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cTagAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final Keyword cTagImportKeyword_0_0 = (Keyword) cTagAssignment_0
                .eContents().get(0);
        private final Keyword cLeftParenthesisKeyword_1 = (Keyword) cGroup
                .eContents().get(1);
        private final Assignment cModuleAssignment_2 = (Assignment) cGroup
                .eContents().get(2);
        private final RuleCall cModuleModuleVarMacroParserRuleCall_2_0 = (RuleCall) cModuleAssignment_2
                .eContents().get(0);
        private final Keyword cCommaKeyword_3 = (Keyword) cGroup.eContents()
                .get(3);
        private final Keyword cLeftSquareBracketKeyword_4 = (Keyword) cGroup
                .eContents().get(4);
        private final Group cGroup_5 = (Group) cGroup.eContents().get(5);
        private final Assignment cFunsAssignment_5_0 = (Assignment) cGroup_5
                .eContents().get(0);
        private final RuleCall cFunsFunRefParserRuleCall_5_0_0 = (RuleCall) cFunsAssignment_5_0
                .eContents().get(0);
        private final Group cGroup_5_1 = (Group) cGroup_5.eContents().get(1);
        private final Keyword cCommaKeyword_5_1_0 = (Keyword) cGroup_5_1
                .eContents().get(0);
        private final Assignment cFunsAssignment_5_1_1 = (Assignment) cGroup_5_1
                .eContents().get(1);
        private final RuleCall cFunsFunRefParserRuleCall_5_1_1_0 = (RuleCall) cFunsAssignment_5_1_1
                .eContents().get(0);
        private final Keyword cRightSquareBracketKeyword_6 = (Keyword) cGroup
                .eContents().get(6);
        private final Keyword cRightParenthesisKeyword_7 = (Keyword) cGroup
                .eContents().get(7);
        private final Keyword cFullStopKeyword_8 = (Keyword) cGroup.eContents()
                .get(8);

        // ImportAttribute:
        // => tag="import" "(" module=ModuleVarMacro "," "[" (funs+=FunRef (","
        // funs+=FunRef)*)? "]" ")" ".";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // => tag="import" "(" module=ModuleVarMacro "," "[" (funs+=FunRef (","
        // funs+=FunRef)*)? "]" ")" "."
        public Group getGroup() {
            return cGroup;
        }

        // => tag="import"
        public Assignment getTagAssignment_0() {
            return cTagAssignment_0;
        }

        // "import"
        public Keyword getTagImportKeyword_0_0() {
            return cTagImportKeyword_0_0;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_1() {
            return cLeftParenthesisKeyword_1;
        }

        // module=ModuleVarMacro
        public Assignment getModuleAssignment_2() {
            return cModuleAssignment_2;
        }

        // ModuleVarMacro
        public RuleCall getModuleModuleVarMacroParserRuleCall_2_0() {
            return cModuleModuleVarMacroParserRuleCall_2_0;
        }

        // ","
        public Keyword getCommaKeyword_3() {
            return cCommaKeyword_3;
        }

        // "["
        public Keyword getLeftSquareBracketKeyword_4() {
            return cLeftSquareBracketKeyword_4;
        }

        // (funs+=FunRef ("," funs+=FunRef)*)?
        public Group getGroup_5() {
            return cGroup_5;
        }

        // funs+=FunRef
        public Assignment getFunsAssignment_5_0() {
            return cFunsAssignment_5_0;
        }

        // FunRef
        public RuleCall getFunsFunRefParserRuleCall_5_0_0() {
            return cFunsFunRefParserRuleCall_5_0_0;
        }

        // ("," funs+=FunRef)*
        public Group getGroup_5_1() {
            return cGroup_5_1;
        }

        // ","
        public Keyword getCommaKeyword_5_1_0() {
            return cCommaKeyword_5_1_0;
        }

        // funs+=FunRef
        public Assignment getFunsAssignment_5_1_1() {
            return cFunsAssignment_5_1_1;
        }

        // FunRef
        public RuleCall getFunsFunRefParserRuleCall_5_1_1_0() {
            return cFunsFunRefParserRuleCall_5_1_1_0;
        }

        // "]"
        public Keyword getRightSquareBracketKeyword_6() {
            return cRightSquareBracketKeyword_6;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_7() {
            return cRightParenthesisKeyword_7;
        }

        // "."
        public Keyword getFullStopKeyword_8() {
            return cFullStopKeyword_8;
        }
    }

    public class CompileAttributeElements extends
            AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "CompileAttribute");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cTagAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final Keyword cTagCompileKeyword_0_0 = (Keyword) cTagAssignment_0
                .eContents().get(0);
        private final Keyword cLeftParenthesisKeyword_1 = (Keyword) cGroup
                .eContents().get(1);
        private final Assignment cOptionsAssignment_2 = (Assignment) cGroup
                .eContents().get(2);
        private final RuleCall cOptionsExpressionParserRuleCall_2_0 = (RuleCall) cOptionsAssignment_2
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_3 = (Keyword) cGroup
                .eContents().get(3);
        private final Keyword cFullStopKeyword_4 = (Keyword) cGroup.eContents()
                .get(4);

        // CompileAttribute:
        // => tag="compile" "(" options=Expression ")" ".";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // => tag="compile" "(" options=Expression ")" "."
        public Group getGroup() {
            return cGroup;
        }

        // => tag="compile"
        public Assignment getTagAssignment_0() {
            return cTagAssignment_0;
        }

        // "compile"
        public Keyword getTagCompileKeyword_0_0() {
            return cTagCompileKeyword_0_0;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_1() {
            return cLeftParenthesisKeyword_1;
        }

        // options=Expression
        public Assignment getOptionsAssignment_2() {
            return cOptionsAssignment_2;
        }

        // Expression
        public RuleCall getOptionsExpressionParserRuleCall_2_0() {
            return cOptionsExpressionParserRuleCall_2_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_3() {
            return cRightParenthesisKeyword_3;
        }

        // "."
        public Keyword getFullStopKeyword_4() {
            return cFullStopKeyword_4;
        }
    }

    public class AbstractTypeAttributeElements extends
            AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "AbstractTypeAttribute");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final RuleCall cSpecAttributeParserRuleCall_0 = (RuleCall) cAlternatives
                .eContents().get(0);
        private final RuleCall cTypeAttributeParserRuleCall_1 = (RuleCall) cAlternatives
                .eContents().get(1);

        // AbstractTypeAttribute:
        // SpecAttribute | TypeAttribute;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // SpecAttribute | TypeAttribute
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // SpecAttribute
        public RuleCall getSpecAttributeParserRuleCall_0() {
            return cSpecAttributeParserRuleCall_0;
        }

        // TypeAttribute
        public RuleCall getTypeAttributeParserRuleCall_1() {
            return cTypeAttributeParserRuleCall_1;
        }
    }

    public class SpecAttributeElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "SpecAttribute");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cTagAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final Alternatives cTagAlternatives_0_0 = (Alternatives) cTagAssignment_0
                .eContents().get(0);
        private final Keyword cTagSpecKeyword_0_0_0 = (Keyword) cTagAlternatives_0_0
                .eContents().get(0);
        private final Keyword cTagCallbackKeyword_0_0_1 = (Keyword) cTagAlternatives_0_0
                .eContents().get(1);
        private final Alternatives cAlternatives_1 = (Alternatives) cGroup
                .eContents().get(1);
        private final Group cGroup_1_0 = (Group) cAlternatives_1.eContents()
                .get(0);
        private final Assignment cRefAssignment_1_0_0 = (Assignment) cGroup_1_0
                .eContents().get(0);
        private final RuleCall cRefSpecFunParserRuleCall_1_0_0_0 = (RuleCall) cRefAssignment_1_0_0
                .eContents().get(0);
        private final Assignment cSignaturesAssignment_1_0_1 = (Assignment) cGroup_1_0
                .eContents().get(1);
        private final RuleCall cSignaturesTypeSigParserRuleCall_1_0_1_0 = (RuleCall) cSignaturesAssignment_1_0_1
                .eContents().get(0);
        private final Group cGroup_1_0_2 = (Group) cGroup_1_0.eContents()
                .get(2);
        private final Keyword cSemicolonKeyword_1_0_2_0 = (Keyword) cGroup_1_0_2
                .eContents().get(0);
        private final Assignment cSignaturesAssignment_1_0_2_1 = (Assignment) cGroup_1_0_2
                .eContents().get(1);
        private final RuleCall cSignaturesTypeSigParserRuleCall_1_0_2_1_0 = (RuleCall) cSignaturesAssignment_1_0_2_1
                .eContents().get(0);
        private final Group cGroup_1_1 = (Group) cAlternatives_1.eContents()
                .get(1);
        private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword) cGroup_1_1
                .eContents().get(0);
        private final Assignment cRefAssignment_1_1_1 = (Assignment) cGroup_1_1
                .eContents().get(1);
        private final RuleCall cRefSpecFunParserRuleCall_1_1_1_0 = (RuleCall) cRefAssignment_1_1_1
                .eContents().get(0);
        private final Assignment cSignaturesAssignment_1_1_2 = (Assignment) cGroup_1_1
                .eContents().get(2);
        private final RuleCall cSignaturesTypeSigParserRuleCall_1_1_2_0 = (RuleCall) cSignaturesAssignment_1_1_2
                .eContents().get(0);
        private final Group cGroup_1_1_3 = (Group) cGroup_1_1.eContents()
                .get(3);
        private final Keyword cSemicolonKeyword_1_1_3_0 = (Keyword) cGroup_1_1_3
                .eContents().get(0);
        private final Assignment cSignaturesAssignment_1_1_3_1 = (Assignment) cGroup_1_1_3
                .eContents().get(1);
        private final RuleCall cSignaturesTypeSigParserRuleCall_1_1_3_1_0 = (RuleCall) cSignaturesAssignment_1_1_3_1
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_1_1_4 = (Keyword) cGroup_1_1
                .eContents().get(4);
        private final Keyword cFullStopKeyword_2 = (Keyword) cGroup.eContents()
                .get(2);

        // SpecAttribute:
        // => tag=("spec" | "callback") (ref=SpecFun signatures+=TypeSig (";"
        // signatures+=TypeSig)* | "(" ref=SpecFun
        // signatures+=TypeSig (";" signatures+=TypeSig)* ")") ".";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // => tag=("spec" | "callback") (ref=SpecFun signatures+=TypeSig (";"
        // signatures+=TypeSig)* | "(" ref=SpecFun
        // signatures+=TypeSig (";" signatures+=TypeSig)* ")") "."
        public Group getGroup() {
            return cGroup;
        }

        // => tag=("spec" | "callback")
        public Assignment getTagAssignment_0() {
            return cTagAssignment_0;
        }

        // "spec" | "callback"
        public Alternatives getTagAlternatives_0_0() {
            return cTagAlternatives_0_0;
        }

        // "spec"
        public Keyword getTagSpecKeyword_0_0_0() {
            return cTagSpecKeyword_0_0_0;
        }

        // "callback"
        public Keyword getTagCallbackKeyword_0_0_1() {
            return cTagCallbackKeyword_0_0_1;
        }

        // ref=SpecFun signatures+=TypeSig (";" signatures+=TypeSig)* | "("
        // ref=SpecFun signatures+=TypeSig (";"
        // signatures+=TypeSig)* ")"
        public Alternatives getAlternatives_1() {
            return cAlternatives_1;
        }

        // ref=SpecFun signatures+=TypeSig (";" signatures+=TypeSig)*
        public Group getGroup_1_0() {
            return cGroup_1_0;
        }

        // ref=SpecFun
        public Assignment getRefAssignment_1_0_0() {
            return cRefAssignment_1_0_0;
        }

        // SpecFun
        public RuleCall getRefSpecFunParserRuleCall_1_0_0_0() {
            return cRefSpecFunParserRuleCall_1_0_0_0;
        }

        // signatures+=TypeSig
        public Assignment getSignaturesAssignment_1_0_1() {
            return cSignaturesAssignment_1_0_1;
        }

        // TypeSig
        public RuleCall getSignaturesTypeSigParserRuleCall_1_0_1_0() {
            return cSignaturesTypeSigParserRuleCall_1_0_1_0;
        }

        // (";" signatures+=TypeSig)*
        public Group getGroup_1_0_2() {
            return cGroup_1_0_2;
        }

        // ";"
        public Keyword getSemicolonKeyword_1_0_2_0() {
            return cSemicolonKeyword_1_0_2_0;
        }

        // signatures+=TypeSig
        public Assignment getSignaturesAssignment_1_0_2_1() {
            return cSignaturesAssignment_1_0_2_1;
        }

        // TypeSig
        public RuleCall getSignaturesTypeSigParserRuleCall_1_0_2_1_0() {
            return cSignaturesTypeSigParserRuleCall_1_0_2_1_0;
        }

        // "(" ref=SpecFun signatures+=TypeSig (";" signatures+=TypeSig)* ")"
        public Group getGroup_1_1() {
            return cGroup_1_1;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_1_1_0() {
            return cLeftParenthesisKeyword_1_1_0;
        }

        // ref=SpecFun
        public Assignment getRefAssignment_1_1_1() {
            return cRefAssignment_1_1_1;
        }

        // SpecFun
        public RuleCall getRefSpecFunParserRuleCall_1_1_1_0() {
            return cRefSpecFunParserRuleCall_1_1_1_0;
        }

        // signatures+=TypeSig
        public Assignment getSignaturesAssignment_1_1_2() {
            return cSignaturesAssignment_1_1_2;
        }

        // TypeSig
        public RuleCall getSignaturesTypeSigParserRuleCall_1_1_2_0() {
            return cSignaturesTypeSigParserRuleCall_1_1_2_0;
        }

        // (";" signatures+=TypeSig)*
        public Group getGroup_1_1_3() {
            return cGroup_1_1_3;
        }

        // ";"
        public Keyword getSemicolonKeyword_1_1_3_0() {
            return cSemicolonKeyword_1_1_3_0;
        }

        // signatures+=TypeSig
        public Assignment getSignaturesAssignment_1_1_3_1() {
            return cSignaturesAssignment_1_1_3_1;
        }

        // TypeSig
        public RuleCall getSignaturesTypeSigParserRuleCall_1_1_3_1_0() {
            return cSignaturesTypeSigParserRuleCall_1_1_3_1_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_1_1_4() {
            return cRightParenthesisKeyword_1_1_4;
        }

        // "."
        public Keyword getFullStopKeyword_2() {
            return cFullStopKeyword_2;
        }
    }

    public class TypeAttributeElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "TypeAttribute");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cTagAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final Alternatives cTagAlternatives_0_0 = (Alternatives) cTagAssignment_0
                .eContents().get(0);
        private final Keyword cTagTypeKeyword_0_0_0 = (Keyword) cTagAlternatives_0_0
                .eContents().get(0);
        private final Keyword cTagOpaqueKeyword_0_0_1 = (Keyword) cTagAlternatives_0_0
                .eContents().get(1);
        private final Alternatives cAlternatives_1 = (Alternatives) cGroup
                .eContents().get(1);
        private final Group cGroup_1_0 = (Group) cAlternatives_1.eContents()
                .get(0);
        private final Assignment cNameAssignment_1_0_0 = (Assignment) cGroup_1_0
                .eContents().get(0);
        private final RuleCall cNameNAMEVARParserRuleCall_1_0_0_0 = (RuleCall) cNameAssignment_1_0_0
                .eContents().get(0);
        private final Keyword cLeftParenthesisKeyword_1_0_1 = (Keyword) cGroup_1_0
                .eContents().get(1);
        private final Group cGroup_1_0_2 = (Group) cGroup_1_0.eContents()
                .get(2);
        private final Assignment cArgsAssignment_1_0_2_0 = (Assignment) cGroup_1_0_2
                .eContents().get(0);
        private final RuleCall cArgsPatternExpressionParserRuleCall_1_0_2_0_0 = (RuleCall) cArgsAssignment_1_0_2_0
                .eContents().get(0);
        private final Group cGroup_1_0_2_1 = (Group) cGroup_1_0_2.eContents()
                .get(1);
        private final Keyword cCommaKeyword_1_0_2_1_0 = (Keyword) cGroup_1_0_2_1
                .eContents().get(0);
        private final Assignment cArgsAssignment_1_0_2_1_1 = (Assignment) cGroup_1_0_2_1
                .eContents().get(1);
        private final RuleCall cArgsPatternExpressionParserRuleCall_1_0_2_1_1_0 = (RuleCall) cArgsAssignment_1_0_2_1_1
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_1_0_3 = (Keyword) cGroup_1_0
                .eContents().get(3);
        private final Keyword cColonColonKeyword_1_0_4 = (Keyword) cGroup_1_0
                .eContents().get(4);
        private final Assignment cTypeAssignment_1_0_5 = (Assignment) cGroup_1_0
                .eContents().get(5);
        private final RuleCall cTypeTopTypeParserRuleCall_1_0_5_0 = (RuleCall) cTypeAssignment_1_0_5
                .eContents().get(0);
        private final Group cGroup_1_1 = (Group) cAlternatives_1.eContents()
                .get(1);
        private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword) cGroup_1_1
                .eContents().get(0);
        private final Assignment cNameAssignment_1_1_1 = (Assignment) cGroup_1_1
                .eContents().get(1);
        private final RuleCall cNameNAMEVARParserRuleCall_1_1_1_0 = (RuleCall) cNameAssignment_1_1_1
                .eContents().get(0);
        private final Keyword cLeftParenthesisKeyword_1_1_2 = (Keyword) cGroup_1_1
                .eContents().get(2);
        private final Group cGroup_1_1_3 = (Group) cGroup_1_1.eContents()
                .get(3);
        private final Assignment cArgsAssignment_1_1_3_0 = (Assignment) cGroup_1_1_3
                .eContents().get(0);
        private final RuleCall cArgsPatternExpressionParserRuleCall_1_1_3_0_0 = (RuleCall) cArgsAssignment_1_1_3_0
                .eContents().get(0);
        private final Group cGroup_1_1_3_1 = (Group) cGroup_1_1_3.eContents()
                .get(1);
        private final Keyword cCommaKeyword_1_1_3_1_0 = (Keyword) cGroup_1_1_3_1
                .eContents().get(0);
        private final Assignment cArgsAssignment_1_1_3_1_1 = (Assignment) cGroup_1_1_3_1
                .eContents().get(1);
        private final RuleCall cArgsPatternExpressionParserRuleCall_1_1_3_1_1_0 = (RuleCall) cArgsAssignment_1_1_3_1_1
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_1_1_4 = (Keyword) cGroup_1_1
                .eContents().get(4);
        private final Keyword cColonColonKeyword_1_1_5 = (Keyword) cGroup_1_1
                .eContents().get(5);
        private final Assignment cTypeAssignment_1_1_6 = (Assignment) cGroup_1_1
                .eContents().get(6);
        private final RuleCall cTypeTopTypeParserRuleCall_1_1_6_0 = (RuleCall) cTypeAssignment_1_1_6
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_1_1_7 = (Keyword) cGroup_1_1
                .eContents().get(7);
        private final Keyword cFullStopKeyword_2 = (Keyword) cGroup.eContents()
                .get(2);

        // TypeAttribute:
        // => tag=("type" | "opaque") (name=NAMEVAR "(" (args+=PatternExpression
        // ("," args+=PatternExpression)*)? ")" "::"
        // type=TopType | "(" name=NAMEVAR "(" (args+=PatternExpression (","
        // args+=PatternExpression)*)? ")" "::" type=TopType
        // ")") ".";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // => tag=("type" | "opaque") (name=NAMEVAR "(" (args+=PatternExpression
        // ("," args+=PatternExpression)*)? ")" "::"
        // type=TopType | "(" name=NAMEVAR "(" (args+=PatternExpression (","
        // args+=PatternExpression)*)? ")" "::" type=TopType
        // ")") "."
        public Group getGroup() {
            return cGroup;
        }

        // => tag=("type" | "opaque")
        public Assignment getTagAssignment_0() {
            return cTagAssignment_0;
        }

        // "type" | "opaque"
        public Alternatives getTagAlternatives_0_0() {
            return cTagAlternatives_0_0;
        }

        // "type"
        public Keyword getTagTypeKeyword_0_0_0() {
            return cTagTypeKeyword_0_0_0;
        }

        // "opaque"
        public Keyword getTagOpaqueKeyword_0_0_1() {
            return cTagOpaqueKeyword_0_0_1;
        }

        // name=NAMEVAR "(" (args+=PatternExpression (","
        // args+=PatternExpression)*)? ")" "::" type=TopType | "(" name=NAMEVAR
        // "("
        // (args+=PatternExpression ("," args+=PatternExpression)*)? ")" "::"
        // type=TopType ")"
        public Alternatives getAlternatives_1() {
            return cAlternatives_1;
        }

        // name=NAMEVAR "(" (args+=PatternExpression (","
        // args+=PatternExpression)*)? ")" "::" type=TopType
        public Group getGroup_1_0() {
            return cGroup_1_0;
        }

        // name=NAMEVAR
        public Assignment getNameAssignment_1_0_0() {
            return cNameAssignment_1_0_0;
        }

        // NAMEVAR
        public RuleCall getNameNAMEVARParserRuleCall_1_0_0_0() {
            return cNameNAMEVARParserRuleCall_1_0_0_0;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_1_0_1() {
            return cLeftParenthesisKeyword_1_0_1;
        }

        // (args+=PatternExpression ("," args+=PatternExpression)*)?
        public Group getGroup_1_0_2() {
            return cGroup_1_0_2;
        }

        // args+=PatternExpression
        public Assignment getArgsAssignment_1_0_2_0() {
            return cArgsAssignment_1_0_2_0;
        }

        // PatternExpression
        public RuleCall getArgsPatternExpressionParserRuleCall_1_0_2_0_0() {
            return cArgsPatternExpressionParserRuleCall_1_0_2_0_0;
        }

        // ("," args+=PatternExpression)*
        public Group getGroup_1_0_2_1() {
            return cGroup_1_0_2_1;
        }

        // ","
        public Keyword getCommaKeyword_1_0_2_1_0() {
            return cCommaKeyword_1_0_2_1_0;
        }

        // args+=PatternExpression
        public Assignment getArgsAssignment_1_0_2_1_1() {
            return cArgsAssignment_1_0_2_1_1;
        }

        // PatternExpression
        public RuleCall getArgsPatternExpressionParserRuleCall_1_0_2_1_1_0() {
            return cArgsPatternExpressionParserRuleCall_1_0_2_1_1_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_1_0_3() {
            return cRightParenthesisKeyword_1_0_3;
        }

        // "::"
        public Keyword getColonColonKeyword_1_0_4() {
            return cColonColonKeyword_1_0_4;
        }

        // type=TopType
        public Assignment getTypeAssignment_1_0_5() {
            return cTypeAssignment_1_0_5;
        }

        // TopType
        public RuleCall getTypeTopTypeParserRuleCall_1_0_5_0() {
            return cTypeTopTypeParserRuleCall_1_0_5_0;
        }

        // "(" name=NAMEVAR "(" (args+=PatternExpression (","
        // args+=PatternExpression)*)? ")" "::" type=TopType ")"
        public Group getGroup_1_1() {
            return cGroup_1_1;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_1_1_0() {
            return cLeftParenthesisKeyword_1_1_0;
        }

        // name=NAMEVAR
        public Assignment getNameAssignment_1_1_1() {
            return cNameAssignment_1_1_1;
        }

        // NAMEVAR
        public RuleCall getNameNAMEVARParserRuleCall_1_1_1_0() {
            return cNameNAMEVARParserRuleCall_1_1_1_0;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_1_1_2() {
            return cLeftParenthesisKeyword_1_1_2;
        }

        // (args+=PatternExpression ("," args+=PatternExpression)*)?
        public Group getGroup_1_1_3() {
            return cGroup_1_1_3;
        }

        // args+=PatternExpression
        public Assignment getArgsAssignment_1_1_3_0() {
            return cArgsAssignment_1_1_3_0;
        }

        // PatternExpression
        public RuleCall getArgsPatternExpressionParserRuleCall_1_1_3_0_0() {
            return cArgsPatternExpressionParserRuleCall_1_1_3_0_0;
        }

        // ("," args+=PatternExpression)*
        public Group getGroup_1_1_3_1() {
            return cGroup_1_1_3_1;
        }

        // ","
        public Keyword getCommaKeyword_1_1_3_1_0() {
            return cCommaKeyword_1_1_3_1_0;
        }

        // args+=PatternExpression
        public Assignment getArgsAssignment_1_1_3_1_1() {
            return cArgsAssignment_1_1_3_1_1;
        }

        // PatternExpression
        public RuleCall getArgsPatternExpressionParserRuleCall_1_1_3_1_1_0() {
            return cArgsPatternExpressionParserRuleCall_1_1_3_1_1_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_1_1_4() {
            return cRightParenthesisKeyword_1_1_4;
        }

        // "::"
        public Keyword getColonColonKeyword_1_1_5() {
            return cColonColonKeyword_1_1_5;
        }

        // type=TopType
        public Assignment getTypeAssignment_1_1_6() {
            return cTypeAssignment_1_1_6;
        }

        // TopType
        public RuleCall getTypeTopTypeParserRuleCall_1_1_6_0() {
            return cTypeTopTypeParserRuleCall_1_1_6_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_1_1_7() {
            return cRightParenthesisKeyword_1_1_7;
        }

        // "."
        public Keyword getFullStopKeyword_2() {
            return cFullStopKeyword_2;
        }
    }

    public class CustomAttributeElements extends
            AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "CustomAttribute");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cTagAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final RuleCall cTagATOMTerminalRuleCall_0_0 = (RuleCall) cTagAssignment_0
                .eContents().get(0);
        private final Keyword cLeftParenthesisKeyword_1 = (Keyword) cGroup
                .eContents().get(1);
        private final Group cGroup_2 = (Group) cGroup.eContents().get(2);
        private final Assignment cValueAssignment_2_0 = (Assignment) cGroup_2
                .eContents().get(0);
        private final RuleCall cValueExpressionParserRuleCall_2_0_0 = (RuleCall) cValueAssignment_2_0
                .eContents().get(0);
        private final Group cGroup_2_1 = (Group) cGroup_2.eContents().get(1);
        private final Keyword cCommaKeyword_2_1_0 = (Keyword) cGroup_2_1
                .eContents().get(0);
        private final Assignment cValueAssignment_2_1_1 = (Assignment) cGroup_2_1
                .eContents().get(1);
        private final RuleCall cValueExpressionParserRuleCall_2_1_1_0 = (RuleCall) cValueAssignment_2_1_1
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_3 = (Keyword) cGroup
                .eContents().get(3);
        private final Keyword cFullStopKeyword_4 = (Keyword) cGroup.eContents()
                .get(4);

        // CustomAttribute:
        // tag=ATOM "(" (value+=Expression ("," value+=Expression)*)? ")" ".";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // tag=ATOM "(" (value+=Expression ("," value+=Expression)*)? ")" "."
        public Group getGroup() {
            return cGroup;
        }

        // tag=ATOM
        public Assignment getTagAssignment_0() {
            return cTagAssignment_0;
        }

        // ATOM
        public RuleCall getTagATOMTerminalRuleCall_0_0() {
            return cTagATOMTerminalRuleCall_0_0;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_1() {
            return cLeftParenthesisKeyword_1;
        }

        // (value+=Expression ("," value+=Expression)*)?
        public Group getGroup_2() {
            return cGroup_2;
        }

        // value+=Expression
        public Assignment getValueAssignment_2_0() {
            return cValueAssignment_2_0;
        }

        // Expression
        public RuleCall getValueExpressionParserRuleCall_2_0_0() {
            return cValueExpressionParserRuleCall_2_0_0;
        }

        // ("," value+=Expression)*
        public Group getGroup_2_1() {
            return cGroup_2_1;
        }

        // ","
        public Keyword getCommaKeyword_2_1_0() {
            return cCommaKeyword_2_1_0;
        }

        // value+=Expression
        public Assignment getValueAssignment_2_1_1() {
            return cValueAssignment_2_1_1;
        }

        // Expression
        public RuleCall getValueExpressionParserRuleCall_2_1_1_0() {
            return cValueExpressionParserRuleCall_2_1_1_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_3() {
            return cRightParenthesisKeyword_3;
        }

        // "."
        public Keyword getFullStopKeyword_4() {
            return cFullStopKeyword_4;
        }
    }

    public class FunctionElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "Function");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cNameAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final RuleCall cNameNAMEParserRuleCall_0_0 = (RuleCall) cNameAssignment_0
                .eContents().get(0);
        private final Assignment cClausesAssignment_1 = (Assignment) cGroup
                .eContents().get(1);
        private final RuleCall cClausesFunctionClauseParserRuleCall_1_0 = (RuleCall) cClausesAssignment_1
                .eContents().get(0);
        private final Group cGroup_2 = (Group) cGroup.eContents().get(2);
        private final Keyword cSemicolonKeyword_2_0 = (Keyword) cGroup_2
                .eContents().get(0);
        private final Assignment cClausesAssignment_2_1 = (Assignment) cGroup_2
                .eContents().get(1);
        private final RuleCall cClausesFunctionClauseParserRuleCall_2_1_0 = (RuleCall) cClausesAssignment_2_1
                .eContents().get(0);
        private final Keyword cFullStopKeyword_3 = (Keyword) cGroup.eContents()
                .get(3);

        // // Functions
        // Function:
        // name=NAME clauses+=FunctionClause (";" clauses+=FunctionClause)* ".";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // name=NAME clauses+=FunctionClause (";" clauses+=FunctionClause)* "."
        public Group getGroup() {
            return cGroup;
        }

        // name=NAME
        public Assignment getNameAssignment_0() {
            return cNameAssignment_0;
        }

        // NAME
        public RuleCall getNameNAMEParserRuleCall_0_0() {
            return cNameNAMEParserRuleCall_0_0;
        }

        // clauses+=FunctionClause
        public Assignment getClausesAssignment_1() {
            return cClausesAssignment_1;
        }

        // FunctionClause
        public RuleCall getClausesFunctionClauseParserRuleCall_1_0() {
            return cClausesFunctionClauseParserRuleCall_1_0;
        }

        // (";" clauses+=FunctionClause)*
        public Group getGroup_2() {
            return cGroup_2;
        }

        // ";"
        public Keyword getSemicolonKeyword_2_0() {
            return cSemicolonKeyword_2_0;
        }

        // clauses+=FunctionClause
        public Assignment getClausesAssignment_2_1() {
            return cClausesAssignment_2_1;
        }

        // FunctionClause
        public RuleCall getClausesFunctionClauseParserRuleCall_2_1_0() {
            return cClausesFunctionClauseParserRuleCall_2_1_0;
        }

        // "."
        public Keyword getFullStopKeyword_3() {
            return cFullStopKeyword_3;
        }
    }

    public class FunctionClauseElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "FunctionClause");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cRefAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final CrossReference cRefFunctionCrossReference_0_0 = (CrossReference) cRefAssignment_0
                .eContents().get(0);
        private final RuleCall cRefFunctionNAMEParserRuleCall_0_0_1 = (RuleCall) cRefFunctionCrossReference_0_0
                .eContents().get(1);
        private final Keyword cLeftParenthesisKeyword_1 = (Keyword) cGroup
                .eContents().get(1);
        private final Assignment cParamsAssignment_2 = (Assignment) cGroup
                .eContents().get(2);
        private final RuleCall cParamsExpressionsParserRuleCall_2_0 = (RuleCall) cParamsAssignment_2
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_3 = (Keyword) cGroup
                .eContents().get(3);
        private final Group cGroup_4 = (Group) cGroup.eContents().get(4);
        private final Keyword cWhenKeyword_4_0 = (Keyword) cGroup_4.eContents()
                .get(0);
        private final Assignment cGuardAssignment_4_1 = (Assignment) cGroup_4
                .eContents().get(1);
        private final RuleCall cGuardGuardParserRuleCall_4_1_0 = (RuleCall) cGuardAssignment_4_1
                .eContents().get(0);
        private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword) cGroup
                .eContents().get(5);
        private final Assignment cBodyAssignment_6 = (Assignment) cGroup
                .eContents().get(6);
        private final RuleCall cBodyExpressionsParserRuleCall_6_0 = (RuleCall) cBodyAssignment_6
                .eContents().get(0);

        // // validate that all names for a function are identical
        // FunctionClause:
        // ref=[Function|NAME]? "(" params=Expressions? ")" ("when"?
        // guard=Guard)? // no 'when' if guard is a macro
        // "->" body=Expressions;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // ref=[Function|NAME]? "(" params=Expressions? ")" ("when"?
        // guard=Guard)? // no 'when' if guard is a macro
        // "->" body=Expressions
        public Group getGroup() {
            return cGroup;
        }

        // ref=[Function|NAME]?
        public Assignment getRefAssignment_0() {
            return cRefAssignment_0;
        }

        // [Function|NAME]
        public CrossReference getRefFunctionCrossReference_0_0() {
            return cRefFunctionCrossReference_0_0;
        }

        // NAME
        public RuleCall getRefFunctionNAMEParserRuleCall_0_0_1() {
            return cRefFunctionNAMEParserRuleCall_0_0_1;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_1() {
            return cLeftParenthesisKeyword_1;
        }

        // params=Expressions?
        public Assignment getParamsAssignment_2() {
            return cParamsAssignment_2;
        }

        // Expressions
        public RuleCall getParamsExpressionsParserRuleCall_2_0() {
            return cParamsExpressionsParserRuleCall_2_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_3() {
            return cRightParenthesisKeyword_3;
        }

        // ("when"? guard=Guard)?
        public Group getGroup_4() {
            return cGroup_4;
        }

        // "when"?
        public Keyword getWhenKeyword_4_0() {
            return cWhenKeyword_4_0;
        }

        // guard=Guard
        public Assignment getGuardAssignment_4_1() {
            return cGuardAssignment_4_1;
        }

        // Guard
        public RuleCall getGuardGuardParserRuleCall_4_1_0() {
            return cGuardGuardParserRuleCall_4_1_0;
        }

        // "->"
        public Keyword getHyphenMinusGreaterThanSignKeyword_5() {
            return cHyphenMinusGreaterThanSignKeyword_5;
        }

        // body=Expressions
        public Assignment getBodyAssignment_6() {
            return cBodyAssignment_6;
        }

        // Expressions
        public RuleCall getBodyExpressionsParserRuleCall_6_0() {
            return cBodyExpressionsParserRuleCall_6_0;
        }
    }

    public class GuardElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "Guard");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cGuardsAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final RuleCall cGuardsExpressionsParserRuleCall_0_0 = (RuleCall) cGuardsAssignment_0
                .eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Keyword cSemicolonKeyword_1_0 = (Keyword) cGroup_1
                .eContents().get(0);
        private final Assignment cGuardsAssignment_1_1 = (Assignment) cGroup_1
                .eContents().get(1);
        private final RuleCall cGuardsExpressionsParserRuleCall_1_1_0 = (RuleCall) cGuardsAssignment_1_1
                .eContents().get(0);

        // Guard:
        // guards+=Expressions (";" guards+=Expressions)*;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // guards+=Expressions (";" guards+=Expressions)*
        public Group getGroup() {
            return cGroup;
        }

        // guards+=Expressions
        public Assignment getGuardsAssignment_0() {
            return cGuardsAssignment_0;
        }

        // Expressions
        public RuleCall getGuardsExpressionsParserRuleCall_0_0() {
            return cGuardsExpressionsParserRuleCall_0_0;
        }

        // (";" guards+=Expressions)*
        public Group getGroup_1() {
            return cGroup_1;
        }

        // ";"
        public Keyword getSemicolonKeyword_1_0() {
            return cSemicolonKeyword_1_0;
        }

        // guards+=Expressions
        public Assignment getGuardsAssignment_1_1() {
            return cGuardsAssignment_1_1;
        }

        // Expressions
        public RuleCall getGuardsExpressionsParserRuleCall_1_1_0() {
            return cGuardsExpressionsParserRuleCall_1_1_0;
        }
    }

    public class ExpressionsElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "Expressions");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cExprsAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final RuleCall cExprsLExpressionParserRuleCall_0_0 = (RuleCall) cExprsAssignment_0
                .eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Keyword cCommaKeyword_1_0 = (Keyword) cGroup_1
                .eContents().get(0);
        private final Assignment cExprsAssignment_1_1 = (Assignment) cGroup_1
                .eContents().get(1);
        private final RuleCall cExprsLExpressionParserRuleCall_1_1_0 = (RuleCall) cExprsAssignment_1_1
                .eContents().get(0);

        // Expressions:
        // exprs+=LExpression ("," exprs+=LExpression)*;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // exprs+=LExpression ("," exprs+=LExpression)*
        public Group getGroup() {
            return cGroup;
        }

        // exprs+=LExpression
        public Assignment getExprsAssignment_0() {
            return cExprsAssignment_0;
        }

        // LExpression
        public RuleCall getExprsLExpressionParserRuleCall_0_0() {
            return cExprsLExpressionParserRuleCall_0_0;
        }

        // ("," exprs+=LExpression)*
        public Group getGroup_1() {
            return cGroup_1;
        }

        // ","
        public Keyword getCommaKeyword_1_0() {
            return cCommaKeyword_1_0;
        }

        // exprs+=LExpression
        public Assignment getExprsAssignment_1_1() {
            return cExprsAssignment_1_1;
        }

        // LExpression
        public RuleCall getExprsLExpressionParserRuleCall_1_1_0() {
            return cExprsLExpressionParserRuleCall_1_1_0;
        }
    }

    public class LExpressionElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "LExpression");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final Group cGroup_0 = (Group) cAlternatives.eContents().get(0);
        private final Assignment cLineAssignment_0_0 = (Assignment) cGroup_0
                .eContents().get(0);
        private final RuleCall cLineLineExprParserRuleCall_0_0_0 = (RuleCall) cLineAssignment_0_0
                .eContents().get(0);
        private final Assignment cExprAssignment_0_1 = (Assignment) cGroup_0
                .eContents().get(1);
        private final RuleCall cExprExpressionParserRuleCall_0_1_0 = (RuleCall) cExprAssignment_0_1
                .eContents().get(0);
        private final RuleCall cExpressionParserRuleCall_1 = (RuleCall) cAlternatives
                .eContents().get(1);

        // LExpression returns Expression:
        // => line?=LineExpr expr=Expression | Expression;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // => line?=LineExpr expr=Expression | Expression
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // => line?=LineExpr expr=Expression
        public Group getGroup_0() {
            return cGroup_0;
        }

        // => line?=LineExpr
        public Assignment getLineAssignment_0_0() {
            return cLineAssignment_0_0;
        }

        // LineExpr
        public RuleCall getLineLineExprParserRuleCall_0_0_0() {
            return cLineLineExprParserRuleCall_0_0_0;
        }

        // expr=Expression
        public Assignment getExprAssignment_0_1() {
            return cExprAssignment_0_1;
        }

        // Expression
        public RuleCall getExprExpressionParserRuleCall_0_1_0() {
            return cExprExpressionParserRuleCall_0_1_0;
        }

        // Expression
        public RuleCall getExpressionParserRuleCall_1() {
            return cExpressionParserRuleCall_1;
        }
    }

    public class LineExprElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "LineExpr");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Keyword cQuestionMarkKeyword_0 = (Keyword) cGroup
                .eContents().get(0);
        private final Keyword cLineKeyword_1 = (Keyword) cGroup.eContents()
                .get(1);

        // LineExpr:
        // "?" "line";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // "?" "line"
        public Group getGroup() {
            return cGroup;
        }

        // "?"
        public Keyword getQuestionMarkKeyword_0() {
            return cQuestionMarkKeyword_0;
        }

        // "line"
        public Keyword getLineKeyword_1() {
            return cLineKeyword_1;
        }
    }

    public class ExpressionElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "Expression");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final Group cGroup_0 = (Group) cAlternatives.eContents().get(0);
        private final Action cCatchExprAction_0_0 = (Action) cGroup_0
                .eContents().get(0);
        private final Keyword cCatchKeyword_0_1 = (Keyword) cGroup_0
                .eContents().get(1);
        private final Assignment cExprAssignment_0_2 = (Assignment) cGroup_0
                .eContents().get(2);
        private final RuleCall cExprExpressionParserRuleCall_0_2_0 = (RuleCall) cExprAssignment_0_2
                .eContents().get(0);
        private final RuleCall cExpr100ParserRuleCall_1 = (RuleCall) cAlternatives
                .eContents().get(1);

        // Expression:
        // {CatchExpr} "catch" expr=Expression | Expr100;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // {CatchExpr} "catch" expr=Expression | Expr100
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // {CatchExpr} "catch" expr=Expression
        public Group getGroup_0() {
            return cGroup_0;
        }

        // {CatchExpr}
        public Action getCatchExprAction_0_0() {
            return cCatchExprAction_0_0;
        }

        // "catch"
        public Keyword getCatchKeyword_0_1() {
            return cCatchKeyword_0_1;
        }

        // expr=Expression
        public Assignment getExprAssignment_0_2() {
            return cExprAssignment_0_2;
        }

        // Expression
        public RuleCall getExprExpressionParserRuleCall_0_2_0() {
            return cExprExpressionParserRuleCall_0_2_0;
        }

        // Expr100
        public RuleCall getExpr100ParserRuleCall_1() {
            return cExpr100ParserRuleCall_1;
        }
    }

    public class Expr100Elements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "Expr100");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cExpr150ParserRuleCall_0 = (RuleCall) cGroup
                .eContents().get(0);
        private final Alternatives cAlternatives_1 = (Alternatives) cGroup
                .eContents().get(1);
        private final Group cGroup_1_0 = (Group) cAlternatives_1.eContents()
                .get(0);
        private final Action cMatchExprOpLeftAction_1_0_0 = (Action) cGroup_1_0
                .eContents().get(0);
        private final Assignment cOpAssignment_1_0_1 = (Assignment) cGroup_1_0
                .eContents().get(1);
        private final Keyword cOpEqualsSignKeyword_1_0_1_0 = (Keyword) cOpAssignment_1_0_1
                .eContents().get(0);
        private final Assignment cOpRightAssignment_1_0_2 = (Assignment) cGroup_1_0
                .eContents().get(2);
        private final RuleCall cOpRightExpr100ParserRuleCall_1_0_2_0 = (RuleCall) cOpRightAssignment_1_0_2
                .eContents().get(0);
        private final Group cGroup_1_1 = (Group) cAlternatives_1.eContents()
                .get(1);
        private final Action cBinOpOpLeftAction_1_1_0 = (Action) cGroup_1_1
                .eContents().get(0);
        private final Assignment cOpAssignment_1_1_1 = (Assignment) cGroup_1_1
                .eContents().get(1);
        private final RuleCall cOpSENDOPParserRuleCall_1_1_1_0 = (RuleCall) cOpAssignment_1_1_1
                .eContents().get(0);
        private final Assignment cOpRightAssignment_1_1_2 = (Assignment) cGroup_1_1
                .eContents().get(2);
        private final RuleCall cOpRightExpr100ParserRuleCall_1_1_2_0 = (RuleCall) cOpRightAssignment_1_1_2
                .eContents().get(0);

        // // right-associative
        // Expr100 returns Expression:
        // Expr150 ({MatchExpr.opLeft=current} op="=" opRight=Expr100 |
        // {BinOp.opLeft=current} op=SENDOP opRight=Expr100)?;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // Expr150 ({MatchExpr.opLeft=current} op="=" opRight=Expr100 |
        // {BinOp.opLeft=current} op=SENDOP opRight=Expr100)?
        public Group getGroup() {
            return cGroup;
        }

        // Expr150
        public RuleCall getExpr150ParserRuleCall_0() {
            return cExpr150ParserRuleCall_0;
        }

        // ({MatchExpr.opLeft=current} op="=" opRight=Expr100 |
        // {BinOp.opLeft=current} op=SENDOP opRight=Expr100)?
        public Alternatives getAlternatives_1() {
            return cAlternatives_1;
        }

        // {MatchExpr.opLeft=current} op="=" opRight=Expr100
        public Group getGroup_1_0() {
            return cGroup_1_0;
        }

        // {MatchExpr.opLeft=current}
        public Action getMatchExprOpLeftAction_1_0_0() {
            return cMatchExprOpLeftAction_1_0_0;
        }

        // op="="
        public Assignment getOpAssignment_1_0_1() {
            return cOpAssignment_1_0_1;
        }

        // "="
        public Keyword getOpEqualsSignKeyword_1_0_1_0() {
            return cOpEqualsSignKeyword_1_0_1_0;
        }

        // opRight=Expr100
        public Assignment getOpRightAssignment_1_0_2() {
            return cOpRightAssignment_1_0_2;
        }

        // Expr100
        public RuleCall getOpRightExpr100ParserRuleCall_1_0_2_0() {
            return cOpRightExpr100ParserRuleCall_1_0_2_0;
        }

        // {BinOp.opLeft=current} op=SENDOP opRight=Expr100
        public Group getGroup_1_1() {
            return cGroup_1_1;
        }

        // {BinOp.opLeft=current}
        public Action getBinOpOpLeftAction_1_1_0() {
            return cBinOpOpLeftAction_1_1_0;
        }

        // op=SENDOP
        public Assignment getOpAssignment_1_1_1() {
            return cOpAssignment_1_1_1;
        }

        // SENDOP
        public RuleCall getOpSENDOPParserRuleCall_1_1_1_0() {
            return cOpSENDOPParserRuleCall_1_1_1_0;
        }

        // opRight=Expr100
        public Assignment getOpRightAssignment_1_1_2() {
            return cOpRightAssignment_1_1_2;
        }

        // Expr100
        public RuleCall getOpRightExpr100ParserRuleCall_1_1_2_0() {
            return cOpRightExpr100ParserRuleCall_1_1_2_0;
        }
    }

    public class Expr150Elements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "Expr150");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cExpr160ParserRuleCall_0 = (RuleCall) cGroup
                .eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Action cBinOpOpLeftAction_1_0 = (Action) cGroup_1
                .eContents().get(0);
        private final Assignment cOpAssignment_1_1 = (Assignment) cGroup_1
                .eContents().get(1);
        private final Keyword cOpOrelseKeyword_1_1_0 = (Keyword) cOpAssignment_1_1
                .eContents().get(0);
        private final Assignment cOpRightAssignment_1_2 = (Assignment) cGroup_1
                .eContents().get(2);
        private final RuleCall cOpRightExpr160ParserRuleCall_1_2_0 = (RuleCall) cOpRightAssignment_1_2
                .eContents().get(0);

        // Expr150 returns Expression:
        // Expr160 ({BinOp.opLeft=current} op="orelse" opRight=Expr160)*;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // Expr160 ({BinOp.opLeft=current} op="orelse" opRight=Expr160)*
        public Group getGroup() {
            return cGroup;
        }

        // Expr160
        public RuleCall getExpr160ParserRuleCall_0() {
            return cExpr160ParserRuleCall_0;
        }

        // ({BinOp.opLeft=current} op="orelse" opRight=Expr160)*
        public Group getGroup_1() {
            return cGroup_1;
        }

        // {BinOp.opLeft=current}
        public Action getBinOpOpLeftAction_1_0() {
            return cBinOpOpLeftAction_1_0;
        }

        // op="orelse"
        public Assignment getOpAssignment_1_1() {
            return cOpAssignment_1_1;
        }

        // "orelse"
        public Keyword getOpOrelseKeyword_1_1_0() {
            return cOpOrelseKeyword_1_1_0;
        }

        // opRight=Expr160
        public Assignment getOpRightAssignment_1_2() {
            return cOpRightAssignment_1_2;
        }

        // Expr160
        public RuleCall getOpRightExpr160ParserRuleCall_1_2_0() {
            return cOpRightExpr160ParserRuleCall_1_2_0;
        }
    }

    public class Expr160Elements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "Expr160");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cExpr200ParserRuleCall_0 = (RuleCall) cGroup
                .eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Action cBinOpOpLeftAction_1_0 = (Action) cGroup_1
                .eContents().get(0);
        private final Assignment cOpAssignment_1_1 = (Assignment) cGroup_1
                .eContents().get(1);
        private final Keyword cOpAndalsoKeyword_1_1_0 = (Keyword) cOpAssignment_1_1
                .eContents().get(0);
        private final Assignment cOpRight2Assignment_1_2 = (Assignment) cGroup_1
                .eContents().get(2);
        private final RuleCall cOpRight2Expr200ParserRuleCall_1_2_0 = (RuleCall) cOpRight2Assignment_1_2
                .eContents().get(0);

        // Expr160 returns Expression:
        // Expr200 ({BinOp.opLeft=current} op="andalso" opRight2=Expr200)*;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // Expr200 ({BinOp.opLeft=current} op="andalso" opRight2=Expr200)*
        public Group getGroup() {
            return cGroup;
        }

        // Expr200
        public RuleCall getExpr200ParserRuleCall_0() {
            return cExpr200ParserRuleCall_0;
        }

        // ({BinOp.opLeft=current} op="andalso" opRight2=Expr200)*
        public Group getGroup_1() {
            return cGroup_1;
        }

        // {BinOp.opLeft=current}
        public Action getBinOpOpLeftAction_1_0() {
            return cBinOpOpLeftAction_1_0;
        }

        // op="andalso"
        public Assignment getOpAssignment_1_1() {
            return cOpAssignment_1_1;
        }

        // "andalso"
        public Keyword getOpAndalsoKeyword_1_1_0() {
            return cOpAndalsoKeyword_1_1_0;
        }

        // opRight2=Expr200
        public Assignment getOpRight2Assignment_1_2() {
            return cOpRight2Assignment_1_2;
        }

        // Expr200
        public RuleCall getOpRight2Expr200ParserRuleCall_1_2_0() {
            return cOpRight2Expr200ParserRuleCall_1_2_0;
        }
    }

    public class Expr200Elements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "Expr200");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cExpr300ParserRuleCall_0 = (RuleCall) cGroup
                .eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Action cBinOpOpLeftAction_1_0 = (Action) cGroup_1
                .eContents().get(0);
        private final Assignment cOpAssignment_1_1 = (Assignment) cGroup_1
                .eContents().get(1);
        private final RuleCall cOpCOMPOPParserRuleCall_1_1_0 = (RuleCall) cOpAssignment_1_1
                .eContents().get(0);
        private final Assignment cOpRightAssignment_1_2 = (Assignment) cGroup_1
                .eContents().get(2);
        private final RuleCall cOpRightExpr300ParserRuleCall_1_2_0 = (RuleCall) cOpRightAssignment_1_2
                .eContents().get(0);

        // // non-associative
        // Expr200 returns Expression:
        // Expr300 ({BinOp.opLeft=current} op=COMPOP opRight=Expr300)?;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // Expr300 ({BinOp.opLeft=current} op=COMPOP opRight=Expr300)?
        public Group getGroup() {
            return cGroup;
        }

        // Expr300
        public RuleCall getExpr300ParserRuleCall_0() {
            return cExpr300ParserRuleCall_0;
        }

        // ({BinOp.opLeft=current} op=COMPOP opRight=Expr300)?
        public Group getGroup_1() {
            return cGroup_1;
        }

        // {BinOp.opLeft=current}
        public Action getBinOpOpLeftAction_1_0() {
            return cBinOpOpLeftAction_1_0;
        }

        // op=COMPOP
        public Assignment getOpAssignment_1_1() {
            return cOpAssignment_1_1;
        }

        // COMPOP
        public RuleCall getOpCOMPOPParserRuleCall_1_1_0() {
            return cOpCOMPOPParserRuleCall_1_1_0;
        }

        // opRight=Expr300
        public Assignment getOpRightAssignment_1_2() {
            return cOpRightAssignment_1_2;
        }

        // Expr300
        public RuleCall getOpRightExpr300ParserRuleCall_1_2_0() {
            return cOpRightExpr300ParserRuleCall_1_2_0;
        }
    }

    public class Expr300Elements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "Expr300");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cExpr400ParserRuleCall_0 = (RuleCall) cGroup
                .eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Action cBinOpOpLeftAction_1_0 = (Action) cGroup_1
                .eContents().get(0);
        private final Assignment cOpAssignment_1_1 = (Assignment) cGroup_1
                .eContents().get(1);
        private final RuleCall cOpLISTOPParserRuleCall_1_1_0 = (RuleCall) cOpAssignment_1_1
                .eContents().get(0);
        private final Assignment cOpRightAssignment_1_2 = (Assignment) cGroup_1
                .eContents().get(2);
        private final RuleCall cOpRightExpr400ParserRuleCall_1_2_0 = (RuleCall) cOpRightAssignment_1_2
                .eContents().get(0);

        // Expr300 returns Expression:
        // Expr400 ({BinOp.opLeft=current} op=LISTOP opRight=Expr400)*;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // Expr400 ({BinOp.opLeft=current} op=LISTOP opRight=Expr400)*
        public Group getGroup() {
            return cGroup;
        }

        // Expr400
        public RuleCall getExpr400ParserRuleCall_0() {
            return cExpr400ParserRuleCall_0;
        }

        // ({BinOp.opLeft=current} op=LISTOP opRight=Expr400)*
        public Group getGroup_1() {
            return cGroup_1;
        }

        // {BinOp.opLeft=current}
        public Action getBinOpOpLeftAction_1_0() {
            return cBinOpOpLeftAction_1_0;
        }

        // op=LISTOP
        public Assignment getOpAssignment_1_1() {
            return cOpAssignment_1_1;
        }

        // LISTOP
        public RuleCall getOpLISTOPParserRuleCall_1_1_0() {
            return cOpLISTOPParserRuleCall_1_1_0;
        }

        // opRight=Expr400
        public Assignment getOpRightAssignment_1_2() {
            return cOpRightAssignment_1_2;
        }

        // Expr400
        public RuleCall getOpRightExpr400ParserRuleCall_1_2_0() {
            return cOpRightExpr400ParserRuleCall_1_2_0;
        }
    }

    public class Expr400Elements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "Expr400");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cExpr500ParserRuleCall_0 = (RuleCall) cGroup
                .eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Action cAddOpOpLeftAction_1_0 = (Action) cGroup_1
                .eContents().get(0);
        private final Assignment cOpAssignment_1_1 = (Assignment) cGroup_1
                .eContents().get(1);
        private final RuleCall cOpADDOPParserRuleCall_1_1_0 = (RuleCall) cOpAssignment_1_1
                .eContents().get(0);
        private final Assignment cOpRightAssignment_1_2 = (Assignment) cGroup_1
                .eContents().get(2);
        private final RuleCall cOpRightExpr500ParserRuleCall_1_2_0 = (RuleCall) cOpRightAssignment_1_2
                .eContents().get(0);

        // Expr400 returns Expression:
        // Expr500 ({AddOp.opLeft=current} op=ADDOP opRight=Expr500)*;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // Expr500 ({AddOp.opLeft=current} op=ADDOP opRight=Expr500)*
        public Group getGroup() {
            return cGroup;
        }

        // Expr500
        public RuleCall getExpr500ParserRuleCall_0() {
            return cExpr500ParserRuleCall_0;
        }

        // ({AddOp.opLeft=current} op=ADDOP opRight=Expr500)*
        public Group getGroup_1() {
            return cGroup_1;
        }

        // {AddOp.opLeft=current}
        public Action getAddOpOpLeftAction_1_0() {
            return cAddOpOpLeftAction_1_0;
        }

        // op=ADDOP
        public Assignment getOpAssignment_1_1() {
            return cOpAssignment_1_1;
        }

        // ADDOP
        public RuleCall getOpADDOPParserRuleCall_1_1_0() {
            return cOpADDOPParserRuleCall_1_1_0;
        }

        // opRight=Expr500
        public Assignment getOpRightAssignment_1_2() {
            return cOpRightAssignment_1_2;
        }

        // Expr500
        public RuleCall getOpRightExpr500ParserRuleCall_1_2_0() {
            return cOpRightExpr500ParserRuleCall_1_2_0;
        }
    }

    public class Expr500Elements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "Expr500");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cUnaryExprParserRuleCall_0 = (RuleCall) cGroup
                .eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Action cMultOpOpLeftAction_1_0 = (Action) cGroup_1
                .eContents().get(0);
        private final Assignment cOpAssignment_1_1 = (Assignment) cGroup_1
                .eContents().get(1);
        private final RuleCall cOpMULTOPParserRuleCall_1_1_0 = (RuleCall) cOpAssignment_1_1
                .eContents().get(0);
        private final Assignment cOpRightAssignment_1_2 = (Assignment) cGroup_1
                .eContents().get(2);
        private final RuleCall cOpRightUnaryExprParserRuleCall_1_2_0 = (RuleCall) cOpRightAssignment_1_2
                .eContents().get(0);

        // Expr500 returns Expression:
        // UnaryExpr ({MultOp.opLeft=current} op=MULTOP opRight=UnaryExpr)*;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // UnaryExpr ({MultOp.opLeft=current} op=MULTOP opRight=UnaryExpr)*
        public Group getGroup() {
            return cGroup;
        }

        // UnaryExpr
        public RuleCall getUnaryExprParserRuleCall_0() {
            return cUnaryExprParserRuleCall_0;
        }

        // ({MultOp.opLeft=current} op=MULTOP opRight=UnaryExpr)*
        public Group getGroup_1() {
            return cGroup_1;
        }

        // {MultOp.opLeft=current}
        public Action getMultOpOpLeftAction_1_0() {
            return cMultOpOpLeftAction_1_0;
        }

        // op=MULTOP
        public Assignment getOpAssignment_1_1() {
            return cOpAssignment_1_1;
        }

        // MULTOP
        public RuleCall getOpMULTOPParserRuleCall_1_1_0() {
            return cOpMULTOPParserRuleCall_1_1_0;
        }

        // opRight=UnaryExpr
        public Assignment getOpRightAssignment_1_2() {
            return cOpRightAssignment_1_2;
        }

        // UnaryExpr
        public RuleCall getOpRightUnaryExprParserRuleCall_1_2_0() {
            return cOpRightUnaryExprParserRuleCall_1_2_0;
        }
    }

    public class UnaryExprElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "UnaryExpr");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final Group cGroup_0 = (Group) cAlternatives.eContents().get(0);
        private final Action cUnaryExprAction_0_0 = (Action) cGroup_0
                .eContents().get(0);
        private final Assignment cOpAssignment_0_1 = (Assignment) cGroup_0
                .eContents().get(1);
        private final RuleCall cOpPREFIXOPParserRuleCall_0_1_0 = (RuleCall) cOpAssignment_0_1
                .eContents().get(0);
        private final Assignment cOperandAssignment_0_2 = (Assignment) cGroup_0
                .eContents().get(2);
        private final RuleCall cOperandExpr700ParserRuleCall_0_2_0 = (RuleCall) cOperandAssignment_0_2
                .eContents().get(0);
        private final RuleCall cExpr700ParserRuleCall_1 = (RuleCall) cAlternatives
                .eContents().get(1);

        // UnaryExpr returns Expression:
        // {UnaryExpr} op=PREFIXOP operand=Expr700 | Expr700;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // {UnaryExpr} op=PREFIXOP operand=Expr700 | Expr700
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // {UnaryExpr} op=PREFIXOP operand=Expr700
        public Group getGroup_0() {
            return cGroup_0;
        }

        // {UnaryExpr}
        public Action getUnaryExprAction_0_0() {
            return cUnaryExprAction_0_0;
        }

        // op=PREFIXOP
        public Assignment getOpAssignment_0_1() {
            return cOpAssignment_0_1;
        }

        // PREFIXOP
        public RuleCall getOpPREFIXOPParserRuleCall_0_1_0() {
            return cOpPREFIXOPParserRuleCall_0_1_0;
        }

        // operand=Expr700
        public Assignment getOperandAssignment_0_2() {
            return cOperandAssignment_0_2;
        }

        // Expr700
        public RuleCall getOperandExpr700ParserRuleCall_0_2_0() {
            return cOperandExpr700ParserRuleCall_0_2_0;
        }

        // Expr700
        public RuleCall getExpr700ParserRuleCall_1() {
            return cExpr700ParserRuleCall_1;
        }
    }

    public class Expr700Elements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "Expr700");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cExpr800ParserRuleCall_0 = (RuleCall) cGroup
                .eContents().get(0);
        private final Alternatives cAlternatives_1 = (Alternatives) cGroup
                .eContents().get(1);
        private final Group cGroup_1_0 = (Group) cAlternatives_1.eContents()
                .get(0);
        private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword) cGroup_1_0
                .eContents().get(0);
        private final Action cFunCallTargetAction_1_0_1 = (Action) cGroup_1_0
                .eContents().get(1);
        private final Assignment cArgsAssignment_1_0_2 = (Assignment) cGroup_1_0
                .eContents().get(2);
        private final RuleCall cArgsExpressionsParserRuleCall_1_0_2_0 = (RuleCall) cArgsAssignment_1_0_2
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_1_0_3 = (Keyword) cGroup_1_0
                .eContents().get(3);
        private final Group cGroup_1_0_4 = (Group) cGroup_1_0.eContents()
                .get(4);
        private final Keyword cLeftParenthesisKeyword_1_0_4_0 = (Keyword) cGroup_1_0_4
                .eContents().get(0);
        private final Assignment cArgs2Assignment_1_0_4_1 = (Assignment) cGroup_1_0_4
                .eContents().get(1);
        private final RuleCall cArgs2ExpressionsParserRuleCall_1_0_4_1_0 = (RuleCall) cArgs2Assignment_1_0_4_1
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_1_0_4_2 = (Keyword) cGroup_1_0_4
                .eContents().get(2);
        private final Group cGroup_1_1 = (Group) cAlternatives_1.eContents()
                .get(1);
        private final Keyword cNumberSignKeyword_1_1_0 = (Keyword) cGroup_1_1
                .eContents().get(0);
        private final Action cRecordExprRefAction_1_1_1 = (Action) cGroup_1_1
                .eContents().get(1);
        private final Assignment cRecordAssignment_1_1_2 = (Assignment) cGroup_1_1
                .eContents().get(2);
        private final RuleCall cRecordRecordExprParserRuleCall_1_1_2_0 = (RuleCall) cRecordAssignment_1_1_2
                .eContents().get(0);

        // Expr700 returns Expression:
        // Expr800 // TODO can this be expressed better?
        // // we can have ?MACRO(args)(args2)
        // ("(" {FunCall.target=current} args=Expressions? ")" ("("
        // args2=Expressions? ")")? | ("#" {RecordExpr.ref=current}
        // record=RecordExpr)+)?;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // Expr800 // TODO can this be expressed better?
        // // we can have ?MACRO(args)(args2)
        // ("(" {FunCall.target=current} args=Expressions? ")" ("("
        // args2=Expressions? ")")? | ("#" {RecordExpr.ref=current}
        // record=RecordExpr)+)?
        public Group getGroup() {
            return cGroup;
        }

        // Expr800
        public RuleCall getExpr800ParserRuleCall_0() {
            return cExpr800ParserRuleCall_0;
        }

        // // TODO can this be expressed better?
        // // we can have ?MACRO(args)(args2)
        // ("(" {FunCall.target=current} args=Expressions? ")" ("("
        // args2=Expressions? ")")? | ("#" {RecordExpr.ref=current}
        // record=RecordExpr)+)?
        public Alternatives getAlternatives_1() {
            return cAlternatives_1;
        }

        // // TODO can this be expressed better?
        // // we can have ?MACRO(args)(args2)
        // "(" {FunCall.target=current} args=Expressions? ")" ("("
        // args2=Expressions? ")")?
        public Group getGroup_1_0() {
            return cGroup_1_0;
        }

        // // TODO can this be expressed better?
        // // we can have ?MACRO(args)(args2)
        // "("
        public Keyword getLeftParenthesisKeyword_1_0_0() {
            return cLeftParenthesisKeyword_1_0_0;
        }

        // {FunCall.target=current}
        public Action getFunCallTargetAction_1_0_1() {
            return cFunCallTargetAction_1_0_1;
        }

        // args=Expressions?
        public Assignment getArgsAssignment_1_0_2() {
            return cArgsAssignment_1_0_2;
        }

        // Expressions
        public RuleCall getArgsExpressionsParserRuleCall_1_0_2_0() {
            return cArgsExpressionsParserRuleCall_1_0_2_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_1_0_3() {
            return cRightParenthesisKeyword_1_0_3;
        }

        // ("(" args2=Expressions? ")")?
        public Group getGroup_1_0_4() {
            return cGroup_1_0_4;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_1_0_4_0() {
            return cLeftParenthesisKeyword_1_0_4_0;
        }

        // args2=Expressions?
        public Assignment getArgs2Assignment_1_0_4_1() {
            return cArgs2Assignment_1_0_4_1;
        }

        // Expressions
        public RuleCall getArgs2ExpressionsParserRuleCall_1_0_4_1_0() {
            return cArgs2ExpressionsParserRuleCall_1_0_4_1_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_1_0_4_2() {
            return cRightParenthesisKeyword_1_0_4_2;
        }

        // ("#" {RecordExpr.ref=current} record=RecordExpr)+
        public Group getGroup_1_1() {
            return cGroup_1_1;
        }

        // "#"
        public Keyword getNumberSignKeyword_1_1_0() {
            return cNumberSignKeyword_1_1_0;
        }

        // {RecordExpr.ref=current}
        public Action getRecordExprRefAction_1_1_1() {
            return cRecordExprRefAction_1_1_1;
        }

        // record=RecordExpr
        public Assignment getRecordAssignment_1_1_2() {
            return cRecordAssignment_1_1_2;
        }

        // RecordExpr
        public RuleCall getRecordRecordExprParserRuleCall_1_1_2_0() {
            return cRecordRecordExprParserRuleCall_1_1_2_0;
        }
    }

    public class Expr800Elements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "Expr800");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cExprMaxParserRuleCall_0 = (RuleCall) cGroup
                .eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Action cRemoteTargetModuleAction_1_0 = (Action) cGroup_1
                .eContents().get(0);
        private final Keyword cColonKeyword_1_1 = (Keyword) cGroup_1
                .eContents().get(1);
        private final Assignment cFunctionAssignment_1_2 = (Assignment) cGroup_1
                .eContents().get(2);
        private final RuleCall cFunctionExprMaxParserRuleCall_1_2_0 = (RuleCall) cFunctionAssignment_1_2
                .eContents().get(0);

        // // non-associative
        // Expr800 returns Expression:
        // ExprMax ({RemoteTarget.module=current} ":" function=ExprMax)?;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // ExprMax ({RemoteTarget.module=current} ":" function=ExprMax)?
        public Group getGroup() {
            return cGroup;
        }

        // ExprMax
        public RuleCall getExprMaxParserRuleCall_0() {
            return cExprMaxParserRuleCall_0;
        }

        // ({RemoteTarget.module=current} ":" function=ExprMax)?
        public Group getGroup_1() {
            return cGroup_1;
        }

        // {RemoteTarget.module=current}
        public Action getRemoteTargetModuleAction_1_0() {
            return cRemoteTargetModuleAction_1_0;
        }

        // ":"
        public Keyword getColonKeyword_1_1() {
            return cColonKeyword_1_1;
        }

        // function=ExprMax
        public Assignment getFunctionAssignment_1_2() {
            return cFunctionAssignment_1_2;
        }

        // ExprMax
        public RuleCall getFunctionExprMaxParserRuleCall_1_2_0() {
            return cFunctionExprMaxParserRuleCall_1_2_0;
        }
    }

    public class ExprMaxElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "ExprMax");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final RuleCall cTermExpressionParserRuleCall_0 = (RuleCall) cAlternatives
                .eContents().get(0);
        private final Group cGroup_1 = (Group) cAlternatives.eContents().get(1);
        private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword) cGroup_1
                .eContents().get(0);
        private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall) cGroup_1
                .eContents().get(1);
        private final Keyword cRightParenthesisKeyword_1_2 = (Keyword) cGroup_1
                .eContents().get(2);
        private final Group cGroup_2 = (Group) cAlternatives.eContents().get(2);
        private final Action cBlockExprAction_2_0 = (Action) cGroup_2
                .eContents().get(0);
        private final Keyword cBeginKeyword_2_1 = (Keyword) cGroup_2
                .eContents().get(1);
        private final Assignment cBodyAssignment_2_2 = (Assignment) cGroup_2
                .eContents().get(2);
        private final RuleCall cBodyExpressionsParserRuleCall_2_2_0 = (RuleCall) cBodyAssignment_2_2
                .eContents().get(0);
        private final Keyword cEndKeyword_2_3 = (Keyword) cGroup_2.eContents()
                .get(3);
        private final RuleCall cIfExprParserRuleCall_3 = (RuleCall) cAlternatives
                .eContents().get(3);
        private final RuleCall cCaseExprParserRuleCall_4 = (RuleCall) cAlternatives
                .eContents().get(4);
        private final RuleCall cReceiveExprParserRuleCall_5 = (RuleCall) cAlternatives
                .eContents().get(5);
        private final RuleCall cFunExprParserRuleCall_6 = (RuleCall) cAlternatives
                .eContents().get(6);
        private final RuleCall cTryExprParserRuleCall_7 = (RuleCall) cAlternatives
                .eContents().get(7);
        private final RuleCall cCondExprParserRuleCall_8 = (RuleCall) cAlternatives
                .eContents().get(8);
        private final RuleCall cQueryExprParserRuleCall_9 = (RuleCall) cAlternatives
                .eContents().get(9);
        private final RuleCall cLetExprParserRuleCall_10 = (RuleCall) cAlternatives
                .eContents().get(10);

        // ExprMax returns Expression:
        // TermExpression | "(" Expression ")" | {BlockExpr} "begin"
        // body=Expressions "end" | IfExpr | CaseExpr | ReceiveExpr |
        // FunExpr | TryExpr | CondExpr | QueryExpr | LetExpr;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // TermExpression | "(" Expression ")" | {BlockExpr} "begin"
        // body=Expressions "end" | IfExpr | CaseExpr | ReceiveExpr |
        // FunExpr | TryExpr | CondExpr | QueryExpr | LetExpr
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // TermExpression
        public RuleCall getTermExpressionParserRuleCall_0() {
            return cTermExpressionParserRuleCall_0;
        }

        // "(" Expression ")"
        public Group getGroup_1() {
            return cGroup_1;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_1_0() {
            return cLeftParenthesisKeyword_1_0;
        }

        // Expression
        public RuleCall getExpressionParserRuleCall_1_1() {
            return cExpressionParserRuleCall_1_1;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_1_2() {
            return cRightParenthesisKeyword_1_2;
        }

        // {BlockExpr} "begin" body=Expressions "end"
        public Group getGroup_2() {
            return cGroup_2;
        }

        // {BlockExpr}
        public Action getBlockExprAction_2_0() {
            return cBlockExprAction_2_0;
        }

        // "begin"
        public Keyword getBeginKeyword_2_1() {
            return cBeginKeyword_2_1;
        }

        // body=Expressions
        public Assignment getBodyAssignment_2_2() {
            return cBodyAssignment_2_2;
        }

        // Expressions
        public RuleCall getBodyExpressionsParserRuleCall_2_2_0() {
            return cBodyExpressionsParserRuleCall_2_2_0;
        }

        // "end"
        public Keyword getEndKeyword_2_3() {
            return cEndKeyword_2_3;
        }

        // IfExpr
        public RuleCall getIfExprParserRuleCall_3() {
            return cIfExprParserRuleCall_3;
        }

        // CaseExpr
        public RuleCall getCaseExprParserRuleCall_4() {
            return cCaseExprParserRuleCall_4;
        }

        // ReceiveExpr
        public RuleCall getReceiveExprParserRuleCall_5() {
            return cReceiveExprParserRuleCall_5;
        }

        // FunExpr
        public RuleCall getFunExprParserRuleCall_6() {
            return cFunExprParserRuleCall_6;
        }

        // TryExpr
        public RuleCall getTryExprParserRuleCall_7() {
            return cTryExprParserRuleCall_7;
        }

        // CondExpr
        public RuleCall getCondExprParserRuleCall_8() {
            return cCondExprParserRuleCall_8;
        }

        // QueryExpr
        public RuleCall getQueryExprParserRuleCall_9() {
            return cQueryExprParserRuleCall_9;
        }

        // LetExpr
        public RuleCall getLetExprParserRuleCall_10() {
            return cLetExprParserRuleCall_10;
        }
    }

    public class TermExpressionElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "TermExpression");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final RuleCall cTupleParserRuleCall_0 = (RuleCall) cAlternatives
                .eContents().get(0);
        private final RuleCall cListOrComprehensionParserRuleCall_1 = (RuleCall) cAlternatives
                .eContents().get(1);
        private final RuleCall cBinaryOrComprehensionParserRuleCall_2 = (RuleCall) cAlternatives
                .eContents().get(2);
        private final Group cGroup_3 = (Group) cAlternatives.eContents().get(3);
        private final Keyword cNumberSignKeyword_3_0 = (Keyword) cGroup_3
                .eContents().get(0);
        private final RuleCall cRecordExprParserRuleCall_3_1 = (RuleCall) cGroup_3
                .eContents().get(1);
        private final RuleCall cLiteralExpressionParserRuleCall_4 = (RuleCall) cAlternatives
                .eContents().get(4);

        // TermExpression returns Expression:
        // Tuple | ListOrComprehension | BinaryOrComprehension | "#" RecordExpr
        // | LiteralExpression;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // Tuple | ListOrComprehension | BinaryOrComprehension | "#" RecordExpr
        // | LiteralExpression
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // Tuple
        public RuleCall getTupleParserRuleCall_0() {
            return cTupleParserRuleCall_0;
        }

        // ListOrComprehension
        public RuleCall getListOrComprehensionParserRuleCall_1() {
            return cListOrComprehensionParserRuleCall_1;
        }

        // BinaryOrComprehension
        public RuleCall getBinaryOrComprehensionParserRuleCall_2() {
            return cBinaryOrComprehensionParserRuleCall_2;
        }

        // "#" RecordExpr
        public Group getGroup_3() {
            return cGroup_3;
        }

        // "#"
        public Keyword getNumberSignKeyword_3_0() {
            return cNumberSignKeyword_3_0;
        }

        // RecordExpr
        public RuleCall getRecordExprParserRuleCall_3_1() {
            return cRecordExprParserRuleCall_3_1;
        }

        // LiteralExpression
        public RuleCall getLiteralExpressionParserRuleCall_4() {
            return cLiteralExpressionParserRuleCall_4;
        }
    }

    public class MacroCallElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "MacroCall");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cMacroNameAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final RuleCall cMacroNameMacroLiteralParserRuleCall_0_0 = (RuleCall) cMacroNameAssignment_0
                .eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword) cGroup_1
                .eContents().get(0);
        private final Assignment cArgsAssignment_1_1 = (Assignment) cGroup_1
                .eContents().get(1);
        private final RuleCall cArgsExpressionsParserRuleCall_1_1_0 = (RuleCall) cArgsAssignment_1_1
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_1_2 = (Keyword) cGroup_1
                .eContents().get(2);

        // MacroCall:
        // macroName=MacroLiteral ("(" args=Expressions? ")")?;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // macroName=MacroLiteral ("(" args=Expressions? ")")?
        public Group getGroup() {
            return cGroup;
        }

        // macroName=MacroLiteral
        public Assignment getMacroNameAssignment_0() {
            return cMacroNameAssignment_0;
        }

        // MacroLiteral
        public RuleCall getMacroNameMacroLiteralParserRuleCall_0_0() {
            return cMacroNameMacroLiteralParserRuleCall_0_0;
        }

        // (=> "(" args=Expressions? ")")?
        public Group getGroup_1() {
            return cGroup_1;
        }

        // => "("
        public Keyword getLeftParenthesisKeyword_1_0() {
            return cLeftParenthesisKeyword_1_0;
        }

        // args=Expressions?
        public Assignment getArgsAssignment_1_1() {
            return cArgsAssignment_1_1;
        }

        // Expressions
        public RuleCall getArgsExpressionsParserRuleCall_1_1_0() {
            return cArgsExpressionsParserRuleCall_1_1_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_1_2() {
            return cRightParenthesisKeyword_1_2;
        }
    }

    public class RecordExprElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "RecordExpr");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cRecAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final RuleCall cRecRecordVarMacroParserRuleCall_0_0 = (RuleCall) cRecAssignment_0
                .eContents().get(0);
        private final Alternatives cAlternatives_1 = (Alternatives) cGroup
                .eContents().get(1);
        private final Group cGroup_1_0 = (Group) cAlternatives_1.eContents()
                .get(0);
        private final Keyword cFullStopKeyword_1_0_0 = (Keyword) cGroup_1_0
                .eContents().get(0);
        private final Assignment cFieldAssignment_1_0_1 = (Assignment) cGroup_1_0
                .eContents().get(1);
        private final RuleCall cFieldRecordFieldVarMacroParserRuleCall_1_0_1_0 = (RuleCall) cFieldAssignment_1_0_1
                .eContents().get(0);
        private final Assignment cTupleAssignment_1_1 = (Assignment) cAlternatives_1
                .eContents().get(1);
        private final RuleCall cTupleRecordTupleParserRuleCall_1_1_0 = (RuleCall) cTupleAssignment_1_1
                .eContents().get(0);

        // RecordExpr:
        // rec=RecordVarMacro ("." field=RecordFieldVarMacro |
        // tuple=RecordTuple);
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // rec=RecordVarMacro ("." field=RecordFieldVarMacro |
        // tuple=RecordTuple)
        public Group getGroup() {
            return cGroup;
        }

        // rec=RecordVarMacro
        public Assignment getRecAssignment_0() {
            return cRecAssignment_0;
        }

        // RecordVarMacro
        public RuleCall getRecRecordVarMacroParserRuleCall_0_0() {
            return cRecRecordVarMacroParserRuleCall_0_0;
        }

        // "." field=RecordFieldVarMacro | tuple=RecordTuple
        public Alternatives getAlternatives_1() {
            return cAlternatives_1;
        }

        // "." field=RecordFieldVarMacro
        public Group getGroup_1_0() {
            return cGroup_1_0;
        }

        // "."
        public Keyword getFullStopKeyword_1_0_0() {
            return cFullStopKeyword_1_0_0;
        }

        // field=RecordFieldVarMacro
        public Assignment getFieldAssignment_1_0_1() {
            return cFieldAssignment_1_0_1;
        }

        // RecordFieldVarMacro
        public RuleCall getFieldRecordFieldVarMacroParserRuleCall_1_0_1_0() {
            return cFieldRecordFieldVarMacroParserRuleCall_1_0_1_0;
        }

        // tuple=RecordTuple
        public Assignment getTupleAssignment_1_1() {
            return cTupleAssignment_1_1;
        }

        // RecordTuple
        public RuleCall getTupleRecordTupleParserRuleCall_1_1_0() {
            return cTupleRecordTupleParserRuleCall_1_1_0;
        }
    }

    public class QueryExprElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "QueryExpr");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Action cQueryExprAction_0 = (Action) cGroup.eContents()
                .get(0);
        private final Keyword cQueryKeyword_1 = (Keyword) cGroup.eContents()
                .get(1);

        // // NYI
        // QueryExpr:
        // {QueryExpr} "query";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // {QueryExpr} "query"
        public Group getGroup() {
            return cGroup;
        }

        // {QueryExpr}
        public Action getQueryExprAction_0() {
            return cQueryExprAction_0;
        }

        // "query"
        public Keyword getQueryKeyword_1() {
            return cQueryKeyword_1;
        }
    }

    public class CondExprElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "CondExpr");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Action cCondExprAction_0 = (Action) cGroup.eContents()
                .get(0);
        private final Keyword cCondKeyword_1 = (Keyword) cGroup.eContents()
                .get(1);

        // // NYI
        // CondExpr:
        // {CondExpr} "cond";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // {CondExpr} "cond"
        public Group getGroup() {
            return cGroup;
        }

        // {CondExpr}
        public Action getCondExprAction_0() {
            return cCondExprAction_0;
        }

        // "cond"
        public Keyword getCondKeyword_1() {
            return cCondKeyword_1;
        }
    }

    public class LetExprElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "LetExpr");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Action cLetExprAction_0 = (Action) cGroup.eContents()
                .get(0);
        private final Keyword cLetKeyword_1 = (Keyword) cGroup.eContents().get(
                1);

        // // NYI
        // LetExpr:
        // {LetExpr} "let";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // {LetExpr} "let"
        public Group getGroup() {
            return cGroup;
        }

        // {LetExpr}
        public Action getLetExprAction_0() {
            return cLetExprAction_0;
        }

        // "let"
        public Keyword getLetKeyword_1() {
            return cLetKeyword_1;
        }
    }

    public class RecordTupleElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "RecordTuple");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Action cRecordTupleAction_0 = (Action) cGroup.eContents()
                .get(0);
        private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword) cGroup
                .eContents().get(1);
        private final Group cGroup_2 = (Group) cGroup.eContents().get(2);
        private final Assignment cFieldsAssignment_2_0 = (Assignment) cGroup_2
                .eContents().get(0);
        private final RuleCall cFieldsRecordFieldExprParserRuleCall_2_0_0 = (RuleCall) cFieldsAssignment_2_0
                .eContents().get(0);
        private final Group cGroup_2_1 = (Group) cGroup_2.eContents().get(1);
        private final Keyword cCommaKeyword_2_1_0 = (Keyword) cGroup_2_1
                .eContents().get(0);
        private final Assignment cFieldsAssignment_2_1_1 = (Assignment) cGroup_2_1
                .eContents().get(1);
        private final RuleCall cFieldsRecordFieldExprParserRuleCall_2_1_1_0 = (RuleCall) cFieldsAssignment_2_1_1
                .eContents().get(0);
        private final Keyword cRightCurlyBracketKeyword_3 = (Keyword) cGroup
                .eContents().get(3);

        // RecordTuple:
        // {RecordTuple} "{" (fields+=RecordFieldExpr (","
        // fields+=RecordFieldExpr)*)? "}";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // {RecordTuple} "{" (fields+=RecordFieldExpr (","
        // fields+=RecordFieldExpr)*)? "}"
        public Group getGroup() {
            return cGroup;
        }

        // {RecordTuple}
        public Action getRecordTupleAction_0() {
            return cRecordTupleAction_0;
        }

        // "{"
        public Keyword getLeftCurlyBracketKeyword_1() {
            return cLeftCurlyBracketKeyword_1;
        }

        // (fields+=RecordFieldExpr ("," fields+=RecordFieldExpr)*)?
        public Group getGroup_2() {
            return cGroup_2;
        }

        // fields+=RecordFieldExpr
        public Assignment getFieldsAssignment_2_0() {
            return cFieldsAssignment_2_0;
        }

        // RecordFieldExpr
        public RuleCall getFieldsRecordFieldExprParserRuleCall_2_0_0() {
            return cFieldsRecordFieldExprParserRuleCall_2_0_0;
        }

        // ("," fields+=RecordFieldExpr)*
        public Group getGroup_2_1() {
            return cGroup_2_1;
        }

        // ","
        public Keyword getCommaKeyword_2_1_0() {
            return cCommaKeyword_2_1_0;
        }

        // fields+=RecordFieldExpr
        public Assignment getFieldsAssignment_2_1_1() {
            return cFieldsAssignment_2_1_1;
        }

        // RecordFieldExpr
        public RuleCall getFieldsRecordFieldExprParserRuleCall_2_1_1_0() {
            return cFieldsRecordFieldExprParserRuleCall_2_1_1_0;
        }

        // "}"
        public Keyword getRightCurlyBracketKeyword_3() {
            return cRightCurlyBracketKeyword_3;
        }
    }

    public class RecordFieldExprElements extends
            AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "RecordFieldExpr");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cRefAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final RuleCall cRefRecordFieldVarMacroParserRuleCall_0_0 = (RuleCall) cRefAssignment_0
                .eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Keyword cEqualsSignKeyword_1_0 = (Keyword) cGroup_1
                .eContents().get(0);
        private final Assignment cValueAssignment_1_1 = (Assignment) cGroup_1
                .eContents().get(1);
        private final RuleCall cValueExpressionParserRuleCall_1_1_0 = (RuleCall) cValueAssignment_1_1
                .eContents().get(0);
        private final Group cGroup_2 = (Group) cGroup.eContents().get(2);
        private final Keyword cColonColonKeyword_2_0 = (Keyword) cGroup_2
                .eContents().get(0);
        private final Assignment cTypeAssignment_2_1 = (Assignment) cGroup_2
                .eContents().get(1);
        private final RuleCall cTypeTopTypeParserRuleCall_2_1_0 = (RuleCall) cTypeAssignment_2_1
                .eContents().get(0);

        // RecordFieldExpr:
        // ref=RecordFieldVarMacro ("=" value=Expression)? ("::" type=TopType)?;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // ref=RecordFieldVarMacro ("=" value=Expression)? ("::" type=TopType)?
        public Group getGroup() {
            return cGroup;
        }

        // ref=RecordFieldVarMacro
        public Assignment getRefAssignment_0() {
            return cRefAssignment_0;
        }

        // RecordFieldVarMacro
        public RuleCall getRefRecordFieldVarMacroParserRuleCall_0_0() {
            return cRefRecordFieldVarMacroParserRuleCall_0_0;
        }

        // ("=" value=Expression)?
        public Group getGroup_1() {
            return cGroup_1;
        }

        // "="
        public Keyword getEqualsSignKeyword_1_0() {
            return cEqualsSignKeyword_1_0;
        }

        // value=Expression
        public Assignment getValueAssignment_1_1() {
            return cValueAssignment_1_1;
        }

        // Expression
        public RuleCall getValueExpressionParserRuleCall_1_1_0() {
            return cValueExpressionParserRuleCall_1_1_0;
        }

        // ("::" type=TopType)?
        public Group getGroup_2() {
            return cGroup_2;
        }

        // "::"
        public Keyword getColonColonKeyword_2_0() {
            return cColonColonKeyword_2_0;
        }

        // type=TopType
        public Assignment getTypeAssignment_2_1() {
            return cTypeAssignment_2_1;
        }

        // TopType
        public RuleCall getTypeTopTypeParserRuleCall_2_1_0() {
            return cTypeTopTypeParserRuleCall_2_1_0;
        }
    }

    public class LiteralExpressionNoNumberElements extends
            AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "LiteralExpressionNoNumber");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final Group cGroup_0 = (Group) cAlternatives.eContents().get(0);
        private final Action cAtomAction_0_0 = (Action) cGroup_0.eContents()
                .get(0);
        private final Assignment cValueAssignment_0_1 = (Assignment) cGroup_0
                .eContents().get(1);
        private final RuleCall cValueNAMEParserRuleCall_0_1_0 = (RuleCall) cValueAssignment_0_1
                .eContents().get(0);
        private final RuleCall cVariableLiteralParserRuleCall_1 = (RuleCall) cAlternatives
                .eContents().get(1);
        private final Group cGroup_2 = (Group) cAlternatives.eContents().get(2);
        private final Action cErlCharAction_2_0 = (Action) cGroup_2.eContents()
                .get(0);
        private final Assignment cValueAssignment_2_1 = (Assignment) cGroup_2
                .eContents().get(1);
        private final RuleCall cValueCHARTerminalRuleCall_2_1_0 = (RuleCall) cValueAssignment_2_1
                .eContents().get(0);
        private final RuleCall cMacroLiteralParserRuleCall_3 = (RuleCall) cAlternatives
                .eContents().get(3);
        private final RuleCall cStringLiteralParserRuleCall_4 = (RuleCall) cAlternatives
                .eContents().get(4);

        // LiteralExpressionNoNumber returns Expression:
        // {Atom} value=NAME | VariableLiteral | {ErlChar} value=CHAR |
        // MacroLiteral | StringLiteral;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // {Atom} value=NAME | VariableLiteral | {ErlChar} value=CHAR |
        // MacroLiteral | StringLiteral
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // {Atom} value=NAME
        public Group getGroup_0() {
            return cGroup_0;
        }

        // {Atom}
        public Action getAtomAction_0_0() {
            return cAtomAction_0_0;
        }

        // value=NAME
        public Assignment getValueAssignment_0_1() {
            return cValueAssignment_0_1;
        }

        // NAME
        public RuleCall getValueNAMEParserRuleCall_0_1_0() {
            return cValueNAMEParserRuleCall_0_1_0;
        }

        // VariableLiteral
        public RuleCall getVariableLiteralParserRuleCall_1() {
            return cVariableLiteralParserRuleCall_1;
        }

        // {ErlChar} value=CHAR
        public Group getGroup_2() {
            return cGroup_2;
        }

        // {ErlChar}
        public Action getErlCharAction_2_0() {
            return cErlCharAction_2_0;
        }

        // value=CHAR
        public Assignment getValueAssignment_2_1() {
            return cValueAssignment_2_1;
        }

        // CHAR
        public RuleCall getValueCHARTerminalRuleCall_2_1_0() {
            return cValueCHARTerminalRuleCall_2_1_0;
        }

        // MacroLiteral
        public RuleCall getMacroLiteralParserRuleCall_3() {
            return cMacroLiteralParserRuleCall_3;
        }

        // StringLiteral
        public RuleCall getStringLiteralParserRuleCall_4() {
            return cStringLiteralParserRuleCall_4;
        }
    }

    public class ModuleRefElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "ModuleRef");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Action cAtomRefAction_0 = (Action) cGroup.eContents()
                .get(0);
        private final Assignment cValueAssignment_1 = (Assignment) cGroup
                .eContents().get(1);
        private final CrossReference cValueModuleCrossReference_1_0 = (CrossReference) cValueAssignment_1
                .eContents().get(0);
        private final RuleCall cValueModuleNAMEParserRuleCall_1_0_1 = (RuleCall) cValueModuleCrossReference_1_0
                .eContents().get(1);

        // ModuleRef returns Expression:
        // {AtomRef} value=[Module|NAME];
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // {AtomRef} value=[Module|NAME]
        public Group getGroup() {
            return cGroup;
        }

        // {AtomRef}
        public Action getAtomRefAction_0() {
            return cAtomRefAction_0;
        }

        // value=[Module|NAME]
        public Assignment getValueAssignment_1() {
            return cValueAssignment_1;
        }

        // [Module|NAME]
        public CrossReference getValueModuleCrossReference_1_0() {
            return cValueModuleCrossReference_1_0;
        }

        // NAME
        public RuleCall getValueModuleNAMEParserRuleCall_1_0_1() {
            return cValueModuleNAMEParserRuleCall_1_0_1;
        }
    }

    public class FunctionRefElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "FunctionRef");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Action cAtomRefAction_0 = (Action) cGroup.eContents()
                .get(0);
        private final Assignment cValueAssignment_1 = (Assignment) cGroup
                .eContents().get(1);
        private final CrossReference cValueFunctionCrossReference_1_0 = (CrossReference) cValueAssignment_1
                .eContents().get(0);
        private final RuleCall cValueFunctionNAMEParserRuleCall_1_0_1 = (RuleCall) cValueFunctionCrossReference_1_0
                .eContents().get(1);

        // FunctionRef returns Expression:
        // {AtomRef} value=[Function|NAME];
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // {AtomRef} value=[Function|NAME]
        public Group getGroup() {
            return cGroup;
        }

        // {AtomRef}
        public Action getAtomRefAction_0() {
            return cAtomRefAction_0;
        }

        // value=[Function|NAME]
        public Assignment getValueAssignment_1() {
            return cValueAssignment_1;
        }

        // [Function|NAME]
        public CrossReference getValueFunctionCrossReference_1_0() {
            return cValueFunctionCrossReference_1_0;
        }

        // NAME
        public RuleCall getValueFunctionNAMEParserRuleCall_1_0_1() {
            return cValueFunctionNAMEParserRuleCall_1_0_1;
        }
    }

    public class RecordRefElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "RecordRef");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Action cAtomRefAction_0 = (Action) cGroup.eContents()
                .get(0);
        private final Assignment cValueAssignment_1 = (Assignment) cGroup
                .eContents().get(1);
        private final CrossReference cValueRecordAttributeCrossReference_1_0 = (CrossReference) cValueAssignment_1
                .eContents().get(0);
        private final RuleCall cValueRecordAttributeNAMEParserRuleCall_1_0_1 = (RuleCall) cValueRecordAttributeCrossReference_1_0
                .eContents().get(1);

        // RecordRef returns Expression:
        // {AtomRef} value=[RecordAttribute|NAME];
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // {AtomRef} value=[RecordAttribute|NAME]
        public Group getGroup() {
            return cGroup;
        }

        // {AtomRef}
        public Action getAtomRefAction_0() {
            return cAtomRefAction_0;
        }

        // value=[RecordAttribute|NAME]
        public Assignment getValueAssignment_1() {
            return cValueAssignment_1;
        }

        // [RecordAttribute|NAME]
        public CrossReference getValueRecordAttributeCrossReference_1_0() {
            return cValueRecordAttributeCrossReference_1_0;
        }

        // NAME
        public RuleCall getValueRecordAttributeNAMEParserRuleCall_1_0_1() {
            return cValueRecordAttributeNAMEParserRuleCall_1_0_1;
        }
    }

    public class RecordFieldRefElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "RecordFieldRef");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Action cAtomRefAction_0 = (Action) cGroup.eContents()
                .get(0);
        private final Assignment cValueAssignment_1 = (Assignment) cGroup
                .eContents().get(1);
        private final CrossReference cValueRecordFieldDefCrossReference_1_0 = (CrossReference) cValueAssignment_1
                .eContents().get(0);
        private final RuleCall cValueRecordFieldDefNAMEParserRuleCall_1_0_1 = (RuleCall) cValueRecordFieldDefCrossReference_1_0
                .eContents().get(1);

        // RecordFieldRef returns Expression:
        // {AtomRef} value=[RecordFieldDef|NAME];
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // {AtomRef} value=[RecordFieldDef|NAME]
        public Group getGroup() {
            return cGroup;
        }

        // {AtomRef}
        public Action getAtomRefAction_0() {
            return cAtomRefAction_0;
        }

        // value=[RecordFieldDef|NAME]
        public Assignment getValueAssignment_1() {
            return cValueAssignment_1;
        }

        // [RecordFieldDef|NAME]
        public CrossReference getValueRecordFieldDefCrossReference_1_0() {
            return cValueRecordFieldDefCrossReference_1_0;
        }

        // NAME
        public RuleCall getValueRecordFieldDefNAMEParserRuleCall_1_0_1() {
            return cValueRecordFieldDefNAMEParserRuleCall_1_0_1;
        }
    }

    public class TypeRefElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "TypeRef");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Action cAtomRefAction_0 = (Action) cGroup.eContents()
                .get(0);
        private final Assignment cValueAssignment_1 = (Assignment) cGroup
                .eContents().get(1);
        private final CrossReference cValueTypeAttributeCrossReference_1_0 = (CrossReference) cValueAssignment_1
                .eContents().get(0);
        private final RuleCall cValueTypeAttributeNAMEParserRuleCall_1_0_1 = (RuleCall) cValueTypeAttributeCrossReference_1_0
                .eContents().get(1);

        // TypeRef returns Expression:
        // {AtomRef} value=[TypeAttribute|NAME];
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // {AtomRef} value=[TypeAttribute|NAME]
        public Group getGroup() {
            return cGroup;
        }

        // {AtomRef}
        public Action getAtomRefAction_0() {
            return cAtomRefAction_0;
        }

        // value=[TypeAttribute|NAME]
        public Assignment getValueAssignment_1() {
            return cValueAssignment_1;
        }

        // [TypeAttribute|NAME]
        public CrossReference getValueTypeAttributeCrossReference_1_0() {
            return cValueTypeAttributeCrossReference_1_0;
        }

        // NAME
        public RuleCall getValueTypeAttributeNAMEParserRuleCall_1_0_1() {
            return cValueTypeAttributeNAMEParserRuleCall_1_0_1;
        }
    }

    public class MacroLiteralElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "MacroLiteral");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Action cMacroAction_0 = (Action) cGroup.eContents()
                .get(0);
        private final Assignment cValueAssignment_1 = (Assignment) cGroup
                .eContents().get(1);
        private final CrossReference cValueDefineAttributeCrossReference_1_0 = (CrossReference) cValueAssignment_1
                .eContents().get(0);
        private final RuleCall cValueDefineAttributeMACROParserRuleCall_1_0_1 = (RuleCall) cValueDefineAttributeCrossReference_1_0
                .eContents().get(1);

        // MacroLiteral returns Expression:
        // {Macro} value=[DefineAttribute|MACRO];
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // {Macro} value=[DefineAttribute|MACRO]
        public Group getGroup() {
            return cGroup;
        }

        // {Macro}
        public Action getMacroAction_0() {
            return cMacroAction_0;
        }

        // value=[DefineAttribute|MACRO]
        public Assignment getValueAssignment_1() {
            return cValueAssignment_1;
        }

        // [DefineAttribute|MACRO]
        public CrossReference getValueDefineAttributeCrossReference_1_0() {
            return cValueDefineAttributeCrossReference_1_0;
        }

        // MACRO
        public RuleCall getValueDefineAttributeMACROParserRuleCall_1_0_1() {
            return cValueDefineAttributeMACROParserRuleCall_1_0_1;
        }
    }

    public class MacroRefElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "MacroRef");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Action cMacroAction_0 = (Action) cGroup.eContents()
                .get(0);
        private final Assignment cValueAssignment_1 = (Assignment) cGroup
                .eContents().get(1);
        private final CrossReference cValueDefineAttributeCrossReference_1_0 = (CrossReference) cValueAssignment_1
                .eContents().get(0);
        private final RuleCall cValueDefineAttributeNAMEVARParserRuleCall_1_0_1 = (RuleCall) cValueDefineAttributeCrossReference_1_0
                .eContents().get(1);

        // MacroRef returns Expression:
        // {Macro} value=[DefineAttribute|NAMEVAR];
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // {Macro} value=[DefineAttribute|NAMEVAR]
        public Group getGroup() {
            return cGroup;
        }

        // {Macro}
        public Action getMacroAction_0() {
            return cMacroAction_0;
        }

        // value=[DefineAttribute|NAMEVAR]
        public Assignment getValueAssignment_1() {
            return cValueAssignment_1;
        }

        // [DefineAttribute|NAMEVAR]
        public CrossReference getValueDefineAttributeCrossReference_1_0() {
            return cValueDefineAttributeCrossReference_1_0;
        }

        // NAMEVAR
        public RuleCall getValueDefineAttributeNAMEVARParserRuleCall_1_0_1() {
            return cValueDefineAttributeNAMEVARParserRuleCall_1_0_1;
        }
    }

    public class VariableLiteralElements extends
            AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "VariableLiteral");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Action cVariableAction_0 = (Action) cGroup.eContents()
                .get(0);
        private final Assignment cValueAssignment_1 = (Assignment) cGroup
                .eContents().get(1);
        private final CrossReference cValueExpressionCrossReference_1_0 = (CrossReference) cValueAssignment_1
                .eContents().get(0);
        private final RuleCall cValueExpressionVARIABLETerminalRuleCall_1_0_1 = (RuleCall) cValueExpressionCrossReference_1_0
                .eContents().get(1);

        // VariableLiteral returns Expression:
        // {Variable} value=[Expression|VARIABLE];
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // {Variable} value=[Expression|VARIABLE]
        public Group getGroup() {
            return cGroup;
        }

        // {Variable}
        public Action getVariableAction_0() {
            return cVariableAction_0;
        }

        // value=[Expression|VARIABLE]
        public Assignment getValueAssignment_1() {
            return cValueAssignment_1;
        }

        // [Expression|VARIABLE]
        public CrossReference getValueExpressionCrossReference_1_0() {
            return cValueExpressionCrossReference_1_0;
        }

        // VARIABLE
        public RuleCall getValueExpressionVARIABLETerminalRuleCall_1_0_1() {
            return cValueExpressionVARIABLETerminalRuleCall_1_0_1;
        }
    }

    public class StringLiteralElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "StringLiteral");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cPartsAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final RuleCall cPartsStringLiteralLiteralParserRuleCall_0_0 = (RuleCall) cPartsAssignment_0
                .eContents().get(0);
        private final Assignment cPartsAssignment_1 = (Assignment) cGroup
                .eContents().get(1);
        private final RuleCall cPartsStringLiteralPartParserRuleCall_1_0 = (RuleCall) cPartsAssignment_1
                .eContents().get(0);

        // StringLiteral returns Expression:
        // parts+=StringLiteralLiteral parts+=StringLiteralPart*;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // parts+=StringLiteralLiteral parts+=StringLiteralPart*
        public Group getGroup() {
            return cGroup;
        }

        // parts+=StringLiteralLiteral
        public Assignment getPartsAssignment_0() {
            return cPartsAssignment_0;
        }

        // StringLiteralLiteral
        public RuleCall getPartsStringLiteralLiteralParserRuleCall_0_0() {
            return cPartsStringLiteralLiteralParserRuleCall_0_0;
        }

        // parts+=StringLiteralPart*
        public Assignment getPartsAssignment_1() {
            return cPartsAssignment_1;
        }

        // StringLiteralPart
        public RuleCall getPartsStringLiteralPartParserRuleCall_1_0() {
            return cPartsStringLiteralPartParserRuleCall_1_0;
        }
    }

    public class StringLiteralPartElements extends
            AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "StringLiteralPart");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final RuleCall cStringLiteralLiteralParserRuleCall_0 = (RuleCall) cAlternatives
                .eContents().get(0);
        private final Assignment cMacroAssignment_1 = (Assignment) cAlternatives
                .eContents().get(1);
        private final RuleCall cMacroMacroCallParserRuleCall_1_0 = (RuleCall) cMacroAssignment_1
                .eContents().get(0);

        // StringLiteralPart:
        // StringLiteralLiteral | macro=MacroCall;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // StringLiteralLiteral | macro=MacroCall
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // StringLiteralLiteral
        public RuleCall getStringLiteralLiteralParserRuleCall_0() {
            return cStringLiteralLiteralParserRuleCall_0;
        }

        // macro=MacroCall
        public Assignment getMacroAssignment_1() {
            return cMacroAssignment_1;
        }

        // MacroCall
        public RuleCall getMacroMacroCallParserRuleCall_1_0() {
            return cMacroMacroCallParserRuleCall_1_0;
        }
    }

    public class StringLiteralLiteralElements extends
            AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "StringLiteralLiteral");
        private final Assignment cStringAssignment = (Assignment) rule
                .eContents().get(1);
        private final RuleCall cStringSTRINGTerminalRuleCall_0 = (RuleCall) cStringAssignment
                .eContents().get(0);

        // StringLiteralLiteral returns StringLiteralPart:
        // string=STRING;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // string=STRING
        public Assignment getStringAssignment() {
            return cStringAssignment;
        }

        // STRING
        public RuleCall getStringSTRINGTerminalRuleCall_0() {
            return cStringSTRINGTerminalRuleCall_0;
        }
    }

    public class LiteralExpressionElements extends
            AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "LiteralExpression");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final RuleCall cLiteralExpressionNoNumberParserRuleCall_0 = (RuleCall) cAlternatives
                .eContents().get(0);
        private final RuleCall cIntegerLiteralParserRuleCall_1 = (RuleCall) cAlternatives
                .eContents().get(1);
        private final Group cGroup_2 = (Group) cAlternatives.eContents().get(2);
        private final Action cErlFloatAction_2_0 = (Action) cGroup_2
                .eContents().get(0);
        private final Assignment cValueAssignment_2_1 = (Assignment) cGroup_2
                .eContents().get(1);
        private final RuleCall cValueFLOATParserRuleCall_2_1_0 = (RuleCall) cValueAssignment_2_1
                .eContents().get(0);

        // LiteralExpression returns Expression:
        // LiteralExpressionNoNumber | IntegerLiteral | {ErlFloat} value=FLOAT;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // LiteralExpressionNoNumber | IntegerLiteral | {ErlFloat} value=FLOAT
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // LiteralExpressionNoNumber
        public RuleCall getLiteralExpressionNoNumberParserRuleCall_0() {
            return cLiteralExpressionNoNumberParserRuleCall_0;
        }

        // IntegerLiteral
        public RuleCall getIntegerLiteralParserRuleCall_1() {
            return cIntegerLiteralParserRuleCall_1;
        }

        // {ErlFloat} value=FLOAT
        public Group getGroup_2() {
            return cGroup_2;
        }

        // {ErlFloat}
        public Action getErlFloatAction_2_0() {
            return cErlFloatAction_2_0;
        }

        // value=FLOAT
        public Assignment getValueAssignment_2_1() {
            return cValueAssignment_2_1;
        }

        // FLOAT
        public RuleCall getValueFLOATParserRuleCall_2_1_0() {
            return cValueFLOATParserRuleCall_2_1_0;
        }
    }

    public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "IntegerLiteral");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Action cErlIntegerAction_0 = (Action) cGroup.eContents()
                .get(0);
        private final Assignment cValueAssignment_1 = (Assignment) cGroup
                .eContents().get(1);
        private final RuleCall cValueINTEGERParserRuleCall_1_0 = (RuleCall) cValueAssignment_1
                .eContents().get(0);

        // IntegerLiteral returns Expression:
        // {ErlInteger} value=INTEGER;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // {ErlInteger} value=INTEGER
        public Group getGroup() {
            return cGroup;
        }

        // {ErlInteger}
        public Action getErlIntegerAction_0() {
            return cErlIntegerAction_0;
        }

        // value=INTEGER
        public Assignment getValueAssignment_1() {
            return cValueAssignment_1;
        }

        // INTEGER
        public RuleCall getValueINTEGERParserRuleCall_1_0() {
            return cValueINTEGERParserRuleCall_1_0;
        }
    }

    public class PatternExpressionElements extends
            AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "PatternExpression");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cTermExpressionParserRuleCall_0 = (RuleCall) cGroup
                .eContents().get(0);
        private final Alternatives cAlternatives_1 = (Alternatives) cGroup
                .eContents().get(1);
        private final Group cGroup_1_0 = (Group) cAlternatives_1.eContents()
                .get(0);
        private final Action cMatchExprOpLeftAction_1_0_0 = (Action) cGroup_1_0
                .eContents().get(0);
        private final Assignment cOpAssignment_1_0_1 = (Assignment) cGroup_1_0
                .eContents().get(1);
        private final Keyword cOpEqualsSignKeyword_1_0_1_0 = (Keyword) cOpAssignment_1_0_1
                .eContents().get(0);
        private final Assignment cOpRightAssignment_1_0_2 = (Assignment) cGroup_1_0
                .eContents().get(2);
        private final RuleCall cOpRightTermExpressionParserRuleCall_1_0_2_0 = (RuleCall) cOpRightAssignment_1_0_2
                .eContents().get(0);
        private final Group cGroup_1_1 = (Group) cAlternatives_1.eContents()
                .get(1);
        private final Action cFunCallTargetAction_1_1_0 = (Action) cGroup_1_1
                .eContents().get(0);
        private final Keyword cLeftParenthesisKeyword_1_1_1 = (Keyword) cGroup_1_1
                .eContents().get(1);
        private final Assignment cArgsAssignment_1_1_2 = (Assignment) cGroup_1_1
                .eContents().get(2);
        private final RuleCall cArgsExpressionsParserRuleCall_1_1_2_0 = (RuleCall) cArgsAssignment_1_1_2
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_1_1_3 = (Keyword) cGroup_1_1
                .eContents().get(3);

        // PatternExpression returns Expression:
        // TermExpression (({MatchExpr.opLeft=current} op="="
        // opRight=TermExpression)+ | {FunCall.target=current} "("
        // args=Expressions? ")")?;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // TermExpression (({MatchExpr.opLeft=current} op="="
        // opRight=TermExpression)+ | {FunCall.target=current} "("
        // args=Expressions? ")")?
        public Group getGroup() {
            return cGroup;
        }

        // TermExpression
        public RuleCall getTermExpressionParserRuleCall_0() {
            return cTermExpressionParserRuleCall_0;
        }

        // (({MatchExpr.opLeft=current} op="=" opRight=TermExpression)+ |
        // {FunCall.target=current} "(" args=Expressions? ")")?
        public Alternatives getAlternatives_1() {
            return cAlternatives_1;
        }

        // ({MatchExpr.opLeft=current} op="=" opRight=TermExpression)+
        public Group getGroup_1_0() {
            return cGroup_1_0;
        }

        // {MatchExpr.opLeft=current}
        public Action getMatchExprOpLeftAction_1_0_0() {
            return cMatchExprOpLeftAction_1_0_0;
        }

        // op="="
        public Assignment getOpAssignment_1_0_1() {
            return cOpAssignment_1_0_1;
        }

        // "="
        public Keyword getOpEqualsSignKeyword_1_0_1_0() {
            return cOpEqualsSignKeyword_1_0_1_0;
        }

        // opRight=TermExpression
        public Assignment getOpRightAssignment_1_0_2() {
            return cOpRightAssignment_1_0_2;
        }

        // TermExpression
        public RuleCall getOpRightTermExpressionParserRuleCall_1_0_2_0() {
            return cOpRightTermExpressionParserRuleCall_1_0_2_0;
        }

        // {FunCall.target=current} "(" args=Expressions? ")"
        public Group getGroup_1_1() {
            return cGroup_1_1;
        }

        // {FunCall.target=current}
        public Action getFunCallTargetAction_1_1_0() {
            return cFunCallTargetAction_1_1_0;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_1_1_1() {
            return cLeftParenthesisKeyword_1_1_1;
        }

        // args=Expressions?
        public Assignment getArgsAssignment_1_1_2() {
            return cArgsAssignment_1_1_2;
        }

        // Expressions
        public RuleCall getArgsExpressionsParserRuleCall_1_1_2_0() {
            return cArgsExpressionsParserRuleCall_1_1_2_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_1_1_3() {
            return cRightParenthesisKeyword_1_1_3;
        }
    }

    public class IfExprElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "IfExpr");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Keyword cIfKeyword_0 = (Keyword) cGroup.eContents()
                .get(0);
        private final Assignment cClausesAssignment_1 = (Assignment) cGroup
                .eContents().get(1);
        private final RuleCall cClausesIfClauseParserRuleCall_1_0 = (RuleCall) cClausesAssignment_1
                .eContents().get(0);
        private final Group cGroup_2 = (Group) cGroup.eContents().get(2);
        private final Keyword cSemicolonKeyword_2_0 = (Keyword) cGroup_2
                .eContents().get(0);
        private final Assignment cClausesAssignment_2_1 = (Assignment) cGroup_2
                .eContents().get(1);
        private final RuleCall cClausesIfClauseParserRuleCall_2_1_0 = (RuleCall) cClausesAssignment_2_1
                .eContents().get(0);
        private final Keyword cEndKeyword_3 = (Keyword) cGroup.eContents().get(
                3);

        // IfExpr:
        // "if" clauses+=IfClause (";" clauses+=IfClause)* "end";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // "if" clauses+=IfClause (";" clauses+=IfClause)* "end"
        public Group getGroup() {
            return cGroup;
        }

        // "if"
        public Keyword getIfKeyword_0() {
            return cIfKeyword_0;
        }

        // clauses+=IfClause
        public Assignment getClausesAssignment_1() {
            return cClausesAssignment_1;
        }

        // IfClause
        public RuleCall getClausesIfClauseParserRuleCall_1_0() {
            return cClausesIfClauseParserRuleCall_1_0;
        }

        // (";" clauses+=IfClause)*
        public Group getGroup_2() {
            return cGroup_2;
        }

        // ";"
        public Keyword getSemicolonKeyword_2_0() {
            return cSemicolonKeyword_2_0;
        }

        // clauses+=IfClause
        public Assignment getClausesAssignment_2_1() {
            return cClausesAssignment_2_1;
        }

        // IfClause
        public RuleCall getClausesIfClauseParserRuleCall_2_1_0() {
            return cClausesIfClauseParserRuleCall_2_1_0;
        }

        // "end"
        public Keyword getEndKeyword_3() {
            return cEndKeyword_3;
        }
    }

    public class IfClauseElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "IfClause");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cGuardAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final RuleCall cGuardGuardParserRuleCall_0_0 = (RuleCall) cGuardAssignment_0
                .eContents().get(0);
        private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword) cGroup
                .eContents().get(1);
        private final Assignment cBodyAssignment_2 = (Assignment) cGroup
                .eContents().get(2);
        private final RuleCall cBodyExpressionsParserRuleCall_2_0 = (RuleCall) cBodyAssignment_2
                .eContents().get(0);

        // IfClause:
        // guard=Guard "->" body=Expressions;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // guard=Guard "->" body=Expressions
        public Group getGroup() {
            return cGroup;
        }

        // guard=Guard
        public Assignment getGuardAssignment_0() {
            return cGuardAssignment_0;
        }

        // Guard
        public RuleCall getGuardGuardParserRuleCall_0_0() {
            return cGuardGuardParserRuleCall_0_0;
        }

        // "->"
        public Keyword getHyphenMinusGreaterThanSignKeyword_1() {
            return cHyphenMinusGreaterThanSignKeyword_1;
        }

        // body=Expressions
        public Assignment getBodyAssignment_2() {
            return cBodyAssignment_2;
        }

        // Expressions
        public RuleCall getBodyExpressionsParserRuleCall_2_0() {
            return cBodyExpressionsParserRuleCall_2_0;
        }
    }

    public class CaseExprElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "CaseExpr");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Keyword cCaseKeyword_0 = (Keyword) cGroup.eContents()
                .get(0);
        private final Assignment cExprAssignment_1 = (Assignment) cGroup
                .eContents().get(1);
        private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall) cExprAssignment_1
                .eContents().get(0);
        private final Keyword cOfKeyword_2 = (Keyword) cGroup.eContents()
                .get(2);
        private final Assignment cClausesAssignment_3 = (Assignment) cGroup
                .eContents().get(3);
        private final RuleCall cClausesCrClauseParserRuleCall_3_0 = (RuleCall) cClausesAssignment_3
                .eContents().get(0);
        private final Group cGroup_4 = (Group) cGroup.eContents().get(4);
        private final Keyword cSemicolonKeyword_4_0 = (Keyword) cGroup_4
                .eContents().get(0);
        private final Assignment cClausesAssignment_4_1 = (Assignment) cGroup_4
                .eContents().get(1);
        private final RuleCall cClausesCrClauseParserRuleCall_4_1_0 = (RuleCall) cClausesAssignment_4_1
                .eContents().get(0);
        private final Keyword cEndKeyword_5 = (Keyword) cGroup.eContents().get(
                5);

        // CaseExpr:
        // "case" expr=Expression "of" clauses+=CrClause (";"
        // clauses+=CrClause)* "end";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // "case" expr=Expression "of" clauses+=CrClause (";"
        // clauses+=CrClause)* "end"
        public Group getGroup() {
            return cGroup;
        }

        // "case"
        public Keyword getCaseKeyword_0() {
            return cCaseKeyword_0;
        }

        // expr=Expression
        public Assignment getExprAssignment_1() {
            return cExprAssignment_1;
        }

        // Expression
        public RuleCall getExprExpressionParserRuleCall_1_0() {
            return cExprExpressionParserRuleCall_1_0;
        }

        // "of"
        public Keyword getOfKeyword_2() {
            return cOfKeyword_2;
        }

        // clauses+=CrClause
        public Assignment getClausesAssignment_3() {
            return cClausesAssignment_3;
        }

        // CrClause
        public RuleCall getClausesCrClauseParserRuleCall_3_0() {
            return cClausesCrClauseParserRuleCall_3_0;
        }

        // (";" clauses+=CrClause)*
        public Group getGroup_4() {
            return cGroup_4;
        }

        // ";"
        public Keyword getSemicolonKeyword_4_0() {
            return cSemicolonKeyword_4_0;
        }

        // clauses+=CrClause
        public Assignment getClausesAssignment_4_1() {
            return cClausesAssignment_4_1;
        }

        // CrClause
        public RuleCall getClausesCrClauseParserRuleCall_4_1_0() {
            return cClausesCrClauseParserRuleCall_4_1_0;
        }

        // "end"
        public Keyword getEndKeyword_5() {
            return cEndKeyword_5;
        }
    }

    public class CrClauseElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "CrClause");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cExprAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final RuleCall cExprExpressionParserRuleCall_0_0 = (RuleCall) cExprAssignment_0
                .eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Keyword cWhenKeyword_1_0 = (Keyword) cGroup_1.eContents()
                .get(0);
        private final Assignment cGuardAssignment_1_1 = (Assignment) cGroup_1
                .eContents().get(1);
        private final RuleCall cGuardGuardParserRuleCall_1_1_0 = (RuleCall) cGuardAssignment_1_1
                .eContents().get(0);
        private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword) cGroup
                .eContents().get(2);
        private final Assignment cBodyAssignment_3 = (Assignment) cGroup
                .eContents().get(3);
        private final RuleCall cBodyExpressionsParserRuleCall_3_0 = (RuleCall) cBodyAssignment_3
                .eContents().get(0);

        // CrClause:
        // expr=Expression ("when" guard=Guard)? "->" body=Expressions;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // expr=Expression ("when" guard=Guard)? "->" body=Expressions
        public Group getGroup() {
            return cGroup;
        }

        // expr=Expression
        public Assignment getExprAssignment_0() {
            return cExprAssignment_0;
        }

        // Expression
        public RuleCall getExprExpressionParserRuleCall_0_0() {
            return cExprExpressionParserRuleCall_0_0;
        }

        // ("when" guard=Guard)?
        public Group getGroup_1() {
            return cGroup_1;
        }

        // "when"
        public Keyword getWhenKeyword_1_0() {
            return cWhenKeyword_1_0;
        }

        // guard=Guard
        public Assignment getGuardAssignment_1_1() {
            return cGuardAssignment_1_1;
        }

        // Guard
        public RuleCall getGuardGuardParserRuleCall_1_1_0() {
            return cGuardGuardParserRuleCall_1_1_0;
        }

        // "->"
        public Keyword getHyphenMinusGreaterThanSignKeyword_2() {
            return cHyphenMinusGreaterThanSignKeyword_2;
        }

        // body=Expressions
        public Assignment getBodyAssignment_3() {
            return cBodyAssignment_3;
        }

        // Expressions
        public RuleCall getBodyExpressionsParserRuleCall_3_0() {
            return cBodyExpressionsParserRuleCall_3_0;
        }
    }

    public class ReceiveExprElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "ReceiveExpr");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Keyword cReceiveKeyword_0 = (Keyword) cGroup.eContents()
                .get(0);
        private final Alternatives cAlternatives_1 = (Alternatives) cGroup
                .eContents().get(1);
        private final Group cGroup_1_0 = (Group) cAlternatives_1.eContents()
                .get(0);
        private final Assignment cClausesAssignment_1_0_0 = (Assignment) cGroup_1_0
                .eContents().get(0);
        private final RuleCall cClausesCrClauseParserRuleCall_1_0_0_0 = (RuleCall) cClausesAssignment_1_0_0
                .eContents().get(0);
        private final Group cGroup_1_0_1 = (Group) cGroup_1_0.eContents()
                .get(1);
        private final Keyword cSemicolonKeyword_1_0_1_0 = (Keyword) cGroup_1_0_1
                .eContents().get(0);
        private final Assignment cClausesAssignment_1_0_1_1 = (Assignment) cGroup_1_0_1
                .eContents().get(1);
        private final RuleCall cClausesCrClauseParserRuleCall_1_0_1_1_0 = (RuleCall) cClausesAssignment_1_0_1_1
                .eContents().get(0);
        private final Group cGroup_1_0_2 = (Group) cGroup_1_0.eContents()
                .get(2);
        private final Keyword cAfterKeyword_1_0_2_0 = (Keyword) cGroup_1_0_2
                .eContents().get(0);
        private final Assignment cAfter_exprAssignment_1_0_2_1 = (Assignment) cGroup_1_0_2
                .eContents().get(1);
        private final RuleCall cAfter_exprExpressionParserRuleCall_1_0_2_1_0 = (RuleCall) cAfter_exprAssignment_1_0_2_1
                .eContents().get(0);
        private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0_2_2 = (Keyword) cGroup_1_0_2
                .eContents().get(2);
        private final Assignment cAfter_bodyAssignment_1_0_2_3 = (Assignment) cGroup_1_0_2
                .eContents().get(3);
        private final RuleCall cAfter_bodyExpressionsParserRuleCall_1_0_2_3_0 = (RuleCall) cAfter_bodyAssignment_1_0_2_3
                .eContents().get(0);
        private final Group cGroup_1_1 = (Group) cAlternatives_1.eContents()
                .get(1);
        private final Keyword cAfterKeyword_1_1_0 = (Keyword) cGroup_1_1
                .eContents().get(0);
        private final Assignment cAfter_exprAssignment_1_1_1 = (Assignment) cGroup_1_1
                .eContents().get(1);
        private final RuleCall cAfter_exprExpressionParserRuleCall_1_1_1_0 = (RuleCall) cAfter_exprAssignment_1_1_1
                .eContents().get(0);
        private final Keyword cHyphenMinusGreaterThanSignKeyword_1_1_2 = (Keyword) cGroup_1_1
                .eContents().get(2);
        private final Assignment cAfter_bodyAssignment_1_1_3 = (Assignment) cGroup_1_1
                .eContents().get(3);
        private final RuleCall cAfter_bodyExpressionsParserRuleCall_1_1_3_0 = (RuleCall) cAfter_bodyAssignment_1_1_3
                .eContents().get(0);
        private final Keyword cEndKeyword_2 = (Keyword) cGroup.eContents().get(
                2);

        // ReceiveExpr:
        // "receive" (clauses+=CrClause (";" clauses+=CrClause)* ("after"
        // after_expr=Expression "->" after_body=Expressions)? |
        // "after" after_expr=Expression "->" after_body=Expressions) "end";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // "receive" (clauses+=CrClause (";" clauses+=CrClause)* ("after"
        // after_expr=Expression "->" after_body=Expressions)? |
        // "after" after_expr=Expression "->" after_body=Expressions) "end"
        public Group getGroup() {
            return cGroup;
        }

        // "receive"
        public Keyword getReceiveKeyword_0() {
            return cReceiveKeyword_0;
        }

        // clauses+=CrClause (";" clauses+=CrClause)* ("after"
        // after_expr=Expression "->" after_body=Expressions)? | "after"
        // after_expr=Expression "->" after_body=Expressions
        public Alternatives getAlternatives_1() {
            return cAlternatives_1;
        }

        // clauses+=CrClause (";" clauses+=CrClause)* ("after"
        // after_expr=Expression "->" after_body=Expressions)?
        public Group getGroup_1_0() {
            return cGroup_1_0;
        }

        // clauses+=CrClause
        public Assignment getClausesAssignment_1_0_0() {
            return cClausesAssignment_1_0_0;
        }

        // CrClause
        public RuleCall getClausesCrClauseParserRuleCall_1_0_0_0() {
            return cClausesCrClauseParserRuleCall_1_0_0_0;
        }

        // (";" clauses+=CrClause)*
        public Group getGroup_1_0_1() {
            return cGroup_1_0_1;
        }

        // ";"
        public Keyword getSemicolonKeyword_1_0_1_0() {
            return cSemicolonKeyword_1_0_1_0;
        }

        // clauses+=CrClause
        public Assignment getClausesAssignment_1_0_1_1() {
            return cClausesAssignment_1_0_1_1;
        }

        // CrClause
        public RuleCall getClausesCrClauseParserRuleCall_1_0_1_1_0() {
            return cClausesCrClauseParserRuleCall_1_0_1_1_0;
        }

        // ("after" after_expr=Expression "->" after_body=Expressions)?
        public Group getGroup_1_0_2() {
            return cGroup_1_0_2;
        }

        // "after"
        public Keyword getAfterKeyword_1_0_2_0() {
            return cAfterKeyword_1_0_2_0;
        }

        // after_expr=Expression
        public Assignment getAfter_exprAssignment_1_0_2_1() {
            return cAfter_exprAssignment_1_0_2_1;
        }

        // Expression
        public RuleCall getAfter_exprExpressionParserRuleCall_1_0_2_1_0() {
            return cAfter_exprExpressionParserRuleCall_1_0_2_1_0;
        }

        // "->"
        public Keyword getHyphenMinusGreaterThanSignKeyword_1_0_2_2() {
            return cHyphenMinusGreaterThanSignKeyword_1_0_2_2;
        }

        // after_body=Expressions
        public Assignment getAfter_bodyAssignment_1_0_2_3() {
            return cAfter_bodyAssignment_1_0_2_3;
        }

        // Expressions
        public RuleCall getAfter_bodyExpressionsParserRuleCall_1_0_2_3_0() {
            return cAfter_bodyExpressionsParserRuleCall_1_0_2_3_0;
        }

        // "after" after_expr=Expression "->" after_body=Expressions
        public Group getGroup_1_1() {
            return cGroup_1_1;
        }

        // "after"
        public Keyword getAfterKeyword_1_1_0() {
            return cAfterKeyword_1_1_0;
        }

        // after_expr=Expression
        public Assignment getAfter_exprAssignment_1_1_1() {
            return cAfter_exprAssignment_1_1_1;
        }

        // Expression
        public RuleCall getAfter_exprExpressionParserRuleCall_1_1_1_0() {
            return cAfter_exprExpressionParserRuleCall_1_1_1_0;
        }

        // "->"
        public Keyword getHyphenMinusGreaterThanSignKeyword_1_1_2() {
            return cHyphenMinusGreaterThanSignKeyword_1_1_2;
        }

        // after_body=Expressions
        public Assignment getAfter_bodyAssignment_1_1_3() {
            return cAfter_bodyAssignment_1_1_3;
        }

        // Expressions
        public RuleCall getAfter_bodyExpressionsParserRuleCall_1_1_3_0() {
            return cAfter_bodyExpressionsParserRuleCall_1_1_3_0;
        }

        // "end"
        public Keyword getEndKeyword_2() {
            return cEndKeyword_2;
        }
    }

    public class FunExprElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "FunExpr");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Keyword cFunKeyword_0 = (Keyword) cGroup.eContents().get(
                0);
        private final Alternatives cAlternatives_1 = (Alternatives) cGroup
                .eContents().get(1);
        private final RuleCall cFunRefParserRuleCall_1_0 = (RuleCall) cAlternatives_1
                .eContents().get(0);
        private final RuleCall cInlineFunParserRuleCall_1_1 = (RuleCall) cAlternatives_1
                .eContents().get(1);

        // FunExpr:
        // "fun" (FunRef | InlineFun);
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // "fun" (FunRef | InlineFun)
        public Group getGroup() {
            return cGroup;
        }

        // "fun"
        public Keyword getFunKeyword_0() {
            return cFunKeyword_0;
        }

        // FunRef | InlineFun
        public Alternatives getAlternatives_1() {
            return cAlternatives_1;
        }

        // FunRef
        public RuleCall getFunRefParserRuleCall_1_0() {
            return cFunRefParserRuleCall_1_0;
        }

        // InlineFun
        public RuleCall getInlineFunParserRuleCall_1_1() {
            return cInlineFunParserRuleCall_1_1;
        }
    }

    public class FunRefElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "FunRef");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Group cGroup_0 = (Group) cGroup.eContents().get(0);
        private final Assignment cModuleAssignment_0_0 = (Assignment) cGroup_0
                .eContents().get(0);
        private final RuleCall cModuleModuleVarMacroParserRuleCall_0_0_0 = (RuleCall) cModuleAssignment_0_0
                .eContents().get(0);
        private final Keyword cColonKeyword_0_1 = (Keyword) cGroup_0
                .eContents().get(1);
        private final Assignment cFunctionAssignment_1 = (Assignment) cGroup
                .eContents().get(1);
        private final RuleCall cFunctionFunctionVarMacroParserRuleCall_1_0 = (RuleCall) cFunctionAssignment_1
                .eContents().get(0);
        private final Keyword cSolidusKeyword_2 = (Keyword) cGroup.eContents()
                .get(2);
        private final Assignment cArityAssignment_3 = (Assignment) cGroup
                .eContents().get(3);
        private final RuleCall cArityIntVarMacroParserRuleCall_3_0 = (RuleCall) cArityAssignment_3
                .eContents().get(0);

        // FunRef:
        // (module=ModuleVarMacro ":")? function=FunctionVarMacro "/"
        // arity=IntVarMacro;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // (module=ModuleVarMacro ":")? function=FunctionVarMacro "/"
        // arity=IntVarMacro
        public Group getGroup() {
            return cGroup;
        }

        // (module=ModuleVarMacro ":")?
        public Group getGroup_0() {
            return cGroup_0;
        }

        // module=ModuleVarMacro
        public Assignment getModuleAssignment_0_0() {
            return cModuleAssignment_0_0;
        }

        // ModuleVarMacro
        public RuleCall getModuleModuleVarMacroParserRuleCall_0_0_0() {
            return cModuleModuleVarMacroParserRuleCall_0_0_0;
        }

        // ":"
        public Keyword getColonKeyword_0_1() {
            return cColonKeyword_0_1;
        }

        // function=FunctionVarMacro
        public Assignment getFunctionAssignment_1() {
            return cFunctionAssignment_1;
        }

        // FunctionVarMacro
        public RuleCall getFunctionFunctionVarMacroParserRuleCall_1_0() {
            return cFunctionFunctionVarMacroParserRuleCall_1_0;
        }

        // "/"
        public Keyword getSolidusKeyword_2() {
            return cSolidusKeyword_2;
        }

        // arity=IntVarMacro
        public Assignment getArityAssignment_3() {
            return cArityAssignment_3;
        }

        // IntVarMacro
        public RuleCall getArityIntVarMacroParserRuleCall_3_0() {
            return cArityIntVarMacroParserRuleCall_3_0;
        }
    }

    public class InlineFunElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "InlineFun");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cClausesAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final RuleCall cClausesFunctionClauseParserRuleCall_0_0 = (RuleCall) cClausesAssignment_0
                .eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Keyword cSemicolonKeyword_1_0 = (Keyword) cGroup_1
                .eContents().get(0);
        private final Assignment cClausesAssignment_1_1 = (Assignment) cGroup_1
                .eContents().get(1);
        private final RuleCall cClausesFunctionClauseParserRuleCall_1_1_0 = (RuleCall) cClausesAssignment_1_1
                .eContents().get(0);
        private final Keyword cEndKeyword_2 = (Keyword) cGroup.eContents().get(
                2);

        // InlineFun returns FunExpr:
        // clauses+=FunctionClause (";" clauses+=FunctionClause)* "end";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // clauses+=FunctionClause (";" clauses+=FunctionClause)* "end"
        public Group getGroup() {
            return cGroup;
        }

        // clauses+=FunctionClause
        public Assignment getClausesAssignment_0() {
            return cClausesAssignment_0;
        }

        // FunctionClause
        public RuleCall getClausesFunctionClauseParserRuleCall_0_0() {
            return cClausesFunctionClauseParserRuleCall_0_0;
        }

        // (";" clauses+=FunctionClause)*
        public Group getGroup_1() {
            return cGroup_1;
        }

        // ";"
        public Keyword getSemicolonKeyword_1_0() {
            return cSemicolonKeyword_1_0;
        }

        // clauses+=FunctionClause
        public Assignment getClausesAssignment_1_1() {
            return cClausesAssignment_1_1;
        }

        // FunctionClause
        public RuleCall getClausesFunctionClauseParserRuleCall_1_1_0() {
            return cClausesFunctionClauseParserRuleCall_1_1_0;
        }

        // "end"
        public Keyword getEndKeyword_2() {
            return cEndKeyword_2;
        }
    }

    public class TryExprElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "TryExpr");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Keyword cTryKeyword_0 = (Keyword) cGroup.eContents().get(
                0);
        private final Assignment cBodyAssignment_1 = (Assignment) cGroup
                .eContents().get(1);
        private final RuleCall cBodyExpressionsParserRuleCall_1_0 = (RuleCall) cBodyAssignment_1
                .eContents().get(0);
        private final Group cGroup_2 = (Group) cGroup.eContents().get(2);
        private final Keyword cOfKeyword_2_0 = (Keyword) cGroup_2.eContents()
                .get(0);
        private final Assignment cOf_clausesAssignment_2_1 = (Assignment) cGroup_2
                .eContents().get(1);
        private final RuleCall cOf_clausesCrClauseParserRuleCall_2_1_0 = (RuleCall) cOf_clausesAssignment_2_1
                .eContents().get(0);
        private final Group cGroup_2_2 = (Group) cGroup_2.eContents().get(2);
        private final Keyword cSemicolonKeyword_2_2_0 = (Keyword) cGroup_2_2
                .eContents().get(0);
        private final Assignment cOf_clausesAssignment_2_2_1 = (Assignment) cGroup_2_2
                .eContents().get(1);
        private final RuleCall cOf_clausesCrClauseParserRuleCall_2_2_1_0 = (RuleCall) cOf_clausesAssignment_2_2_1
                .eContents().get(0);
        private final Alternatives cAlternatives_3 = (Alternatives) cGroup
                .eContents().get(3);
        private final Group cGroup_3_0 = (Group) cAlternatives_3.eContents()
                .get(0);
        private final Keyword cCatchKeyword_3_0_0 = (Keyword) cGroup_3_0
                .eContents().get(0);
        private final Assignment cCatchAssignment_3_0_1 = (Assignment) cGroup_3_0
                .eContents().get(1);
        private final RuleCall cCatchTryClauseParserRuleCall_3_0_1_0 = (RuleCall) cCatchAssignment_3_0_1
                .eContents().get(0);
        private final Group cGroup_3_0_2 = (Group) cGroup_3_0.eContents()
                .get(2);
        private final Keyword cSemicolonKeyword_3_0_2_0 = (Keyword) cGroup_3_0_2
                .eContents().get(0);
        private final Assignment cCatchAssignment_3_0_2_1 = (Assignment) cGroup_3_0_2
                .eContents().get(1);
        private final RuleCall cCatchTryClauseParserRuleCall_3_0_2_1_0 = (RuleCall) cCatchAssignment_3_0_2_1
                .eContents().get(0);
        private final Group cGroup_3_0_3 = (Group) cGroup_3_0.eContents()
                .get(3);
        private final Keyword cAfterKeyword_3_0_3_0 = (Keyword) cGroup_3_0_3
                .eContents().get(0);
        private final Assignment cAfter_bodyAssignment_3_0_3_1 = (Assignment) cGroup_3_0_3
                .eContents().get(1);
        private final RuleCall cAfter_bodyExpressionsParserRuleCall_3_0_3_1_0 = (RuleCall) cAfter_bodyAssignment_3_0_3_1
                .eContents().get(0);
        private final Group cGroup_3_1 = (Group) cAlternatives_3.eContents()
                .get(1);
        private final Keyword cAfterKeyword_3_1_0 = (Keyword) cGroup_3_1
                .eContents().get(0);
        private final Assignment cAfter_bodyAssignment_3_1_1 = (Assignment) cGroup_3_1
                .eContents().get(1);
        private final RuleCall cAfter_bodyExpressionsParserRuleCall_3_1_1_0 = (RuleCall) cAfter_bodyAssignment_3_1_1
                .eContents().get(0);
        private final Keyword cEndKeyword_4 = (Keyword) cGroup.eContents().get(
                4);

        // TryExpr:
        // "try" body=Expressions ("of" of_clauses+=CrClause (";"
        // of_clauses+=CrClause)*)? ("catch" catch+=TryClause (";"
        // catch+=TryClause)* ("after" after_body=Expressions)? | "after"
        // after_body=Expressions) "end";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // "try" body=Expressions ("of" of_clauses+=CrClause (";"
        // of_clauses+=CrClause)*)? ("catch" catch+=TryClause (";"
        // catch+=TryClause)* ("after" after_body=Expressions)? | "after"
        // after_body=Expressions) "end"
        public Group getGroup() {
            return cGroup;
        }

        // "try"
        public Keyword getTryKeyword_0() {
            return cTryKeyword_0;
        }

        // body=Expressions
        public Assignment getBodyAssignment_1() {
            return cBodyAssignment_1;
        }

        // Expressions
        public RuleCall getBodyExpressionsParserRuleCall_1_0() {
            return cBodyExpressionsParserRuleCall_1_0;
        }

        // ("of" of_clauses+=CrClause (";" of_clauses+=CrClause)*)?
        public Group getGroup_2() {
            return cGroup_2;
        }

        // "of"
        public Keyword getOfKeyword_2_0() {
            return cOfKeyword_2_0;
        }

        // of_clauses+=CrClause
        public Assignment getOf_clausesAssignment_2_1() {
            return cOf_clausesAssignment_2_1;
        }

        // CrClause
        public RuleCall getOf_clausesCrClauseParserRuleCall_2_1_0() {
            return cOf_clausesCrClauseParserRuleCall_2_1_0;
        }

        // (";" of_clauses+=CrClause)*
        public Group getGroup_2_2() {
            return cGroup_2_2;
        }

        // ";"
        public Keyword getSemicolonKeyword_2_2_0() {
            return cSemicolonKeyword_2_2_0;
        }

        // of_clauses+=CrClause
        public Assignment getOf_clausesAssignment_2_2_1() {
            return cOf_clausesAssignment_2_2_1;
        }

        // CrClause
        public RuleCall getOf_clausesCrClauseParserRuleCall_2_2_1_0() {
            return cOf_clausesCrClauseParserRuleCall_2_2_1_0;
        }

        // "catch" catch+=TryClause (";" catch+=TryClause)* ("after"
        // after_body=Expressions)? | "after" after_body=Expressions
        public Alternatives getAlternatives_3() {
            return cAlternatives_3;
        }

        // "catch" catch+=TryClause (";" catch+=TryClause)* ("after"
        // after_body=Expressions)?
        public Group getGroup_3_0() {
            return cGroup_3_0;
        }

        // "catch"
        public Keyword getCatchKeyword_3_0_0() {
            return cCatchKeyword_3_0_0;
        }

        // catch+=TryClause
        public Assignment getCatchAssignment_3_0_1() {
            return cCatchAssignment_3_0_1;
        }

        // TryClause
        public RuleCall getCatchTryClauseParserRuleCall_3_0_1_0() {
            return cCatchTryClauseParserRuleCall_3_0_1_0;
        }

        // (";" catch+=TryClause)*
        public Group getGroup_3_0_2() {
            return cGroup_3_0_2;
        }

        // ";"
        public Keyword getSemicolonKeyword_3_0_2_0() {
            return cSemicolonKeyword_3_0_2_0;
        }

        // catch+=TryClause
        public Assignment getCatchAssignment_3_0_2_1() {
            return cCatchAssignment_3_0_2_1;
        }

        // TryClause
        public RuleCall getCatchTryClauseParserRuleCall_3_0_2_1_0() {
            return cCatchTryClauseParserRuleCall_3_0_2_1_0;
        }

        // ("after" after_body=Expressions)?
        public Group getGroup_3_0_3() {
            return cGroup_3_0_3;
        }

        // "after"
        public Keyword getAfterKeyword_3_0_3_0() {
            return cAfterKeyword_3_0_3_0;
        }

        // after_body=Expressions
        public Assignment getAfter_bodyAssignment_3_0_3_1() {
            return cAfter_bodyAssignment_3_0_3_1;
        }

        // Expressions
        public RuleCall getAfter_bodyExpressionsParserRuleCall_3_0_3_1_0() {
            return cAfter_bodyExpressionsParserRuleCall_3_0_3_1_0;
        }

        // "after" after_body=Expressions
        public Group getGroup_3_1() {
            return cGroup_3_1;
        }

        // "after"
        public Keyword getAfterKeyword_3_1_0() {
            return cAfterKeyword_3_1_0;
        }

        // after_body=Expressions
        public Assignment getAfter_bodyAssignment_3_1_1() {
            return cAfter_bodyAssignment_3_1_1;
        }

        // Expressions
        public RuleCall getAfter_bodyExpressionsParserRuleCall_3_1_1_0() {
            return cAfter_bodyExpressionsParserRuleCall_3_1_1_0;
        }

        // "end"
        public Keyword getEndKeyword_4() {
            return cEndKeyword_4;
        }
    }

    public class TryClauseElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "TryClause");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Group cGroup_0 = (Group) cGroup.eContents().get(0);
        private final Group cGroup_0_0 = (Group) cGroup_0.eContents().get(0);
        private final Assignment cHdrAssignment_0_0_0 = (Assignment) cGroup_0_0
                .eContents().get(0);
        private final RuleCall cHdrNAMEVARParserRuleCall_0_0_0_0 = (RuleCall) cHdrAssignment_0_0_0
                .eContents().get(0);
        private final Keyword cColonKeyword_0_0_1 = (Keyword) cGroup_0_0
                .eContents().get(1);
        private final Assignment cCondAssignment_1 = (Assignment) cGroup
                .eContents().get(1);
        private final RuleCall cCondPatternExpressionParserRuleCall_1_0 = (RuleCall) cCondAssignment_1
                .eContents().get(0);
        private final Group cGroup_2 = (Group) cGroup.eContents().get(2);
        private final Keyword cWhenKeyword_2_0 = (Keyword) cGroup_2.eContents()
                .get(0);
        private final Assignment cGuardAssignment_2_1 = (Assignment) cGroup_2
                .eContents().get(1);
        private final RuleCall cGuardGuardParserRuleCall_2_1_0 = (RuleCall) cGuardAssignment_2_1
                .eContents().get(0);
        private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword) cGroup
                .eContents().get(3);
        private final Assignment cBodyAssignment_4 = (Assignment) cGroup
                .eContents().get(4);
        private final RuleCall cBodyExpressionsParserRuleCall_4_0 = (RuleCall) cBodyAssignment_4
                .eContents().get(0);

        // TryClause:
        // => (hdr=NAMEVAR ":")? cond=PatternExpression ("when" guard=Guard)?
        // "->" body=Expressions;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // => (hdr=NAMEVAR ":")? cond=PatternExpression ("when" guard=Guard)?
        // "->" body=Expressions
        public Group getGroup() {
            return cGroup;
        }

        // => (hdr=NAMEVAR ":")?
        public Group getGroup_0() {
            return cGroup_0;
        }

        // hdr=NAMEVAR ":"
        public Group getGroup_0_0() {
            return cGroup_0_0;
        }

        // hdr=NAMEVAR
        public Assignment getHdrAssignment_0_0_0() {
            return cHdrAssignment_0_0_0;
        }

        // NAMEVAR
        public RuleCall getHdrNAMEVARParserRuleCall_0_0_0_0() {
            return cHdrNAMEVARParserRuleCall_0_0_0_0;
        }

        // ":"
        public Keyword getColonKeyword_0_0_1() {
            return cColonKeyword_0_0_1;
        }

        // cond=PatternExpression
        public Assignment getCondAssignment_1() {
            return cCondAssignment_1;
        }

        // PatternExpression
        public RuleCall getCondPatternExpressionParserRuleCall_1_0() {
            return cCondPatternExpressionParserRuleCall_1_0;
        }

        // ("when" guard=Guard)?
        public Group getGroup_2() {
            return cGroup_2;
        }

        // "when"
        public Keyword getWhenKeyword_2_0() {
            return cWhenKeyword_2_0;
        }

        // guard=Guard
        public Assignment getGuardAssignment_2_1() {
            return cGuardAssignment_2_1;
        }

        // Guard
        public RuleCall getGuardGuardParserRuleCall_2_1_0() {
            return cGuardGuardParserRuleCall_2_1_0;
        }

        // "->"
        public Keyword getHyphenMinusGreaterThanSignKeyword_3() {
            return cHyphenMinusGreaterThanSignKeyword_3;
        }

        // body=Expressions
        public Assignment getBodyAssignment_4() {
            return cBodyAssignment_4;
        }

        // Expressions
        public RuleCall getBodyExpressionsParserRuleCall_4_0() {
            return cBodyExpressionsParserRuleCall_4_0;
        }
    }

    public class ListOrComprehensionElements extends
            AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "ListOrComprehension");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Keyword cLeftSquareBracketKeyword_0 = (Keyword) cGroup
                .eContents().get(0);
        private final Alternatives cAlternatives_1 = (Alternatives) cGroup
                .eContents().get(1);
        private final Action cErlListAction_1_0 = (Action) cAlternatives_1
                .eContents().get(0);
        private final Group cGroup_1_1 = (Group) cAlternatives_1.eContents()
                .get(1);
        private final Assignment cElementsAssignment_1_1_0 = (Assignment) cGroup_1_1
                .eContents().get(0);
        private final RuleCall cElementsExpressionParserRuleCall_1_1_0_0 = (RuleCall) cElementsAssignment_1_1_0
                .eContents().get(0);
        private final Group cGroup_1_1_1 = (Group) cGroup_1_1.eContents()
                .get(1);
        private final Keyword cCommaKeyword_1_1_1_0 = (Keyword) cGroup_1_1_1
                .eContents().get(0);
        private final Assignment cElementsAssignment_1_1_1_1 = (Assignment) cGroup_1_1_1
                .eContents().get(1);
        private final RuleCall cElementsExpressionParserRuleCall_1_1_1_1_0 = (RuleCall) cElementsAssignment_1_1_1_1
                .eContents().get(0);
        private final Alternatives cAlternatives_1_1_2 = (Alternatives) cGroup_1_1
                .eContents().get(2);
        private final Group cGroup_1_1_2_0 = (Group) cAlternatives_1_1_2
                .eContents().get(0);
        private final Keyword cVerticalLineKeyword_1_1_2_0_0 = (Keyword) cGroup_1_1_2_0
                .eContents().get(0);
        private final Assignment cTailAssignment_1_1_2_0_1 = (Assignment) cGroup_1_1_2_0
                .eContents().get(1);
        private final RuleCall cTailExpressionParserRuleCall_1_1_2_0_1_0 = (RuleCall) cTailAssignment_1_1_2_0_1
                .eContents().get(0);
        private final Group cGroup_1_1_2_1 = (Group) cAlternatives_1_1_2
                .eContents().get(1);
        private final Action cListComprehensionRootAction_1_1_2_1_0 = (Action) cGroup_1_1_2_1
                .eContents().get(0);
        private final Keyword cVerticalLineVerticalLineKeyword_1_1_2_1_1 = (Keyword) cGroup_1_1_2_1
                .eContents().get(1);
        private final Assignment cGeneratorsAssignment_1_1_2_1_2 = (Assignment) cGroup_1_1_2_1
                .eContents().get(2);
        private final RuleCall cGeneratorsLCExprParserRuleCall_1_1_2_1_2_0 = (RuleCall) cGeneratorsAssignment_1_1_2_1_2
                .eContents().get(0);
        private final Group cGroup_1_1_2_1_3 = (Group) cGroup_1_1_2_1
                .eContents().get(3);
        private final Keyword cCommaKeyword_1_1_2_1_3_0 = (Keyword) cGroup_1_1_2_1_3
                .eContents().get(0);
        private final Assignment cGeneratorsAssignment_1_1_2_1_3_1 = (Assignment) cGroup_1_1_2_1_3
                .eContents().get(1);
        private final RuleCall cGeneratorsLCExprParserRuleCall_1_1_2_1_3_1_0 = (RuleCall) cGeneratorsAssignment_1_1_2_1_3_1
                .eContents().get(0);
        private final Keyword cRightSquareBracketKeyword_2 = (Keyword) cGroup
                .eContents().get(2);

        // ListOrComprehension returns ErlList:
        // "[" ({ErlList} | elements+=Expression ("," elements+=Expression)*
        // ("|" tail=Expression |
        // {ListComprehension.root=current} "||" generators+=LCExpr (","
        // generators+=LCExpr)*)?) "]";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // "[" ({ErlList} | elements+=Expression ("," elements+=Expression)*
        // ("|" tail=Expression |
        // {ListComprehension.root=current} "||" generators+=LCExpr (","
        // generators+=LCExpr)*)?) "]"
        public Group getGroup() {
            return cGroup;
        }

        // "["
        public Keyword getLeftSquareBracketKeyword_0() {
            return cLeftSquareBracketKeyword_0;
        }

        // {ErlList} | elements+=Expression ("," elements+=Expression)* ("|"
        // tail=Expression | {ListComprehension.root=current}
        // "||" generators+=LCExpr ("," generators+=LCExpr)*)?
        public Alternatives getAlternatives_1() {
            return cAlternatives_1;
        }

        // {ErlList}
        public Action getErlListAction_1_0() {
            return cErlListAction_1_0;
        }

        // elements+=Expression ("," elements+=Expression)* ("|" tail=Expression
        // | {ListComprehension.root=current} "||"
        // generators+=LCExpr ("," generators+=LCExpr)*)?
        public Group getGroup_1_1() {
            return cGroup_1_1;
        }

        // elements+=Expression
        public Assignment getElementsAssignment_1_1_0() {
            return cElementsAssignment_1_1_0;
        }

        // Expression
        public RuleCall getElementsExpressionParserRuleCall_1_1_0_0() {
            return cElementsExpressionParserRuleCall_1_1_0_0;
        }

        // ("," elements+=Expression)*
        public Group getGroup_1_1_1() {
            return cGroup_1_1_1;
        }

        // ","
        public Keyword getCommaKeyword_1_1_1_0() {
            return cCommaKeyword_1_1_1_0;
        }

        // elements+=Expression
        public Assignment getElementsAssignment_1_1_1_1() {
            return cElementsAssignment_1_1_1_1;
        }

        // Expression
        public RuleCall getElementsExpressionParserRuleCall_1_1_1_1_0() {
            return cElementsExpressionParserRuleCall_1_1_1_1_0;
        }

        // ("|" tail=Expression | {ListComprehension.root=current} "||"
        // generators+=LCExpr ("," generators+=LCExpr)*)?
        public Alternatives getAlternatives_1_1_2() {
            return cAlternatives_1_1_2;
        }

        // "|" tail=Expression
        public Group getGroup_1_1_2_0() {
            return cGroup_1_1_2_0;
        }

        // "|"
        public Keyword getVerticalLineKeyword_1_1_2_0_0() {
            return cVerticalLineKeyword_1_1_2_0_0;
        }

        // tail=Expression
        public Assignment getTailAssignment_1_1_2_0_1() {
            return cTailAssignment_1_1_2_0_1;
        }

        // Expression
        public RuleCall getTailExpressionParserRuleCall_1_1_2_0_1_0() {
            return cTailExpressionParserRuleCall_1_1_2_0_1_0;
        }

        // {ListComprehension.root=current} "||" generators+=LCExpr (","
        // generators+=LCExpr)*
        public Group getGroup_1_1_2_1() {
            return cGroup_1_1_2_1;
        }

        // {ListComprehension.root=current}
        public Action getListComprehensionRootAction_1_1_2_1_0() {
            return cListComprehensionRootAction_1_1_2_1_0;
        }

        // "||"
        public Keyword getVerticalLineVerticalLineKeyword_1_1_2_1_1() {
            return cVerticalLineVerticalLineKeyword_1_1_2_1_1;
        }

        // generators+=LCExpr
        public Assignment getGeneratorsAssignment_1_1_2_1_2() {
            return cGeneratorsAssignment_1_1_2_1_2;
        }

        // LCExpr
        public RuleCall getGeneratorsLCExprParserRuleCall_1_1_2_1_2_0() {
            return cGeneratorsLCExprParserRuleCall_1_1_2_1_2_0;
        }

        // ("," generators+=LCExpr)*
        public Group getGroup_1_1_2_1_3() {
            return cGroup_1_1_2_1_3;
        }

        // ","
        public Keyword getCommaKeyword_1_1_2_1_3_0() {
            return cCommaKeyword_1_1_2_1_3_0;
        }

        // generators+=LCExpr
        public Assignment getGeneratorsAssignment_1_1_2_1_3_1() {
            return cGeneratorsAssignment_1_1_2_1_3_1;
        }

        // LCExpr
        public RuleCall getGeneratorsLCExprParserRuleCall_1_1_2_1_3_1_0() {
            return cGeneratorsLCExprParserRuleCall_1_1_2_1_3_1_0;
        }

        // "]"
        public Keyword getRightSquareBracketKeyword_2() {
            return cRightSquareBracketKeyword_2;
        }
    }

    public class TupleElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "Tuple");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword) cGroup
                .eContents().get(0);
        private final Alternatives cAlternatives_1 = (Alternatives) cGroup
                .eContents().get(1);
        private final Action cErlTupleAction_1_0 = (Action) cAlternatives_1
                .eContents().get(0);
        private final Group cGroup_1_1 = (Group) cAlternatives_1.eContents()
                .get(1);
        private final Assignment cElementsAssignment_1_1_0 = (Assignment) cGroup_1_1
                .eContents().get(0);
        private final RuleCall cElementsExpressionParserRuleCall_1_1_0_0 = (RuleCall) cElementsAssignment_1_1_0
                .eContents().get(0);
        private final Group cGroup_1_1_1 = (Group) cGroup_1_1.eContents()
                .get(1);
        private final Keyword cCommaKeyword_1_1_1_0 = (Keyword) cGroup_1_1_1
                .eContents().get(0);
        private final Assignment cElementsAssignment_1_1_1_1 = (Assignment) cGroup_1_1_1
                .eContents().get(1);
        private final RuleCall cElementsExpressionParserRuleCall_1_1_1_1_0 = (RuleCall) cElementsAssignment_1_1_1_1
                .eContents().get(0);
        private final Keyword cRightCurlyBracketKeyword_2 = (Keyword) cGroup
                .eContents().get(2);

        // Tuple returns ErlTuple:
        // "{" ({ErlTuple} | elements+=Expression ("," elements+=Expression)*)
        // "}";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // "{" ({ErlTuple} | elements+=Expression ("," elements+=Expression)*)
        // "}"
        public Group getGroup() {
            return cGroup;
        }

        // "{"
        public Keyword getLeftCurlyBracketKeyword_0() {
            return cLeftCurlyBracketKeyword_0;
        }

        // {ErlTuple} | elements+=Expression ("," elements+=Expression)*
        public Alternatives getAlternatives_1() {
            return cAlternatives_1;
        }

        // {ErlTuple}
        public Action getErlTupleAction_1_0() {
            return cErlTupleAction_1_0;
        }

        // elements+=Expression ("," elements+=Expression)*
        public Group getGroup_1_1() {
            return cGroup_1_1;
        }

        // elements+=Expression
        public Assignment getElementsAssignment_1_1_0() {
            return cElementsAssignment_1_1_0;
        }

        // Expression
        public RuleCall getElementsExpressionParserRuleCall_1_1_0_0() {
            return cElementsExpressionParserRuleCall_1_1_0_0;
        }

        // ("," elements+=Expression)*
        public Group getGroup_1_1_1() {
            return cGroup_1_1_1;
        }

        // ","
        public Keyword getCommaKeyword_1_1_1_0() {
            return cCommaKeyword_1_1_1_0;
        }

        // elements+=Expression
        public Assignment getElementsAssignment_1_1_1_1() {
            return cElementsAssignment_1_1_1_1;
        }

        // Expression
        public RuleCall getElementsExpressionParserRuleCall_1_1_1_1_0() {
            return cElementsExpressionParserRuleCall_1_1_1_1_0;
        }

        // "}"
        public Keyword getRightCurlyBracketKeyword_2() {
            return cRightCurlyBracketKeyword_2;
        }
    }

    public class BinaryOrComprehensionElements extends
            AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "BinaryOrComprehension");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Keyword cLessThanSignLessThanSignKeyword_0 = (Keyword) cGroup
                .eContents().get(0);
        private final Alternatives cAlternatives_1 = (Alternatives) cGroup
                .eContents().get(1);
        private final Action cErlBinaryAction_1_0 = (Action) cAlternatives_1
                .eContents().get(0);
        private final Group cGroup_1_1 = (Group) cAlternatives_1.eContents()
                .get(1);
        private final Assignment cElementsAssignment_1_1_0 = (Assignment) cGroup_1_1
                .eContents().get(0);
        private final RuleCall cElementsBinaryItemParserRuleCall_1_1_0_0 = (RuleCall) cElementsAssignment_1_1_0
                .eContents().get(0);
        private final Group cGroup_1_1_1 = (Group) cGroup_1_1.eContents()
                .get(1);
        private final Keyword cCommaKeyword_1_1_1_0 = (Keyword) cGroup_1_1_1
                .eContents().get(0);
        private final Assignment cElementsAssignment_1_1_1_1 = (Assignment) cGroup_1_1_1
                .eContents().get(1);
        private final RuleCall cElementsBinaryItemParserRuleCall_1_1_1_1_0 = (RuleCall) cElementsAssignment_1_1_1_1
                .eContents().get(0);
        private final Group cGroup_1_1_2 = (Group) cGroup_1_1.eContents()
                .get(2);
        private final Action cBinaryComprehensionRootAction_1_1_2_0 = (Action) cGroup_1_1_2
                .eContents().get(0);
        private final Keyword cVerticalLineVerticalLineKeyword_1_1_2_1 = (Keyword) cGroup_1_1_2
                .eContents().get(1);
        private final Assignment cGeneratorsAssignment_1_1_2_2 = (Assignment) cGroup_1_1_2
                .eContents().get(2);
        private final RuleCall cGeneratorsLCExprParserRuleCall_1_1_2_2_0 = (RuleCall) cGeneratorsAssignment_1_1_2_2
                .eContents().get(0);
        private final Group cGroup_1_1_2_3 = (Group) cGroup_1_1_2.eContents()
                .get(3);
        private final Keyword cCommaKeyword_1_1_2_3_0 = (Keyword) cGroup_1_1_2_3
                .eContents().get(0);
        private final Assignment cGeneratorsAssignment_1_1_2_3_1 = (Assignment) cGroup_1_1_2_3
                .eContents().get(1);
        private final RuleCall cGeneratorsLCExprParserRuleCall_1_1_2_3_1_0 = (RuleCall) cGeneratorsAssignment_1_1_2_3_1
                .eContents().get(0);
        private final Keyword cGreaterThanSignGreaterThanSignKeyword_2 = (Keyword) cGroup
                .eContents().get(2);

        // BinaryOrComprehension returns ErlBinary:
        // "<<" ({ErlBinary} | elements+=BinaryItem ("," elements+=BinaryItem)*
        // ({BinaryComprehension.root=current} "||"
        // generators+=LCExpr ("," generators+=LCExpr)*)?) ">>";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // "<<" ({ErlBinary} | elements+=BinaryItem ("," elements+=BinaryItem)*
        // ({BinaryComprehension.root=current} "||"
        // generators+=LCExpr ("," generators+=LCExpr)*)?) ">>"
        public Group getGroup() {
            return cGroup;
        }

        // "<<"
        public Keyword getLessThanSignLessThanSignKeyword_0() {
            return cLessThanSignLessThanSignKeyword_0;
        }

        // {ErlBinary} | elements+=BinaryItem ("," elements+=BinaryItem)*
        // ({BinaryComprehension.root=current} "||"
        // generators+=LCExpr ("," generators+=LCExpr)*)?
        public Alternatives getAlternatives_1() {
            return cAlternatives_1;
        }

        // {ErlBinary}
        public Action getErlBinaryAction_1_0() {
            return cErlBinaryAction_1_0;
        }

        // elements+=BinaryItem ("," elements+=BinaryItem)*
        // ({BinaryComprehension.root=current} "||" generators+=LCExpr (","
        // generators+=LCExpr)*)?
        public Group getGroup_1_1() {
            return cGroup_1_1;
        }

        // elements+=BinaryItem
        public Assignment getElementsAssignment_1_1_0() {
            return cElementsAssignment_1_1_0;
        }

        // BinaryItem
        public RuleCall getElementsBinaryItemParserRuleCall_1_1_0_0() {
            return cElementsBinaryItemParserRuleCall_1_1_0_0;
        }

        // ("," elements+=BinaryItem)*
        public Group getGroup_1_1_1() {
            return cGroup_1_1_1;
        }

        // ","
        public Keyword getCommaKeyword_1_1_1_0() {
            return cCommaKeyword_1_1_1_0;
        }

        // elements+=BinaryItem
        public Assignment getElementsAssignment_1_1_1_1() {
            return cElementsAssignment_1_1_1_1;
        }

        // BinaryItem
        public RuleCall getElementsBinaryItemParserRuleCall_1_1_1_1_0() {
            return cElementsBinaryItemParserRuleCall_1_1_1_1_0;
        }

        // ({BinaryComprehension.root=current} "||" generators+=LCExpr (","
        // generators+=LCExpr)*)?
        public Group getGroup_1_1_2() {
            return cGroup_1_1_2;
        }

        // {BinaryComprehension.root=current}
        public Action getBinaryComprehensionRootAction_1_1_2_0() {
            return cBinaryComprehensionRootAction_1_1_2_0;
        }

        // "||"
        public Keyword getVerticalLineVerticalLineKeyword_1_1_2_1() {
            return cVerticalLineVerticalLineKeyword_1_1_2_1;
        }

        // generators+=LCExpr
        public Assignment getGeneratorsAssignment_1_1_2_2() {
            return cGeneratorsAssignment_1_1_2_2;
        }

        // LCExpr
        public RuleCall getGeneratorsLCExprParserRuleCall_1_1_2_2_0() {
            return cGeneratorsLCExprParserRuleCall_1_1_2_2_0;
        }

        // ("," generators+=LCExpr)*
        public Group getGroup_1_1_2_3() {
            return cGroup_1_1_2_3;
        }

        // ","
        public Keyword getCommaKeyword_1_1_2_3_0() {
            return cCommaKeyword_1_1_2_3_0;
        }

        // generators+=LCExpr
        public Assignment getGeneratorsAssignment_1_1_2_3_1() {
            return cGeneratorsAssignment_1_1_2_3_1;
        }

        // LCExpr
        public RuleCall getGeneratorsLCExprParserRuleCall_1_1_2_3_1_0() {
            return cGeneratorsLCExprParserRuleCall_1_1_2_3_1_0;
        }

        // ">>"
        public Keyword getGreaterThanSignGreaterThanSignKeyword_2() {
            return cGreaterThanSignGreaterThanSignKeyword_2;
        }
    }

    public class BinaryItemElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "BinaryItem");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cExprAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final RuleCall cExprUnaryExprMaxParserRuleCall_0_0 = (RuleCall) cExprAssignment_0
                .eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Keyword cColonKeyword_1_0 = (Keyword) cGroup_1
                .eContents().get(0);
        private final Assignment cSizeAssignment_1_1 = (Assignment) cGroup_1
                .eContents().get(1);
        private final RuleCall cSizeExprMaxParserRuleCall_1_1_0 = (RuleCall) cSizeAssignment_1_1
                .eContents().get(0);
        private final Group cGroup_2 = (Group) cGroup.eContents().get(2);
        private final Keyword cSolidusKeyword_2_0 = (Keyword) cGroup_2
                .eContents().get(0);
        private final Assignment cTypesAssignment_2_1 = (Assignment) cGroup_2
                .eContents().get(1);
        private final RuleCall cTypesBitTypeParserRuleCall_2_1_0 = (RuleCall) cTypesAssignment_2_1
                .eContents().get(0);
        private final Group cGroup_2_2 = (Group) cGroup_2.eContents().get(2);
        private final Keyword cHyphenMinusKeyword_2_2_0 = (Keyword) cGroup_2_2
                .eContents().get(0);
        private final Assignment cTypeAssignment_2_2_1 = (Assignment) cGroup_2_2
                .eContents().get(1);
        private final RuleCall cTypeBitTypeParserRuleCall_2_2_1_0 = (RuleCall) cTypeAssignment_2_2_1
                .eContents().get(0);

        // BinaryItem:
        // expr=UnaryExprMax (":" size=ExprMax)? ("/" types+=BitType ("-"
        // type+=BitType)*)?;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // expr=UnaryExprMax (":" size=ExprMax)? ("/" types+=BitType ("-"
        // type+=BitType)*)?
        public Group getGroup() {
            return cGroup;
        }

        // expr=UnaryExprMax
        public Assignment getExprAssignment_0() {
            return cExprAssignment_0;
        }

        // UnaryExprMax
        public RuleCall getExprUnaryExprMaxParserRuleCall_0_0() {
            return cExprUnaryExprMaxParserRuleCall_0_0;
        }

        // (=> ":" size=ExprMax)?
        public Group getGroup_1() {
            return cGroup_1;
        }

        // => ":"
        public Keyword getColonKeyword_1_0() {
            return cColonKeyword_1_0;
        }

        // size=ExprMax
        public Assignment getSizeAssignment_1_1() {
            return cSizeAssignment_1_1;
        }

        // ExprMax
        public RuleCall getSizeExprMaxParserRuleCall_1_1_0() {
            return cSizeExprMaxParserRuleCall_1_1_0;
        }

        // (=> "/" types+=BitType ("-" type+=BitType)*)?
        public Group getGroup_2() {
            return cGroup_2;
        }

        // => "/"
        public Keyword getSolidusKeyword_2_0() {
            return cSolidusKeyword_2_0;
        }

        // types+=BitType
        public Assignment getTypesAssignment_2_1() {
            return cTypesAssignment_2_1;
        }

        // BitType
        public RuleCall getTypesBitTypeParserRuleCall_2_1_0() {
            return cTypesBitTypeParserRuleCall_2_1_0;
        }

        // ("-" type+=BitType)*
        public Group getGroup_2_2() {
            return cGroup_2_2;
        }

        // "-"
        public Keyword getHyphenMinusKeyword_2_2_0() {
            return cHyphenMinusKeyword_2_2_0;
        }

        // type+=BitType
        public Assignment getTypeAssignment_2_2_1() {
            return cTypeAssignment_2_2_1;
        }

        // BitType
        public RuleCall getTypeBitTypeParserRuleCall_2_2_1_0() {
            return cTypeBitTypeParserRuleCall_2_2_1_0;
        }
    }

    public class BitTypeElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "BitType");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cTypeNameAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final CrossReference cTypeNameAtomRefTargetCrossReference_0_0 = (CrossReference) cTypeNameAssignment_0
                .eContents().get(0);
        private final RuleCall cTypeNameAtomRefTargetNAMEMACROParserRuleCall_0_0_1 = (RuleCall) cTypeNameAtomRefTargetCrossReference_0_0
                .eContents().get(1);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Keyword cColonKeyword_1_0 = (Keyword) cGroup_1
                .eContents().get(0);
        private final Assignment cSizeAssignment_1_1 = (Assignment) cGroup_1
                .eContents().get(1);
        private final RuleCall cSizeIntVarMacroParserRuleCall_1_1_0 = (RuleCall) cSizeAssignment_1_1
                .eContents().get(0);

        // BitType:
        // typeName=[AtomRefTarget|NAMEMACRO] (":" size=IntVarMacro)?;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // typeName=[AtomRefTarget|NAMEMACRO] (":" size=IntVarMacro)?
        public Group getGroup() {
            return cGroup;
        }

        // typeName=[AtomRefTarget|NAMEMACRO]
        public Assignment getTypeNameAssignment_0() {
            return cTypeNameAssignment_0;
        }

        // [AtomRefTarget|NAMEMACRO]
        public CrossReference getTypeNameAtomRefTargetCrossReference_0_0() {
            return cTypeNameAtomRefTargetCrossReference_0_0;
        }

        // NAMEMACRO
        public RuleCall getTypeNameAtomRefTargetNAMEMACROParserRuleCall_0_0_1() {
            return cTypeNameAtomRefTargetNAMEMACROParserRuleCall_0_0_1;
        }

        // (":" size=IntVarMacro)?
        public Group getGroup_1() {
            return cGroup_1;
        }

        // ":"
        public Keyword getColonKeyword_1_0() {
            return cColonKeyword_1_0;
        }

        // size=IntVarMacro
        public Assignment getSizeAssignment_1_1() {
            return cSizeAssignment_1_1;
        }

        // IntVarMacro
        public RuleCall getSizeIntVarMacroParserRuleCall_1_1_0() {
            return cSizeIntVarMacroParserRuleCall_1_1_0;
        }
    }

    public class UnaryExprMaxElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "UnaryExprMax");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final Group cGroup_0 = (Group) cAlternatives.eContents().get(0);
        private final Action cUnaryExprAction_0_0 = (Action) cGroup_0
                .eContents().get(0);
        private final Assignment cOpAssignment_0_1 = (Assignment) cGroup_0
                .eContents().get(1);
        private final RuleCall cOpPREFIXOPParserRuleCall_0_1_0 = (RuleCall) cOpAssignment_0_1
                .eContents().get(0);
        private final Assignment cOperandAssignment_0_2 = (Assignment) cGroup_0
                .eContents().get(2);
        private final RuleCall cOperandExprMaxParserRuleCall_0_2_0 = (RuleCall) cOperandAssignment_0_2
                .eContents().get(0);
        private final RuleCall cExprMaxParserRuleCall_1 = (RuleCall) cAlternatives
                .eContents().get(1);

        // UnaryExprMax returns Expression:
        // {UnaryExpr} op=PREFIXOP operand=ExprMax | ExprMax;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // {UnaryExpr} op=PREFIXOP operand=ExprMax | ExprMax
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // {UnaryExpr} op=PREFIXOP operand=ExprMax
        public Group getGroup_0() {
            return cGroup_0;
        }

        // {UnaryExpr}
        public Action getUnaryExprAction_0_0() {
            return cUnaryExprAction_0_0;
        }

        // op=PREFIXOP
        public Assignment getOpAssignment_0_1() {
            return cOpAssignment_0_1;
        }

        // PREFIXOP
        public RuleCall getOpPREFIXOPParserRuleCall_0_1_0() {
            return cOpPREFIXOPParserRuleCall_0_1_0;
        }

        // operand=ExprMax
        public Assignment getOperandAssignment_0_2() {
            return cOperandAssignment_0_2;
        }

        // ExprMax
        public RuleCall getOperandExprMaxParserRuleCall_0_2_0() {
            return cOperandExprMaxParserRuleCall_0_2_0;
        }

        // ExprMax
        public RuleCall getExprMaxParserRuleCall_1() {
            return cExprMaxParserRuleCall_1;
        }
    }

    public class LCExprElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "LCExpr");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cO1Assignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final RuleCall cO1ExpressionParserRuleCall_0_0 = (RuleCall) cO1Assignment_0
                .eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Assignment cOpAssignment_1_0 = (Assignment) cGroup_1
                .eContents().get(0);
        private final Alternatives cOpAlternatives_1_0_0 = (Alternatives) cOpAssignment_1_0
                .eContents().get(0);
        private final Keyword cOpLessThanSignHyphenMinusKeyword_1_0_0_0 = (Keyword) cOpAlternatives_1_0_0
                .eContents().get(0);
        private final Keyword cOpLessThanSignEqualsSignKeyword_1_0_0_1 = (Keyword) cOpAlternatives_1_0_0
                .eContents().get(1);
        private final Assignment cO2Assignment_1_1 = (Assignment) cGroup_1
                .eContents().get(1);
        private final RuleCall cO2ExpressionParserRuleCall_1_1_0 = (RuleCall) cO2Assignment_1_1
                .eContents().get(0);

        // LCExpr:
        // o1=Expression (op=("<-" | "<=") o2=Expression)?;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // o1=Expression (op=("<-" | "<=") o2=Expression)?
        public Group getGroup() {
            return cGroup;
        }

        // o1=Expression
        public Assignment getO1Assignment_0() {
            return cO1Assignment_0;
        }

        // Expression
        public RuleCall getO1ExpressionParserRuleCall_0_0() {
            return cO1ExpressionParserRuleCall_0_0;
        }

        // (op=("<-" | "<=") o2=Expression)?
        public Group getGroup_1() {
            return cGroup_1;
        }

        // op=("<-" | "<=")
        public Assignment getOpAssignment_1_0() {
            return cOpAssignment_1_0;
        }

        // "<-" | "<="
        public Alternatives getOpAlternatives_1_0_0() {
            return cOpAlternatives_1_0_0;
        }

        // "<-"
        public Keyword getOpLessThanSignHyphenMinusKeyword_1_0_0_0() {
            return cOpLessThanSignHyphenMinusKeyword_1_0_0_0;
        }

        // "<="
        public Keyword getOpLessThanSignEqualsSignKeyword_1_0_0_1() {
            return cOpLessThanSignEqualsSignKeyword_1_0_0_1;
        }

        // o2=Expression
        public Assignment getO2Assignment_1_1() {
            return cO2Assignment_1_1;
        }

        // Expression
        public RuleCall getO2ExpressionParserRuleCall_1_1_0() {
            return cO2ExpressionParserRuleCall_1_1_0;
        }
    }

    public class ADDOPElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "ADDOP");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final Keyword cPlusSignKeyword_0 = (Keyword) cAlternatives
                .eContents().get(0);
        private final Keyword cHyphenMinusKeyword_1 = (Keyword) cAlternatives
                .eContents().get(1);
        private final Keyword cBorKeyword_2 = (Keyword) cAlternatives
                .eContents().get(2);
        private final Keyword cBxorKeyword_3 = (Keyword) cAlternatives
                .eContents().get(3);
        private final Keyword cBslKeyword_4 = (Keyword) cAlternatives
                .eContents().get(4);
        private final Keyword cBsrKeyword_5 = (Keyword) cAlternatives
                .eContents().get(5);
        private final Keyword cOrKeyword_6 = (Keyword) cAlternatives
                .eContents().get(6);
        private final Keyword cXorKeyword_7 = (Keyword) cAlternatives
                .eContents().get(7);

        // // Operators
        // ADDOP:
        // "+" | "-" | "bor" | "bxor" | "bsl" | "bsr" | "or" | "xor";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // "+" | "-" | "bor" | "bxor" | "bsl" | "bsr" | "or" | "xor"
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // "+"
        public Keyword getPlusSignKeyword_0() {
            return cPlusSignKeyword_0;
        }

        // "-"
        public Keyword getHyphenMinusKeyword_1() {
            return cHyphenMinusKeyword_1;
        }

        // "bor"
        public Keyword getBorKeyword_2() {
            return cBorKeyword_2;
        }

        // "bxor"
        public Keyword getBxorKeyword_3() {
            return cBxorKeyword_3;
        }

        // "bsl"
        public Keyword getBslKeyword_4() {
            return cBslKeyword_4;
        }

        // "bsr"
        public Keyword getBsrKeyword_5() {
            return cBsrKeyword_5;
        }

        // "or"
        public Keyword getOrKeyword_6() {
            return cOrKeyword_6;
        }

        // "xor"
        public Keyword getXorKeyword_7() {
            return cXorKeyword_7;
        }
    }

    public class MULTOPElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "MULTOP");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final Keyword cAsteriskKeyword_0 = (Keyword) cAlternatives
                .eContents().get(0);
        private final Keyword cSolidusKeyword_1 = (Keyword) cAlternatives
                .eContents().get(1);
        private final Keyword cDivKeyword_2 = (Keyword) cAlternatives
                .eContents().get(2);
        private final Keyword cRemKeyword_3 = (Keyword) cAlternatives
                .eContents().get(3);
        private final Keyword cBandKeyword_4 = (Keyword) cAlternatives
                .eContents().get(4);
        private final Keyword cAndKeyword_5 = (Keyword) cAlternatives
                .eContents().get(5);

        // MULTOP:
        // "*" | "/" | "div" | "rem" | "band" | "and";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // "*" | "/" | "div" | "rem" | "band" | "and"
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // "*"
        public Keyword getAsteriskKeyword_0() {
            return cAsteriskKeyword_0;
        }

        // "/"
        public Keyword getSolidusKeyword_1() {
            return cSolidusKeyword_1;
        }

        // "div"
        public Keyword getDivKeyword_2() {
            return cDivKeyword_2;
        }

        // "rem"
        public Keyword getRemKeyword_3() {
            return cRemKeyword_3;
        }

        // "band"
        public Keyword getBandKeyword_4() {
            return cBandKeyword_4;
        }

        // "and"
        public Keyword getAndKeyword_5() {
            return cAndKeyword_5;
        }
    }

    public class PREFIXOPElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "PREFIXOP");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final Keyword cPlusSignKeyword_0 = (Keyword) cAlternatives
                .eContents().get(0);
        private final Keyword cHyphenMinusKeyword_1 = (Keyword) cAlternatives
                .eContents().get(1);
        private final Keyword cBnotKeyword_2 = (Keyword) cAlternatives
                .eContents().get(2);
        private final Keyword cNotKeyword_3 = (Keyword) cAlternatives
                .eContents().get(3);

        // PREFIXOP:
        // "+" | "-" | "bnot" | "not";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // "+" | "-" | "bnot" | "not"
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // "+"
        public Keyword getPlusSignKeyword_0() {
            return cPlusSignKeyword_0;
        }

        // "-"
        public Keyword getHyphenMinusKeyword_1() {
            return cHyphenMinusKeyword_1;
        }

        // "bnot"
        public Keyword getBnotKeyword_2() {
            return cBnotKeyword_2;
        }

        // "not"
        public Keyword getNotKeyword_3() {
            return cNotKeyword_3;
        }
    }

    public class LISTOPElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "LISTOP");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final Keyword cPlusSignPlusSignKeyword_0 = (Keyword) cAlternatives
                .eContents().get(0);
        private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword) cAlternatives
                .eContents().get(1);

        // LISTOP:
        // "++" | "--";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // "++" | "--"
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // "++"
        public Keyword getPlusSignPlusSignKeyword_0() {
            return cPlusSignPlusSignKeyword_0;
        }

        // "--"
        public Keyword getHyphenMinusHyphenMinusKeyword_1() {
            return cHyphenMinusHyphenMinusKeyword_1;
        }
    }

    public class COMPOPElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "COMPOP");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword) cAlternatives
                .eContents().get(0);
        private final Keyword cSolidusEqualsSignKeyword_1 = (Keyword) cAlternatives
                .eContents().get(1);
        private final Keyword cEqualsSignLessThanSignKeyword_2 = (Keyword) cAlternatives
                .eContents().get(2);
        private final Keyword cLessThanSignKeyword_3 = (Keyword) cAlternatives
                .eContents().get(3);
        private final Keyword cGreaterThanSignEqualsSignKeyword_4 = (Keyword) cAlternatives
                .eContents().get(4);
        private final Keyword cGreaterThanSignKeyword_5 = (Keyword) cAlternatives
                .eContents().get(5);
        private final Keyword cEqualsSignColonEqualsSignKeyword_6 = (Keyword) cAlternatives
                .eContents().get(6);
        private final Keyword cEqualsSignSolidusEqualsSignKeyword_7 = (Keyword) cAlternatives
                .eContents().get(7);

        // COMPOP:
        // "==" | "/=" | "=<" | "<" | ">=" | ">" | "=:=" | "=/=";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // "==" | "/=" | "=<" | "<" | ">=" | ">" | "=:=" | "=/="
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // "=="
        public Keyword getEqualsSignEqualsSignKeyword_0() {
            return cEqualsSignEqualsSignKeyword_0;
        }

        // "/="
        public Keyword getSolidusEqualsSignKeyword_1() {
            return cSolidusEqualsSignKeyword_1;
        }

        // "=<"
        public Keyword getEqualsSignLessThanSignKeyword_2() {
            return cEqualsSignLessThanSignKeyword_2;
        }

        // "<"
        public Keyword getLessThanSignKeyword_3() {
            return cLessThanSignKeyword_3;
        }

        // ">="
        public Keyword getGreaterThanSignEqualsSignKeyword_4() {
            return cGreaterThanSignEqualsSignKeyword_4;
        }

        // ">"
        public Keyword getGreaterThanSignKeyword_5() {
            return cGreaterThanSignKeyword_5;
        }

        // "=:="
        public Keyword getEqualsSignColonEqualsSignKeyword_6() {
            return cEqualsSignColonEqualsSignKeyword_6;
        }

        // "=/="
        public Keyword getEqualsSignSolidusEqualsSignKeyword_7() {
            return cEqualsSignSolidusEqualsSignKeyword_7;
        }
    }

    public class SENDOPElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "SENDOP");
        private final Keyword cExclamationMarkKeyword = (Keyword) rule
                .eContents().get(1);

        // SENDOP:
        // "!";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // "!"
        public Keyword getExclamationMarkKeyword() {
            return cExclamationMarkKeyword;
        }
    }

    public class ModuleVarMacroElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "ModuleVarMacro");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final RuleCall cModuleRefParserRuleCall_0 = (RuleCall) cAlternatives
                .eContents().get(0);
        private final RuleCall cVariableLiteralParserRuleCall_1 = (RuleCall) cAlternatives
                .eContents().get(1);
        private final RuleCall cMacroLiteralParserRuleCall_2 = (RuleCall) cAlternatives
                .eContents().get(2);

        // // Literal combinations
        // ModuleVarMacro returns Expression:
        // ModuleRef | VariableLiteral | MacroLiteral;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // ModuleRef | VariableLiteral | MacroLiteral
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // ModuleRef
        public RuleCall getModuleRefParserRuleCall_0() {
            return cModuleRefParserRuleCall_0;
        }

        // VariableLiteral
        public RuleCall getVariableLiteralParserRuleCall_1() {
            return cVariableLiteralParserRuleCall_1;
        }

        // MacroLiteral
        public RuleCall getMacroLiteralParserRuleCall_2() {
            return cMacroLiteralParserRuleCall_2;
        }
    }

    public class FunctionVarMacroElements extends
            AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "FunctionVarMacro");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final RuleCall cFunctionRefParserRuleCall_0 = (RuleCall) cAlternatives
                .eContents().get(0);
        private final RuleCall cVariableLiteralParserRuleCall_1 = (RuleCall) cAlternatives
                .eContents().get(1);
        private final RuleCall cMacroLiteralParserRuleCall_2 = (RuleCall) cAlternatives
                .eContents().get(2);

        // FunctionVarMacro returns Expression:
        // FunctionRef | VariableLiteral | MacroLiteral;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // FunctionRef | VariableLiteral | MacroLiteral
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // FunctionRef
        public RuleCall getFunctionRefParserRuleCall_0() {
            return cFunctionRefParserRuleCall_0;
        }

        // VariableLiteral
        public RuleCall getVariableLiteralParserRuleCall_1() {
            return cVariableLiteralParserRuleCall_1;
        }

        // MacroLiteral
        public RuleCall getMacroLiteralParserRuleCall_2() {
            return cMacroLiteralParserRuleCall_2;
        }
    }

    public class RecordVarMacroElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "RecordVarMacro");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final RuleCall cRecordRefParserRuleCall_0 = (RuleCall) cAlternatives
                .eContents().get(0);
        private final RuleCall cVariableLiteralParserRuleCall_1 = (RuleCall) cAlternatives
                .eContents().get(1);
        private final RuleCall cMacroLiteralParserRuleCall_2 = (RuleCall) cAlternatives
                .eContents().get(2);

        // RecordVarMacro returns Expression:
        // RecordRef | VariableLiteral | MacroLiteral;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // RecordRef | VariableLiteral | MacroLiteral
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // RecordRef
        public RuleCall getRecordRefParserRuleCall_0() {
            return cRecordRefParserRuleCall_0;
        }

        // VariableLiteral
        public RuleCall getVariableLiteralParserRuleCall_1() {
            return cVariableLiteralParserRuleCall_1;
        }

        // MacroLiteral
        public RuleCall getMacroLiteralParserRuleCall_2() {
            return cMacroLiteralParserRuleCall_2;
        }
    }

    public class RecordFieldVarMacroElements extends
            AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "RecordFieldVarMacro");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final RuleCall cRecordFieldRefParserRuleCall_0 = (RuleCall) cAlternatives
                .eContents().get(0);
        private final RuleCall cVariableLiteralParserRuleCall_1 = (RuleCall) cAlternatives
                .eContents().get(1);
        private final RuleCall cMacroLiteralParserRuleCall_2 = (RuleCall) cAlternatives
                .eContents().get(2);

        // RecordFieldVarMacro returns Expression:
        // RecordFieldRef | VariableLiteral | MacroLiteral;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // RecordFieldRef | VariableLiteral | MacroLiteral
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // RecordFieldRef
        public RuleCall getRecordFieldRefParserRuleCall_0() {
            return cRecordFieldRefParserRuleCall_0;
        }

        // VariableLiteral
        public RuleCall getVariableLiteralParserRuleCall_1() {
            return cVariableLiteralParserRuleCall_1;
        }

        // MacroLiteral
        public RuleCall getMacroLiteralParserRuleCall_2() {
            return cMacroLiteralParserRuleCall_2;
        }
    }

    public class TypeVarMacroElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "TypeVarMacro");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final RuleCall cTypeRefParserRuleCall_0 = (RuleCall) cAlternatives
                .eContents().get(0);
        private final RuleCall cVariableLiteralParserRuleCall_1 = (RuleCall) cAlternatives
                .eContents().get(1);
        private final RuleCall cMacroLiteralParserRuleCall_2 = (RuleCall) cAlternatives
                .eContents().get(2);

        // TypeVarMacro returns Expression:
        // TypeRef | VariableLiteral | MacroLiteral;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // TypeRef | VariableLiteral | MacroLiteral
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // TypeRef
        public RuleCall getTypeRefParserRuleCall_0() {
            return cTypeRefParserRuleCall_0;
        }

        // VariableLiteral
        public RuleCall getVariableLiteralParserRuleCall_1() {
            return cVariableLiteralParserRuleCall_1;
        }

        // MacroLiteral
        public RuleCall getMacroLiteralParserRuleCall_2() {
            return cMacroLiteralParserRuleCall_2;
        }
    }

    public class IntVarMacroElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "IntVarMacro");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final RuleCall cIntegerLiteralParserRuleCall_0 = (RuleCall) cAlternatives
                .eContents().get(0);
        private final RuleCall cVariableLiteralParserRuleCall_1 = (RuleCall) cAlternatives
                .eContents().get(1);
        private final RuleCall cMacroLiteralParserRuleCall_2 = (RuleCall) cAlternatives
                .eContents().get(2);

        // IntVarMacro returns Expression:
        // IntegerLiteral | VariableLiteral | MacroLiteral;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // IntegerLiteral | VariableLiteral | MacroLiteral
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // IntegerLiteral
        public RuleCall getIntegerLiteralParserRuleCall_0() {
            return cIntegerLiteralParserRuleCall_0;
        }

        // VariableLiteral
        public RuleCall getVariableLiteralParserRuleCall_1() {
            return cVariableLiteralParserRuleCall_1;
        }

        // MacroLiteral
        public RuleCall getMacroLiteralParserRuleCall_2() {
            return cMacroLiteralParserRuleCall_2;
        }
    }

    public class NAMEElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "NAME");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final RuleCall cATOMTerminalRuleCall_0 = (RuleCall) cAlternatives
                .eContents().get(0);
        private final RuleCall cKWParserRuleCall_1 = (RuleCall) cAlternatives
                .eContents().get(1);

        // // Literals
        // NAME:
        // ATOM | KW;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // ATOM | KW
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // ATOM
        public RuleCall getATOMTerminalRuleCall_0() {
            return cATOMTerminalRuleCall_0;
        }

        // KW
        public RuleCall getKWParserRuleCall_1() {
            return cKWParserRuleCall_1;
        }
    }

    public class NAMEVARElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "NAMEVAR");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final RuleCall cATOMTerminalRuleCall_0 = (RuleCall) cAlternatives
                .eContents().get(0);
        private final RuleCall cKWParserRuleCall_1 = (RuleCall) cAlternatives
                .eContents().get(1);
        private final RuleCall cVARIABLETerminalRuleCall_2 = (RuleCall) cAlternatives
                .eContents().get(2);

        // NAMEVAR:
        // ATOM | KW | VARIABLE;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // ATOM | KW | VARIABLE
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // ATOM
        public RuleCall getATOMTerminalRuleCall_0() {
            return cATOMTerminalRuleCall_0;
        }

        // KW
        public RuleCall getKWParserRuleCall_1() {
            return cKWParserRuleCall_1;
        }

        // VARIABLE
        public RuleCall getVARIABLETerminalRuleCall_2() {
            return cVARIABLETerminalRuleCall_2;
        }
    }

    public class MACROElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "MACRO");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Alternatives cAlternatives_0 = (Alternatives) cGroup
                .eContents().get(0);
        private final Keyword cQuestionMarkKeyword_0_0 = (Keyword) cAlternatives_0
                .eContents().get(0);
        private final Keyword cQuestionMarkQuestionMarkKeyword_0_1 = (Keyword) cAlternatives_0
                .eContents().get(1);
        private final Alternatives cAlternatives_1 = (Alternatives) cGroup
                .eContents().get(1);
        private final RuleCall cATOMTerminalRuleCall_1_0 = (RuleCall) cAlternatives_1
                .eContents().get(0);
        private final RuleCall cKW1ParserRuleCall_1_1 = (RuleCall) cAlternatives_1
                .eContents().get(1);
        private final RuleCall cVARIABLETerminalRuleCall_1_2 = (RuleCall) cAlternatives_1
                .eContents().get(2);

        // MACRO:
        // ("?" | "??") (ATOM | KW1 | VARIABLE);
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // ("?" | "??") (ATOM | KW1 | VARIABLE)
        public Group getGroup() {
            return cGroup;
        }

        // "?" | "??"
        public Alternatives getAlternatives_0() {
            return cAlternatives_0;
        }

        // "?"
        public Keyword getQuestionMarkKeyword_0_0() {
            return cQuestionMarkKeyword_0_0;
        }

        // "??"
        public Keyword getQuestionMarkQuestionMarkKeyword_0_1() {
            return cQuestionMarkQuestionMarkKeyword_0_1;
        }

        // ATOM | KW1 | VARIABLE
        public Alternatives getAlternatives_1() {
            return cAlternatives_1;
        }

        // ATOM
        public RuleCall getATOMTerminalRuleCall_1_0() {
            return cATOMTerminalRuleCall_1_0;
        }

        // KW1
        public RuleCall getKW1ParserRuleCall_1_1() {
            return cKW1ParserRuleCall_1_1;
        }

        // VARIABLE
        public RuleCall getVARIABLETerminalRuleCall_1_2() {
            return cVARIABLETerminalRuleCall_1_2;
        }
    }

    public class NAMEVARMACROElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "NAMEVARMACRO");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final RuleCall cATOMTerminalRuleCall_0 = (RuleCall) cAlternatives
                .eContents().get(0);
        private final RuleCall cKWParserRuleCall_1 = (RuleCall) cAlternatives
                .eContents().get(1);
        private final RuleCall cVARIABLETerminalRuleCall_2 = (RuleCall) cAlternatives
                .eContents().get(2);
        private final RuleCall cMACROParserRuleCall_3 = (RuleCall) cAlternatives
                .eContents().get(3);

        // NAMEVARMACRO:
        // ATOM | KW | VARIABLE | MACRO;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // ATOM | KW | VARIABLE | MACRO
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // ATOM
        public RuleCall getATOMTerminalRuleCall_0() {
            return cATOMTerminalRuleCall_0;
        }

        // KW
        public RuleCall getKWParserRuleCall_1() {
            return cKWParserRuleCall_1;
        }

        // VARIABLE
        public RuleCall getVARIABLETerminalRuleCall_2() {
            return cVARIABLETerminalRuleCall_2;
        }

        // MACRO
        public RuleCall getMACROParserRuleCall_3() {
            return cMACROParserRuleCall_3;
        }
    }

    public class NAMEMACROElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "NAMEMACRO");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final RuleCall cATOMTerminalRuleCall_0 = (RuleCall) cAlternatives
                .eContents().get(0);
        private final RuleCall cKWParserRuleCall_1 = (RuleCall) cAlternatives
                .eContents().get(1);
        private final RuleCall cMACROParserRuleCall_2 = (RuleCall) cAlternatives
                .eContents().get(2);

        // NAMEMACRO:
        // ATOM | KW | MACRO;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // ATOM | KW | MACRO
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // ATOM
        public RuleCall getATOMTerminalRuleCall_0() {
            return cATOMTerminalRuleCall_0;
        }

        // KW
        public RuleCall getKWParserRuleCall_1() {
            return cKWParserRuleCall_1;
        }

        // MACRO
        public RuleCall getMACROParserRuleCall_2() {
            return cMACROParserRuleCall_2;
        }
    }

    public class KWElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "KW");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final RuleCall cKW1ParserRuleCall_0 = (RuleCall) cAlternatives
                .eContents().get(0);
        private final Keyword cLineKeyword_1 = (Keyword) cAlternatives
                .eContents().get(1);

        // KW:
        // KW1 | "line";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // KW1 | "line"
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // KW1
        public RuleCall getKW1ParserRuleCall_0() {
            return cKW1ParserRuleCall_0;
        }

        // "line"
        public Keyword getLineKeyword_1() {
            return cLineKeyword_1;
        }
    }

    public class KW1Elements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "KW1");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final Keyword cSpecKeyword_0 = (Keyword) cAlternatives
                .eContents().get(0);
        private final Keyword cEndifKeyword_1 = (Keyword) cAlternatives
                .eContents().get(1);
        private final Keyword cIfdefKeyword_2 = (Keyword) cAlternatives
                .eContents().get(2);
        private final Keyword cIfndefKeyword_3 = (Keyword) cAlternatives
                .eContents().get(3);
        private final Keyword cTypeKeyword_4 = (Keyword) cAlternatives
                .eContents().get(4);
        private final Keyword cOpaqueKeyword_5 = (Keyword) cAlternatives
                .eContents().get(5);
        private final Keyword cRecordKeyword_6 = (Keyword) cAlternatives
                .eContents().get(6);
        private final Keyword cUndefKeyword_7 = (Keyword) cAlternatives
                .eContents().get(7);
        private final Keyword cModuleKeyword_8 = (Keyword) cAlternatives
                .eContents().get(8);
        private final Keyword cIncludeKeyword_9 = (Keyword) cAlternatives
                .eContents().get(9);
        private final Keyword cInclude_libKeyword_10 = (Keyword) cAlternatives
                .eContents().get(10);
        private final Keyword cDefineKeyword_11 = (Keyword) cAlternatives
                .eContents().get(11);
        private final Keyword cFileKeyword_12 = (Keyword) cAlternatives
                .eContents().get(12);
        private final Keyword cCallbackKeyword_13 = (Keyword) cAlternatives
                .eContents().get(13);
        private final Keyword cElseKeyword_14 = (Keyword) cAlternatives
                .eContents().get(14);
        private final Keyword cExportKeyword_15 = (Keyword) cAlternatives
                .eContents().get(15);
        private final Keyword cImportKeyword_16 = (Keyword) cAlternatives
                .eContents().get(16);
        private final Keyword cCompileKeyword_17 = (Keyword) cAlternatives
                .eContents().get(17);
        private final Keyword cEncodingKeyword_18 = (Keyword) cAlternatives
                .eContents().get(18);

        // KW1:
        // "spec" | "endif" | "ifdef" | "ifndef" | "type" | "opaque" | "record"
        // | "undef" | "module" | "include" | "include_lib"
        // | "define" | "file" | "callback" | "else" | "export" | "import" |
        // "compile" | "encoding";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // "spec" | "endif" | "ifdef" | "ifndef" | "type" | "opaque" | "record"
        // | "undef" | "module" | "include" | "include_lib" |
        // "define" | "file" | "callback" | "else" | "export" | "import" |
        // "compile" | "encoding"
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // "spec"
        public Keyword getSpecKeyword_0() {
            return cSpecKeyword_0;
        }

        // "endif"
        public Keyword getEndifKeyword_1() {
            return cEndifKeyword_1;
        }

        // "ifdef"
        public Keyword getIfdefKeyword_2() {
            return cIfdefKeyword_2;
        }

        // "ifndef"
        public Keyword getIfndefKeyword_3() {
            return cIfndefKeyword_3;
        }

        // "type"
        public Keyword getTypeKeyword_4() {
            return cTypeKeyword_4;
        }

        // "opaque"
        public Keyword getOpaqueKeyword_5() {
            return cOpaqueKeyword_5;
        }

        // "record"
        public Keyword getRecordKeyword_6() {
            return cRecordKeyword_6;
        }

        // "undef"
        public Keyword getUndefKeyword_7() {
            return cUndefKeyword_7;
        }

        // "module"
        public Keyword getModuleKeyword_8() {
            return cModuleKeyword_8;
        }

        // "include"
        public Keyword getIncludeKeyword_9() {
            return cIncludeKeyword_9;
        }

        // "include_lib"
        public Keyword getInclude_libKeyword_10() {
            return cInclude_libKeyword_10;
        }

        // "define"
        public Keyword getDefineKeyword_11() {
            return cDefineKeyword_11;
        }

        // "file"
        public Keyword getFileKeyword_12() {
            return cFileKeyword_12;
        }

        // "callback"
        public Keyword getCallbackKeyword_13() {
            return cCallbackKeyword_13;
        }

        // "else"
        public Keyword getElseKeyword_14() {
            return cElseKeyword_14;
        }

        // "export"
        public Keyword getExportKeyword_15() {
            return cExportKeyword_15;
        }

        // "import"
        public Keyword getImportKeyword_16() {
            return cImportKeyword_16;
        }

        // "compile"
        public Keyword getCompileKeyword_17() {
            return cCompileKeyword_17;
        }

        // "encoding"
        public Keyword getEncodingKeyword_18() {
            return cEncodingKeyword_18;
        }
    }

    public class RealKwElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "RealKw");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final Keyword cAfterKeyword_0 = (Keyword) cAlternatives
                .eContents().get(0);
        private final Keyword cAndKeyword_1 = (Keyword) cAlternatives
                .eContents().get(1);
        private final Keyword cAndalsoKeyword_2 = (Keyword) cAlternatives
                .eContents().get(2);
        private final Keyword cBandKeyword_3 = (Keyword) cAlternatives
                .eContents().get(3);
        private final Keyword cBeginKeyword_4 = (Keyword) cAlternatives
                .eContents().get(4);
        private final Keyword cBnotKeyword_5 = (Keyword) cAlternatives
                .eContents().get(5);
        private final Keyword cBorKeyword_6 = (Keyword) cAlternatives
                .eContents().get(6);
        private final Keyword cBslKeyword_7 = (Keyword) cAlternatives
                .eContents().get(7);
        private final Keyword cBsrKeyword_8 = (Keyword) cAlternatives
                .eContents().get(8);
        private final Keyword cBxorKeyword_9 = (Keyword) cAlternatives
                .eContents().get(9);
        private final Keyword cCaseKeyword_10 = (Keyword) cAlternatives
                .eContents().get(10);
        private final Keyword cCatchKeyword_11 = (Keyword) cAlternatives
                .eContents().get(11);
        private final Keyword cCondKeyword_12 = (Keyword) cAlternatives
                .eContents().get(12);
        private final Keyword cDivKeyword_13 = (Keyword) cAlternatives
                .eContents().get(13);
        private final Keyword cEndKeyword_14 = (Keyword) cAlternatives
                .eContents().get(14);
        private final Keyword cFunKeyword_15 = (Keyword) cAlternatives
                .eContents().get(15);
        private final Keyword cIfKeyword_16 = (Keyword) cAlternatives
                .eContents().get(16);
        private final Keyword cLetKeyword_17 = (Keyword) cAlternatives
                .eContents().get(17);
        private final Keyword cNotKeyword_18 = (Keyword) cAlternatives
                .eContents().get(18);
        private final Keyword cOfKeyword_19 = (Keyword) cAlternatives
                .eContents().get(19);
        private final Keyword cOrKeyword_20 = (Keyword) cAlternatives
                .eContents().get(20);
        private final Keyword cOrelseKeyword_21 = (Keyword) cAlternatives
                .eContents().get(21);
        private final Keyword cQueryKeyword_22 = (Keyword) cAlternatives
                .eContents().get(22);
        private final Keyword cReceiveKeyword_23 = (Keyword) cAlternatives
                .eContents().get(23);
        private final Keyword cRemKeyword_24 = (Keyword) cAlternatives
                .eContents().get(24);
        private final Keyword cTryKeyword_25 = (Keyword) cAlternatives
                .eContents().get(25);
        private final Keyword cWhenKeyword_26 = (Keyword) cAlternatives
                .eContents().get(26);
        private final Keyword cXorKeyword_27 = (Keyword) cAlternatives
                .eContents().get(27);

        // RealKw:
        // "after" | "and" | "andalso" | "band" | "begin" | "bnot" | "bor" |
        // "bsl" | "bsr" | "bxor" | "case" | "catch" | "cond"
        // | "div" | "end" | "fun" | "if" | "let" | "not" | "of" | "or" |
        // "orelse" | "query" | "receive" | "rem" | "try" |
        // "when" | "xor";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // "after" | "and" | "andalso" | "band" | "begin" | "bnot" | "bor" |
        // "bsl" | "bsr" | "bxor" | "case" | "catch" | "cond" |
        // "div" | "end" | "fun" | "if" | "let" | "not" | "of" | "or" | "orelse"
        // | "query" | "receive" | "rem" | "try" | "when" |
        // "xor"
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // "after"
        public Keyword getAfterKeyword_0() {
            return cAfterKeyword_0;
        }

        // "and"
        public Keyword getAndKeyword_1() {
            return cAndKeyword_1;
        }

        // "andalso"
        public Keyword getAndalsoKeyword_2() {
            return cAndalsoKeyword_2;
        }

        // "band"
        public Keyword getBandKeyword_3() {
            return cBandKeyword_3;
        }

        // "begin"
        public Keyword getBeginKeyword_4() {
            return cBeginKeyword_4;
        }

        // "bnot"
        public Keyword getBnotKeyword_5() {
            return cBnotKeyword_5;
        }

        // "bor"
        public Keyword getBorKeyword_6() {
            return cBorKeyword_6;
        }

        // "bsl"
        public Keyword getBslKeyword_7() {
            return cBslKeyword_7;
        }

        // "bsr"
        public Keyword getBsrKeyword_8() {
            return cBsrKeyword_8;
        }

        // "bxor"
        public Keyword getBxorKeyword_9() {
            return cBxorKeyword_9;
        }

        // "case"
        public Keyword getCaseKeyword_10() {
            return cCaseKeyword_10;
        }

        // "catch"
        public Keyword getCatchKeyword_11() {
            return cCatchKeyword_11;
        }

        // "cond"
        public Keyword getCondKeyword_12() {
            return cCondKeyword_12;
        }

        // "div"
        public Keyword getDivKeyword_13() {
            return cDivKeyword_13;
        }

        // "end"
        public Keyword getEndKeyword_14() {
            return cEndKeyword_14;
        }

        // "fun"
        public Keyword getFunKeyword_15() {
            return cFunKeyword_15;
        }

        // "if"
        public Keyword getIfKeyword_16() {
            return cIfKeyword_16;
        }

        // "let"
        public Keyword getLetKeyword_17() {
            return cLetKeyword_17;
        }

        // "not"
        public Keyword getNotKeyword_18() {
            return cNotKeyword_18;
        }

        // "of"
        public Keyword getOfKeyword_19() {
            return cOfKeyword_19;
        }

        // "or"
        public Keyword getOrKeyword_20() {
            return cOrKeyword_20;
        }

        // "orelse"
        public Keyword getOrelseKeyword_21() {
            return cOrelseKeyword_21;
        }

        // "query"
        public Keyword getQueryKeyword_22() {
            return cQueryKeyword_22;
        }

        // "receive"
        public Keyword getReceiveKeyword_23() {
            return cReceiveKeyword_23;
        }

        // "rem"
        public Keyword getRemKeyword_24() {
            return cRemKeyword_24;
        }

        // "try"
        public Keyword getTryKeyword_25() {
            return cTryKeyword_25;
        }

        // "when"
        public Keyword getWhenKeyword_26() {
            return cWhenKeyword_26;
        }

        // "xor"
        public Keyword getXorKeyword_27() {
            return cXorKeyword_27;
        }
    }

    public class INTEGERElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "INTEGER");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final RuleCall cINTTerminalRuleCall_0 = (RuleCall) cAlternatives
                .eContents().get(0);
        private final RuleCall cBASED_INTTerminalRuleCall_1 = (RuleCall) cAlternatives
                .eContents().get(1);

        // INTEGER:
        // INT | BASED_INT;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // INT | BASED_INT
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // INT
        public RuleCall getINTTerminalRuleCall_0() {
            return cINTTerminalRuleCall_0;
        }

        // BASED_INT
        public RuleCall getBASED_INTTerminalRuleCall_1() {
            return cBASED_INTTerminalRuleCall_1;
        }
    }

    public class FLOATElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "FLOAT");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cINTTerminalRuleCall_0 = (RuleCall) cGroup
                .eContents().get(0);
        private final Keyword cFullStopKeyword_1 = (Keyword) cGroup.eContents()
                .get(1);
        private final Alternatives cAlternatives_2 = (Alternatives) cGroup
                .eContents().get(2);
        private final RuleCall cEXT_INTTerminalRuleCall_2_0 = (RuleCall) cAlternatives_2
                .eContents().get(0);
        private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall) cAlternatives_2
                .eContents().get(1);

        // FLOAT hidden():
        // INT "." (EXT_INT | INT);
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // INT "." (EXT_INT | INT)
        public Group getGroup() {
            return cGroup;
        }

        // INT
        public RuleCall getINTTerminalRuleCall_0() {
            return cINTTerminalRuleCall_0;
        }

        // "."
        public Keyword getFullStopKeyword_1() {
            return cFullStopKeyword_1;
        }

        // EXT_INT | INT
        public Alternatives getAlternatives_2() {
            return cAlternatives_2;
        }

        // EXT_INT
        public RuleCall getEXT_INTTerminalRuleCall_2_0() {
            return cEXT_INTTerminalRuleCall_2_0;
        }

        // INT
        public RuleCall getINTTerminalRuleCall_2_1() {
            return cINTTerminalRuleCall_2_1;
        }
    }

    public class SpecFunElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "SpecFun");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Group cGroup_0 = (Group) cGroup.eContents().get(0);
        private final Assignment cModuleAssignment_0_0 = (Assignment) cGroup_0
                .eContents().get(0);
        private final RuleCall cModuleModuleVarMacroParserRuleCall_0_0_0 = (RuleCall) cModuleAssignment_0_0
                .eContents().get(0);
        private final Keyword cColonKeyword_0_1 = (Keyword) cGroup_0
                .eContents().get(1);
        private final Assignment cFunctionAssignment_1 = (Assignment) cGroup
                .eContents().get(1);
        private final RuleCall cFunctionFunctionVarMacroParserRuleCall_1_0 = (RuleCall) cFunctionAssignment_1
                .eContents().get(0);
        private final Group cGroup_2 = (Group) cGroup.eContents().get(2);
        private final Keyword cSolidusKeyword_2_0 = (Keyword) cGroup_2
                .eContents().get(0);
        private final Assignment cArityAssignment_2_1 = (Assignment) cGroup_2
                .eContents().get(1);
        private final RuleCall cArityIntVarMacroParserRuleCall_2_1_0 = (RuleCall) cArityAssignment_2_1
                .eContents().get(0);
        private final Keyword cColonColonKeyword_2_2 = (Keyword) cGroup_2
                .eContents().get(2);

        // // Type language
        // SpecFun returns FunRef:
        // (module=ModuleVarMacro ":")? function=FunctionVarMacro ("/"
        // arity=IntVarMacro "::")?;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // (module=ModuleVarMacro ":")? function=FunctionVarMacro ("/"
        // arity=IntVarMacro "::")?
        public Group getGroup() {
            return cGroup;
        }

        // (module=ModuleVarMacro ":")?
        public Group getGroup_0() {
            return cGroup_0;
        }

        // module=ModuleVarMacro
        public Assignment getModuleAssignment_0_0() {
            return cModuleAssignment_0_0;
        }

        // ModuleVarMacro
        public RuleCall getModuleModuleVarMacroParserRuleCall_0_0_0() {
            return cModuleModuleVarMacroParserRuleCall_0_0_0;
        }

        // ":"
        public Keyword getColonKeyword_0_1() {
            return cColonKeyword_0_1;
        }

        // function=FunctionVarMacro
        public Assignment getFunctionAssignment_1() {
            return cFunctionAssignment_1;
        }

        // FunctionVarMacro
        public RuleCall getFunctionFunctionVarMacroParserRuleCall_1_0() {
            return cFunctionFunctionVarMacroParserRuleCall_1_0;
        }

        // ("/" arity=IntVarMacro "::")?
        public Group getGroup_2() {
            return cGroup_2;
        }

        // "/"
        public Keyword getSolidusKeyword_2_0() {
            return cSolidusKeyword_2_0;
        }

        // arity=IntVarMacro
        public Assignment getArityAssignment_2_1() {
            return cArityAssignment_2_1;
        }

        // IntVarMacro
        public RuleCall getArityIntVarMacroParserRuleCall_2_1_0() {
            return cArityIntVarMacroParserRuleCall_2_1_0;
        }

        // "::"
        public Keyword getColonColonKeyword_2_2() {
            return cColonColonKeyword_2_2;
        }
    }

    public class TypeSigElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "TypeSig");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cDeclAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final RuleCall cDeclFunTypeParserRuleCall_0_0 = (RuleCall) cDeclAssignment_0
                .eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Keyword cWhenKeyword_1_0 = (Keyword) cGroup_1.eContents()
                .get(0);
        private final Assignment cGuardsAssignment_1_1 = (Assignment) cGroup_1
                .eContents().get(1);
        private final RuleCall cGuardsTypeGuardsParserRuleCall_1_1_0 = (RuleCall) cGuardsAssignment_1_1
                .eContents().get(0);

        // TypeSig:
        // decl=FunType ("when" guards=TypeGuards)?;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // decl=FunType ("when" guards=TypeGuards)?
        public Group getGroup() {
            return cGroup;
        }

        // decl=FunType
        public Assignment getDeclAssignment_0() {
            return cDeclAssignment_0;
        }

        // FunType
        public RuleCall getDeclFunTypeParserRuleCall_0_0() {
            return cDeclFunTypeParserRuleCall_0_0;
        }

        // ("when" guards=TypeGuards)?
        public Group getGroup_1() {
            return cGroup_1;
        }

        // "when"
        public Keyword getWhenKeyword_1_0() {
            return cWhenKeyword_1_0;
        }

        // guards=TypeGuards
        public Assignment getGuardsAssignment_1_1() {
            return cGuardsAssignment_1_1;
        }

        // TypeGuards
        public RuleCall getGuardsTypeGuardsParserRuleCall_1_1_0() {
            return cGuardsTypeGuardsParserRuleCall_1_1_0;
        }
    }

    public class FunTypeElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "FunType");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Keyword cLeftParenthesisKeyword_0 = (Keyword) cGroup
                .eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Assignment cArgsAssignment_1_0 = (Assignment) cGroup_1
                .eContents().get(0);
        private final RuleCall cArgsTopTypeParserRuleCall_1_0_0 = (RuleCall) cArgsAssignment_1_0
                .eContents().get(0);
        private final Group cGroup_1_1 = (Group) cGroup_1.eContents().get(1);
        private final Keyword cCommaKeyword_1_1_0 = (Keyword) cGroup_1_1
                .eContents().get(0);
        private final Assignment cArgsAssignment_1_1_1 = (Assignment) cGroup_1_1
                .eContents().get(1);
        private final RuleCall cArgsTopTypeParserRuleCall_1_1_1_0 = (RuleCall) cArgsAssignment_1_1_1
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_2 = (Keyword) cGroup
                .eContents().get(2);
        private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword) cGroup
                .eContents().get(3);
        private final Assignment cReturnAssignment_4 = (Assignment) cGroup
                .eContents().get(4);
        private final RuleCall cReturnTopTypeParserRuleCall_4_0 = (RuleCall) cReturnAssignment_4
                .eContents().get(0);

        // FunType:
        // "(" (args+=TopType ("," args+=TopType)*)? ")" "->" return=TopType;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // "(" (args+=TopType ("," args+=TopType)*)? ")" "->" return=TopType
        public Group getGroup() {
            return cGroup;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_0() {
            return cLeftParenthesisKeyword_0;
        }

        // (args+=TopType ("," args+=TopType)*)?
        public Group getGroup_1() {
            return cGroup_1;
        }

        // args+=TopType
        public Assignment getArgsAssignment_1_0() {
            return cArgsAssignment_1_0;
        }

        // TopType
        public RuleCall getArgsTopTypeParserRuleCall_1_0_0() {
            return cArgsTopTypeParserRuleCall_1_0_0;
        }

        // ("," args+=TopType)*
        public Group getGroup_1_1() {
            return cGroup_1_1;
        }

        // ","
        public Keyword getCommaKeyword_1_1_0() {
            return cCommaKeyword_1_1_0;
        }

        // args+=TopType
        public Assignment getArgsAssignment_1_1_1() {
            return cArgsAssignment_1_1_1;
        }

        // TopType
        public RuleCall getArgsTopTypeParserRuleCall_1_1_1_0() {
            return cArgsTopTypeParserRuleCall_1_1_1_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_2() {
            return cRightParenthesisKeyword_2;
        }

        // "->"
        public Keyword getHyphenMinusGreaterThanSignKeyword_3() {
            return cHyphenMinusGreaterThanSignKeyword_3;
        }

        // return=TopType
        public Assignment getReturnAssignment_4() {
            return cReturnAssignment_4;
        }

        // TopType
        public RuleCall getReturnTopTypeParserRuleCall_4_0() {
            return cReturnTopTypeParserRuleCall_4_0;
        }
    }

    public class TypeGuardsElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "TypeGuards");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cItemsAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final RuleCall cItemsTypeGuardParserRuleCall_0_0 = (RuleCall) cItemsAssignment_0
                .eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Keyword cCommaKeyword_1_0 = (Keyword) cGroup_1
                .eContents().get(0);
        private final Assignment cItemsAssignment_1_1 = (Assignment) cGroup_1
                .eContents().get(1);
        private final RuleCall cItemsTypeGuardParserRuleCall_1_1_0 = (RuleCall) cItemsAssignment_1_1
                .eContents().get(0);

        // TypeGuards:
        // items+=TypeGuard ("," items+=TypeGuard)*;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // items+=TypeGuard ("," items+=TypeGuard)*
        public Group getGroup() {
            return cGroup;
        }

        // items+=TypeGuard
        public Assignment getItemsAssignment_0() {
            return cItemsAssignment_0;
        }

        // TypeGuard
        public RuleCall getItemsTypeGuardParserRuleCall_0_0() {
            return cItemsTypeGuardParserRuleCall_0_0;
        }

        // ("," items+=TypeGuard)*
        public Group getGroup_1() {
            return cGroup_1;
        }

        // ","
        public Keyword getCommaKeyword_1_0() {
            return cCommaKeyword_1_0;
        }

        // items+=TypeGuard
        public Assignment getItemsAssignment_1_1() {
            return cItemsAssignment_1_1;
        }

        // TypeGuard
        public RuleCall getItemsTypeGuardParserRuleCall_1_1_0() {
            return cItemsTypeGuardParserRuleCall_1_1_0;
        }
    }

    public class TypeGuardElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "TypeGuard");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final Group cGroup_0 = (Group) cAlternatives.eContents().get(0);
        private final Assignment cTypeNameAssignment_0_0 = (Assignment) cGroup_0
                .eContents().get(0);
        private final RuleCall cTypeNameTypeRefParserRuleCall_0_0_0 = (RuleCall) cTypeNameAssignment_0_0
                .eContents().get(0);
        private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword) cGroup_0
                .eContents().get(1);
        private final Assignment cTypesAssignment_0_2 = (Assignment) cGroup_0
                .eContents().get(2);
        private final RuleCall cTypesTopTypeParserRuleCall_0_2_0 = (RuleCall) cTypesAssignment_0_2
                .eContents().get(0);
        private final Group cGroup_0_3 = (Group) cGroup_0.eContents().get(3);
        private final Keyword cCommaKeyword_0_3_0 = (Keyword) cGroup_0_3
                .eContents().get(0);
        private final Assignment cTypesAssignment_0_3_1 = (Assignment) cGroup_0_3
                .eContents().get(1);
        private final RuleCall cTypesTopTypeParserRuleCall_0_3_1_0 = (RuleCall) cTypesAssignment_0_3_1
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_0_4 = (Keyword) cGroup_0
                .eContents().get(4);
        private final Group cGroup_1 = (Group) cAlternatives.eContents().get(1);
        private final Assignment cTypeNameAssignment_1_0 = (Assignment) cGroup_1
                .eContents().get(0);
        private final RuleCall cTypeNameVariableLiteralParserRuleCall_1_0_0 = (RuleCall) cTypeNameAssignment_1_0
                .eContents().get(0);
        private final Keyword cColonColonKeyword_1_1 = (Keyword) cGroup_1
                .eContents().get(1);
        private final Assignment cTypeAssignment_1_2 = (Assignment) cGroup_1
                .eContents().get(2);
        private final RuleCall cTypeTopTypeParserRuleCall_1_2_0 = (RuleCall) cTypeAssignment_1_2
                .eContents().get(0);

        // TypeGuard:
        // typeName=TypeRef "(" types+=TopType ("," types+=TopType)* ")" |
        // typeName=VariableLiteral "::" type=TopType;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // typeName=TypeRef "(" types+=TopType ("," types+=TopType)* ")" |
        // typeName=VariableLiteral "::" type=TopType
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // typeName=TypeRef "(" types+=TopType ("," types+=TopType)* ")"
        public Group getGroup_0() {
            return cGroup_0;
        }

        // typeName=TypeRef
        public Assignment getTypeNameAssignment_0_0() {
            return cTypeNameAssignment_0_0;
        }

        // TypeRef
        public RuleCall getTypeNameTypeRefParserRuleCall_0_0_0() {
            return cTypeNameTypeRefParserRuleCall_0_0_0;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_0_1() {
            return cLeftParenthesisKeyword_0_1;
        }

        // types+=TopType
        public Assignment getTypesAssignment_0_2() {
            return cTypesAssignment_0_2;
        }

        // TopType
        public RuleCall getTypesTopTypeParserRuleCall_0_2_0() {
            return cTypesTopTypeParserRuleCall_0_2_0;
        }

        // ("," types+=TopType)*
        public Group getGroup_0_3() {
            return cGroup_0_3;
        }

        // ","
        public Keyword getCommaKeyword_0_3_0() {
            return cCommaKeyword_0_3_0;
        }

        // types+=TopType
        public Assignment getTypesAssignment_0_3_1() {
            return cTypesAssignment_0_3_1;
        }

        // TopType
        public RuleCall getTypesTopTypeParserRuleCall_0_3_1_0() {
            return cTypesTopTypeParserRuleCall_0_3_1_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_0_4() {
            return cRightParenthesisKeyword_0_4;
        }

        // typeName=VariableLiteral "::" type=TopType
        public Group getGroup_1() {
            return cGroup_1;
        }

        // typeName=VariableLiteral
        public Assignment getTypeNameAssignment_1_0() {
            return cTypeNameAssignment_1_0;
        }

        // VariableLiteral
        public RuleCall getTypeNameVariableLiteralParserRuleCall_1_0_0() {
            return cTypeNameVariableLiteralParserRuleCall_1_0_0;
        }

        // "::"
        public Keyword getColonColonKeyword_1_1() {
            return cColonColonKeyword_1_1;
        }

        // type=TopType
        public Assignment getTypeAssignment_1_2() {
            return cTypeAssignment_1_2;
        }

        // TopType
        public RuleCall getTypeTopTypeParserRuleCall_1_2_0() {
            return cTypeTopTypeParserRuleCall_1_2_0;
        }
    }

    public class TopTypeElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "TopType");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Group cGroup_0 = (Group) cGroup.eContents().get(0);
        private final Assignment cVarAssignment_0_0 = (Assignment) cGroup_0
                .eContents().get(0);
        private final RuleCall cVarVARIABLETerminalRuleCall_0_0_0 = (RuleCall) cVarAssignment_0_0
                .eContents().get(0);
        private final Keyword cColonColonKeyword_0_1 = (Keyword) cGroup_0
                .eContents().get(1);
        private final Assignment cTypeAssignment_1 = (Assignment) cGroup
                .eContents().get(1);
        private final RuleCall cTypeType100ParserRuleCall_1_0 = (RuleCall) cTypeAssignment_1
                .eContents().get(0);

        // TopType:
        // (var=VARIABLE "::")? type=Type100;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // (var=VARIABLE "::")? type=Type100
        public Group getGroup() {
            return cGroup;
        }

        // (var=VARIABLE "::")?
        public Group getGroup_0() {
            return cGroup_0;
        }

        // var=VARIABLE
        public Assignment getVarAssignment_0_0() {
            return cVarAssignment_0_0;
        }

        // VARIABLE
        public RuleCall getVarVARIABLETerminalRuleCall_0_0_0() {
            return cVarVARIABLETerminalRuleCall_0_0_0;
        }

        // "::"
        public Keyword getColonColonKeyword_0_1() {
            return cColonColonKeyword_0_1;
        }

        // type=Type100
        public Assignment getTypeAssignment_1() {
            return cTypeAssignment_1;
        }

        // Type100
        public RuleCall getTypeType100ParserRuleCall_1_0() {
            return cTypeType100ParserRuleCall_1_0;
        }
    }

    public class Type100Elements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "Type100");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cType200ParserRuleCall_0 = (RuleCall) cGroup
                .eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Group cGroup_1_0 = (Group) cGroup_1.eContents().get(0);
        private final Group cGroup_1_0_0 = (Group) cGroup_1_0.eContents()
                .get(0);
        private final Action cTopTypeLeftOperandAction_1_0_0_0 = (Action) cGroup_1_0_0
                .eContents().get(0);
        private final Assignment cOpAssignment_1_0_0_1 = (Assignment) cGroup_1_0_0
                .eContents().get(1);
        private final Keyword cOpVerticalLineKeyword_1_0_0_1_0 = (Keyword) cOpAssignment_1_0_0_1
                .eContents().get(0);
        private final Assignment cRightOperandAssignment_1_1 = (Assignment) cGroup_1
                .eContents().get(1);
        private final RuleCall cRightOperandType200ParserRuleCall_1_1_0 = (RuleCall) cRightOperandAssignment_1_1
                .eContents().get(0);

        // Type100:
        // Type200 (=> ({TopType.leftOperand=current} op="|")
        // rightOperand=Type200)*;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // Type200 (=> ({TopType.leftOperand=current} op="|")
        // rightOperand=Type200)*
        public Group getGroup() {
            return cGroup;
        }

        // Type200
        public RuleCall getType200ParserRuleCall_0() {
            return cType200ParserRuleCall_0;
        }

        // (=> ({TopType.leftOperand=current} op="|") rightOperand=Type200)*
        public Group getGroup_1() {
            return cGroup_1;
        }

        // => ({TopType.leftOperand=current} op="|")
        public Group getGroup_1_0() {
            return cGroup_1_0;
        }

        // {TopType.leftOperand=current} op="|"
        public Group getGroup_1_0_0() {
            return cGroup_1_0_0;
        }

        // {TopType.leftOperand=current}
        public Action getTopTypeLeftOperandAction_1_0_0_0() {
            return cTopTypeLeftOperandAction_1_0_0_0;
        }

        // op="|"
        public Assignment getOpAssignment_1_0_0_1() {
            return cOpAssignment_1_0_0_1;
        }

        // "|"
        public Keyword getOpVerticalLineKeyword_1_0_0_1_0() {
            return cOpVerticalLineKeyword_1_0_0_1_0;
        }

        // rightOperand=Type200
        public Assignment getRightOperandAssignment_1_1() {
            return cRightOperandAssignment_1_1;
        }

        // Type200
        public RuleCall getRightOperandType200ParserRuleCall_1_1_0() {
            return cRightOperandType200ParserRuleCall_1_1_0;
        }
    }

    public class Type200Elements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "Type200");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cType300ParserRuleCall_0 = (RuleCall) cGroup
                .eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Group cGroup_1_0 = (Group) cGroup_1.eContents().get(0);
        private final Group cGroup_1_0_0 = (Group) cGroup_1_0.eContents()
                .get(0);
        private final Action cTopTypeLeftOperandAction_1_0_0_0 = (Action) cGroup_1_0_0
                .eContents().get(0);
        private final Assignment cOpAssignment_1_0_0_1 = (Assignment) cGroup_1_0_0
                .eContents().get(1);
        private final Keyword cOpFullStopFullStopKeyword_1_0_0_1_0 = (Keyword) cOpAssignment_1_0_0_1
                .eContents().get(0);
        private final Assignment cRightOperandAssignment_1_1 = (Assignment) cGroup_1
                .eContents().get(1);
        private final RuleCall cRightOperandType300ParserRuleCall_1_1_0 = (RuleCall) cRightOperandAssignment_1_1
                .eContents().get(0);

        // Type200:
        // Type300 (=> ({TopType.leftOperand=current} op="..")
        // rightOperand=Type300)*;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // Type300 (=> ({TopType.leftOperand=current} op="..")
        // rightOperand=Type300)*
        public Group getGroup() {
            return cGroup;
        }

        // Type300
        public RuleCall getType300ParserRuleCall_0() {
            return cType300ParserRuleCall_0;
        }

        // (=> ({TopType.leftOperand=current} op="..") rightOperand=Type300)*
        public Group getGroup_1() {
            return cGroup_1;
        }

        // => ({TopType.leftOperand=current} op="..")
        public Group getGroup_1_0() {
            return cGroup_1_0;
        }

        // {TopType.leftOperand=current} op=".."
        public Group getGroup_1_0_0() {
            return cGroup_1_0_0;
        }

        // {TopType.leftOperand=current}
        public Action getTopTypeLeftOperandAction_1_0_0_0() {
            return cTopTypeLeftOperandAction_1_0_0_0;
        }

        // op=".."
        public Assignment getOpAssignment_1_0_0_1() {
            return cOpAssignment_1_0_0_1;
        }

        // ".."
        public Keyword getOpFullStopFullStopKeyword_1_0_0_1_0() {
            return cOpFullStopFullStopKeyword_1_0_0_1_0;
        }

        // rightOperand=Type300
        public Assignment getRightOperandAssignment_1_1() {
            return cRightOperandAssignment_1_1;
        }

        // Type300
        public RuleCall getRightOperandType300ParserRuleCall_1_1_0() {
            return cRightOperandType300ParserRuleCall_1_1_0;
        }
    }

    public class Type300Elements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "Type300");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cType400ParserRuleCall_0 = (RuleCall) cGroup
                .eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Group cGroup_1_0 = (Group) cGroup_1.eContents().get(0);
        private final Group cGroup_1_0_0 = (Group) cGroup_1_0.eContents()
                .get(0);
        private final Action cTopTypeLeftOperandAction_1_0_0_0 = (Action) cGroup_1_0_0
                .eContents().get(0);
        private final Assignment cOpAssignment_1_0_0_1 = (Assignment) cGroup_1_0_0
                .eContents().get(1);
        private final RuleCall cOpADDOPParserRuleCall_1_0_0_1_0 = (RuleCall) cOpAssignment_1_0_0_1
                .eContents().get(0);
        private final Assignment cRightOperandAssignment_1_1 = (Assignment) cGroup_1
                .eContents().get(1);
        private final RuleCall cRightOperandType400ParserRuleCall_1_1_0 = (RuleCall) cRightOperandAssignment_1_1
                .eContents().get(0);

        // Type300:
        // Type400 (=> ({TopType.leftOperand=current} op=ADDOP)
        // rightOperand=Type400)*;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // Type400 (=> ({TopType.leftOperand=current} op=ADDOP)
        // rightOperand=Type400)*
        public Group getGroup() {
            return cGroup;
        }

        // Type400
        public RuleCall getType400ParserRuleCall_0() {
            return cType400ParserRuleCall_0;
        }

        // (=> ({TopType.leftOperand=current} op=ADDOP) rightOperand=Type400)*
        public Group getGroup_1() {
            return cGroup_1;
        }

        // => ({TopType.leftOperand=current} op=ADDOP)
        public Group getGroup_1_0() {
            return cGroup_1_0;
        }

        // {TopType.leftOperand=current} op=ADDOP
        public Group getGroup_1_0_0() {
            return cGroup_1_0_0;
        }

        // {TopType.leftOperand=current}
        public Action getTopTypeLeftOperandAction_1_0_0_0() {
            return cTopTypeLeftOperandAction_1_0_0_0;
        }

        // op=ADDOP
        public Assignment getOpAssignment_1_0_0_1() {
            return cOpAssignment_1_0_0_1;
        }

        // ADDOP
        public RuleCall getOpADDOPParserRuleCall_1_0_0_1_0() {
            return cOpADDOPParserRuleCall_1_0_0_1_0;
        }

        // rightOperand=Type400
        public Assignment getRightOperandAssignment_1_1() {
            return cRightOperandAssignment_1_1;
        }

        // Type400
        public RuleCall getRightOperandType400ParserRuleCall_1_1_0() {
            return cRightOperandType400ParserRuleCall_1_1_0;
        }
    }

    public class Type400Elements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "Type400");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final RuleCall cType500ParserRuleCall_0 = (RuleCall) cGroup
                .eContents().get(0);
        private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
        private final Group cGroup_1_0 = (Group) cGroup_1.eContents().get(0);
        private final Group cGroup_1_0_0 = (Group) cGroup_1_0.eContents()
                .get(0);
        private final Action cTopTypeLeftOperandAction_1_0_0_0 = (Action) cGroup_1_0_0
                .eContents().get(0);
        private final Assignment cOpAssignment_1_0_0_1 = (Assignment) cGroup_1_0_0
                .eContents().get(1);
        private final RuleCall cOpMULTOPParserRuleCall_1_0_0_1_0 = (RuleCall) cOpAssignment_1_0_0_1
                .eContents().get(0);
        private final Assignment cRightOperandAssignment_1_1 = (Assignment) cGroup_1
                .eContents().get(1);
        private final RuleCall cRightOperandType500ParserRuleCall_1_1_0 = (RuleCall) cRightOperandAssignment_1_1
                .eContents().get(0);

        // Type400:
        // Type500 (=> ({TopType.leftOperand=current} op=MULTOP)
        // rightOperand=Type500)*;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // Type500 (=> ({TopType.leftOperand=current} op=MULTOP)
        // rightOperand=Type500)*
        public Group getGroup() {
            return cGroup;
        }

        // Type500
        public RuleCall getType500ParserRuleCall_0() {
            return cType500ParserRuleCall_0;
        }

        // (=> ({TopType.leftOperand=current} op=MULTOP) rightOperand=Type500)*
        public Group getGroup_1() {
            return cGroup_1;
        }

        // => ({TopType.leftOperand=current} op=MULTOP)
        public Group getGroup_1_0() {
            return cGroup_1_0;
        }

        // {TopType.leftOperand=current} op=MULTOP
        public Group getGroup_1_0_0() {
            return cGroup_1_0_0;
        }

        // {TopType.leftOperand=current}
        public Action getTopTypeLeftOperandAction_1_0_0_0() {
            return cTopTypeLeftOperandAction_1_0_0_0;
        }

        // op=MULTOP
        public Assignment getOpAssignment_1_0_0_1() {
            return cOpAssignment_1_0_0_1;
        }

        // MULTOP
        public RuleCall getOpMULTOPParserRuleCall_1_0_0_1_0() {
            return cOpMULTOPParserRuleCall_1_0_0_1_0;
        }

        // rightOperand=Type500
        public Assignment getRightOperandAssignment_1_1() {
            return cRightOperandAssignment_1_1;
        }

        // Type500
        public RuleCall getRightOperandType500ParserRuleCall_1_1_0() {
            return cRightOperandType500ParserRuleCall_1_1_0;
        }
    }

    public class Type500Elements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "Type500");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final Group cGroup_0 = (Group) cAlternatives.eContents().get(0);
        private final Action cUnaryTypeAction_0_0 = (Action) cGroup_0
                .eContents().get(0);
        private final Assignment cOpAssignment_0_1 = (Assignment) cGroup_0
                .eContents().get(1);
        private final RuleCall cOpPREFIXOPParserRuleCall_0_1_0 = (RuleCall) cOpAssignment_0_1
                .eContents().get(0);
        private final Assignment cOperandAssignment_0_2 = (Assignment) cGroup_0
                .eContents().get(2);
        private final RuleCall cOperandTypeParserRuleCall_0_2_0 = (RuleCall) cOperandAssignment_0_2
                .eContents().get(0);
        private final RuleCall cTypeParserRuleCall_1 = (RuleCall) cAlternatives
                .eContents().get(1);

        // Type500:
        // {UnaryType} op=PREFIXOP operand=Type | Type;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // {UnaryType} op=PREFIXOP operand=Type | Type
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // {UnaryType} op=PREFIXOP operand=Type
        public Group getGroup_0() {
            return cGroup_0;
        }

        // {UnaryType}
        public Action getUnaryTypeAction_0_0() {
            return cUnaryTypeAction_0_0;
        }

        // op=PREFIXOP
        public Assignment getOpAssignment_0_1() {
            return cOpAssignment_0_1;
        }

        // PREFIXOP
        public RuleCall getOpPREFIXOPParserRuleCall_0_1_0() {
            return cOpPREFIXOPParserRuleCall_0_1_0;
        }

        // operand=Type
        public Assignment getOperandAssignment_0_2() {
            return cOperandAssignment_0_2;
        }

        // Type
        public RuleCall getOperandTypeParserRuleCall_0_2_0() {
            return cOperandTypeParserRuleCall_0_2_0;
        }

        // Type
        public RuleCall getTypeParserRuleCall_1() {
            return cTypeParserRuleCall_1;
        }
    }

    public class TypeElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "Type");
        private final Alternatives cAlternatives = (Alternatives) rule
                .eContents().get(1);
        private final Group cGroup_0 = (Group) cAlternatives.eContents().get(0);
        private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword) cGroup_0
                .eContents().get(0);
        private final RuleCall cTopTypeParserRuleCall_0_1 = (RuleCall) cGroup_0
                .eContents().get(1);
        private final Keyword cRightParenthesisKeyword_0_2 = (Keyword) cGroup_0
                .eContents().get(2);
        private final Group cGroup_1 = (Group) cAlternatives.eContents().get(1);
        private final Action cRemoteTypeAction_1_0 = (Action) cGroup_1
                .eContents().get(0);
        private final Group cGroup_1_1 = (Group) cGroup_1.eContents().get(1);
        private final Assignment cMAssignment_1_1_0 = (Assignment) cGroup_1_1
                .eContents().get(0);
        private final RuleCall cMModuleVarMacroParserRuleCall_1_1_0_0 = (RuleCall) cMAssignment_1_1_0
                .eContents().get(0);
        private final Keyword cColonKeyword_1_1_1 = (Keyword) cGroup_1_1
                .eContents().get(1);
        private final Assignment cTypeNameAssignment_1_2 = (Assignment) cGroup_1
                .eContents().get(2);
        private final RuleCall cTypeNameTypeRefParserRuleCall_1_2_0 = (RuleCall) cTypeNameAssignment_1_2
                .eContents().get(0);
        private final Group cGroup_1_3 = (Group) cGroup_1.eContents().get(3);
        private final Keyword cLeftParenthesisKeyword_1_3_0 = (Keyword) cGroup_1_3
                .eContents().get(0);
        private final Group cGroup_1_3_1 = (Group) cGroup_1_3.eContents()
                .get(1);
        private final Assignment cArgsAssignment_1_3_1_0 = (Assignment) cGroup_1_3_1
                .eContents().get(0);
        private final RuleCall cArgsTopTypeParserRuleCall_1_3_1_0_0 = (RuleCall) cArgsAssignment_1_3_1_0
                .eContents().get(0);
        private final Group cGroup_1_3_1_1 = (Group) cGroup_1_3_1.eContents()
                .get(1);
        private final Keyword cCommaKeyword_1_3_1_1_0 = (Keyword) cGroup_1_3_1_1
                .eContents().get(0);
        private final Assignment cArgsAssignment_1_3_1_1_1 = (Assignment) cGroup_1_3_1_1
                .eContents().get(1);
        private final RuleCall cArgsTopTypeParserRuleCall_1_3_1_1_1_0 = (RuleCall) cArgsAssignment_1_3_1_1_1
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_1_3_2 = (Keyword) cGroup_1_3
                .eContents().get(2);
        private final Assignment cTypeNameAssignment_2 = (Assignment) cAlternatives
                .eContents().get(2);
        private final RuleCall cTypeNameVariableLiteralParserRuleCall_2_0 = (RuleCall) cTypeNameAssignment_2
                .eContents().get(0);
        private final Assignment cValueAssignment_3 = (Assignment) cAlternatives
                .eContents().get(3);
        private final RuleCall cValueINTEGERParserRuleCall_3_0 = (RuleCall) cValueAssignment_3
                .eContents().get(0);
        private final Group cGroup_4 = (Group) cAlternatives.eContents().get(4);
        private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword) cGroup_4
                .eContents().get(0);
        private final Action cListTypeAction_4_1 = (Action) cGroup_4
                .eContents().get(1);
        private final Group cGroup_4_2 = (Group) cGroup_4.eContents().get(2);
        private final Assignment cTypeAssignment_4_2_0 = (Assignment) cGroup_4_2
                .eContents().get(0);
        private final RuleCall cTypeTopTypeParserRuleCall_4_2_0_0 = (RuleCall) cTypeAssignment_4_2_0
                .eContents().get(0);
        private final Group cGroup_4_2_1 = (Group) cGroup_4_2.eContents()
                .get(1);
        private final Keyword cCommaKeyword_4_2_1_0 = (Keyword) cGroup_4_2_1
                .eContents().get(0);
        private final Keyword cFullStopFullStopFullStopKeyword_4_2_1_1 = (Keyword) cGroup_4_2_1
                .eContents().get(1);
        private final Keyword cRightSquareBracketKeyword_4_3 = (Keyword) cGroup_4
                .eContents().get(3);
        private final Group cGroup_5 = (Group) cAlternatives.eContents().get(5);
        private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword) cGroup_5
                .eContents().get(0);
        private final Action cTupleTypeAction_5_1 = (Action) cGroup_5
                .eContents().get(1);
        private final Group cGroup_5_2 = (Group) cGroup_5.eContents().get(2);
        private final Assignment cTypesAssignment_5_2_0 = (Assignment) cGroup_5_2
                .eContents().get(0);
        private final RuleCall cTypesTopTypeParserRuleCall_5_2_0_0 = (RuleCall) cTypesAssignment_5_2_0
                .eContents().get(0);
        private final Group cGroup_5_2_1 = (Group) cGroup_5_2.eContents()
                .get(1);
        private final Keyword cCommaKeyword_5_2_1_0 = (Keyword) cGroup_5_2_1
                .eContents().get(0);
        private final Assignment cTypesAssignment_5_2_1_1 = (Assignment) cGroup_5_2_1
                .eContents().get(1);
        private final RuleCall cTypesTopTypeParserRuleCall_5_2_1_1_0 = (RuleCall) cTypesAssignment_5_2_1_1
                .eContents().get(0);
        private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword) cGroup_5
                .eContents().get(3);
        private final Group cGroup_6 = (Group) cAlternatives.eContents().get(6);
        private final Keyword cNumberSignKeyword_6_0 = (Keyword) cGroup_6
                .eContents().get(0);
        private final Action cRecordTypeAction_6_1 = (Action) cGroup_6
                .eContents().get(1);
        private final Assignment cRecAssignment_6_2 = (Assignment) cGroup_6
                .eContents().get(2);
        private final RuleCall cRecRecordRefParserRuleCall_6_2_0 = (RuleCall) cRecAssignment_6_2
                .eContents().get(0);
        private final Keyword cLeftCurlyBracketKeyword_6_3 = (Keyword) cGroup_6
                .eContents().get(3);
        private final Group cGroup_6_4 = (Group) cGroup_6.eContents().get(4);
        private final Assignment cFieldsAssignment_6_4_0 = (Assignment) cGroup_6_4
                .eContents().get(0);
        private final RuleCall cFieldsFieldTypeParserRuleCall_6_4_0_0 = (RuleCall) cFieldsAssignment_6_4_0
                .eContents().get(0);
        private final Group cGroup_6_4_1 = (Group) cGroup_6_4.eContents()
                .get(1);
        private final Keyword cCommaKeyword_6_4_1_0 = (Keyword) cGroup_6_4_1
                .eContents().get(0);
        private final Assignment cFieldsAssignment_6_4_1_1 = (Assignment) cGroup_6_4_1
                .eContents().get(1);
        private final RuleCall cFieldsFieldTypeParserRuleCall_6_4_1_1_0 = (RuleCall) cFieldsAssignment_6_4_1_1
                .eContents().get(0);
        private final Keyword cRightCurlyBracketKeyword_6_5 = (Keyword) cGroup_6
                .eContents().get(5);
        private final RuleCall cBinaryTypeParserRuleCall_7 = (RuleCall) cAlternatives
                .eContents().get(7);
        private final Group cGroup_8 = (Group) cAlternatives.eContents().get(8);
        private final Keyword cFunKeyword_8_0 = (Keyword) cGroup_8.eContents()
                .get(0);
        private final Action cFunTypeAction_8_1 = (Action) cGroup_8.eContents()
                .get(1);
        private final Keyword cLeftParenthesisKeyword_8_2 = (Keyword) cGroup_8
                .eContents().get(2);
        private final Assignment cTypeAssignment_8_3 = (Assignment) cGroup_8
                .eContents().get(3);
        private final RuleCall cTypeFunType100ParserRuleCall_8_3_0 = (RuleCall) cTypeAssignment_8_3
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_8_4 = (Keyword) cGroup_8
                .eContents().get(4);

        // Type:
        // "(" TopType ")" | {RemoteType} (m=ModuleVarMacro ":")?
        // typeName=TypeRef ("(" (args+=TopType ("," args+=TopType)*)?
        // ")")? | typeName=VariableLiteral | value=INTEGER | "[" {ListType}
        // (type=TopType ("," "...")?)? "]" | "{" {TupleType}
        // (types+=TopType ("," types+=TopType)*)? "}" | "#" {RecordType}
        // rec=RecordRef "{" (fields+=FieldType (","
        // fields+=FieldType)*)? "}" | BinaryType | "fun" {FunType} "("
        // type=FunType100? ")";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // "(" TopType ")" | {RemoteType} (m=ModuleVarMacro ":")?
        // typeName=TypeRef ("(" (args+=TopType ("," args+=TopType)*)? ")")?
        // | typeName=VariableLiteral | value=INTEGER | "[" {ListType}
        // (type=TopType ("," "...")?)? "]" | "{" {TupleType}
        // (types+=TopType ("," types+=TopType)*)? "}" | "#" {RecordType}
        // rec=RecordRef "{" (fields+=FieldType (","
        // fields+=FieldType)*)? "}" | BinaryType | "fun" {FunType} "("
        // type=FunType100? ")"
        public Alternatives getAlternatives() {
            return cAlternatives;
        }

        // "(" TopType ")"
        public Group getGroup_0() {
            return cGroup_0;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_0_0() {
            return cLeftParenthesisKeyword_0_0;
        }

        // TopType
        public RuleCall getTopTypeParserRuleCall_0_1() {
            return cTopTypeParserRuleCall_0_1;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_0_2() {
            return cRightParenthesisKeyword_0_2;
        }

        // {RemoteType} (m=ModuleVarMacro ":")? typeName=TypeRef ("("
        // (args+=TopType ("," args+=TopType)*)? ")")?
        public Group getGroup_1() {
            return cGroup_1;
        }

        // {RemoteType}
        public Action getRemoteTypeAction_1_0() {
            return cRemoteTypeAction_1_0;
        }

        // (m=ModuleVarMacro ":")?
        public Group getGroup_1_1() {
            return cGroup_1_1;
        }

        // m=ModuleVarMacro
        public Assignment getMAssignment_1_1_0() {
            return cMAssignment_1_1_0;
        }

        // ModuleVarMacro
        public RuleCall getMModuleVarMacroParserRuleCall_1_1_0_0() {
            return cMModuleVarMacroParserRuleCall_1_1_0_0;
        }

        // ":"
        public Keyword getColonKeyword_1_1_1() {
            return cColonKeyword_1_1_1;
        }

        // typeName=TypeRef
        public Assignment getTypeNameAssignment_1_2() {
            return cTypeNameAssignment_1_2;
        }

        // TypeRef
        public RuleCall getTypeNameTypeRefParserRuleCall_1_2_0() {
            return cTypeNameTypeRefParserRuleCall_1_2_0;
        }

        // ("(" (args+=TopType ("," args+=TopType)*)? ")")?
        public Group getGroup_1_3() {
            return cGroup_1_3;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_1_3_0() {
            return cLeftParenthesisKeyword_1_3_0;
        }

        // (args+=TopType ("," args+=TopType)*)?
        public Group getGroup_1_3_1() {
            return cGroup_1_3_1;
        }

        // args+=TopType
        public Assignment getArgsAssignment_1_3_1_0() {
            return cArgsAssignment_1_3_1_0;
        }

        // TopType
        public RuleCall getArgsTopTypeParserRuleCall_1_3_1_0_0() {
            return cArgsTopTypeParserRuleCall_1_3_1_0_0;
        }

        // ("," args+=TopType)*
        public Group getGroup_1_3_1_1() {
            return cGroup_1_3_1_1;
        }

        // ","
        public Keyword getCommaKeyword_1_3_1_1_0() {
            return cCommaKeyword_1_3_1_1_0;
        }

        // args+=TopType
        public Assignment getArgsAssignment_1_3_1_1_1() {
            return cArgsAssignment_1_3_1_1_1;
        }

        // TopType
        public RuleCall getArgsTopTypeParserRuleCall_1_3_1_1_1_0() {
            return cArgsTopTypeParserRuleCall_1_3_1_1_1_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_1_3_2() {
            return cRightParenthesisKeyword_1_3_2;
        }

        // typeName=VariableLiteral
        public Assignment getTypeNameAssignment_2() {
            return cTypeNameAssignment_2;
        }

        // VariableLiteral
        public RuleCall getTypeNameVariableLiteralParserRuleCall_2_0() {
            return cTypeNameVariableLiteralParserRuleCall_2_0;
        }

        // value=INTEGER
        public Assignment getValueAssignment_3() {
            return cValueAssignment_3;
        }

        // INTEGER
        public RuleCall getValueINTEGERParserRuleCall_3_0() {
            return cValueINTEGERParserRuleCall_3_0;
        }

        // "[" {ListType} (type=TopType ("," "...")?)? "]"
        public Group getGroup_4() {
            return cGroup_4;
        }

        // "["
        public Keyword getLeftSquareBracketKeyword_4_0() {
            return cLeftSquareBracketKeyword_4_0;
        }

        // {ListType}
        public Action getListTypeAction_4_1() {
            return cListTypeAction_4_1;
        }

        // (type=TopType ("," "...")?)?
        public Group getGroup_4_2() {
            return cGroup_4_2;
        }

        // type=TopType
        public Assignment getTypeAssignment_4_2_0() {
            return cTypeAssignment_4_2_0;
        }

        // TopType
        public RuleCall getTypeTopTypeParserRuleCall_4_2_0_0() {
            return cTypeTopTypeParserRuleCall_4_2_0_0;
        }

        // ("," "...")?
        public Group getGroup_4_2_1() {
            return cGroup_4_2_1;
        }

        // ","
        public Keyword getCommaKeyword_4_2_1_0() {
            return cCommaKeyword_4_2_1_0;
        }

        // "..."
        public Keyword getFullStopFullStopFullStopKeyword_4_2_1_1() {
            return cFullStopFullStopFullStopKeyword_4_2_1_1;
        }

        // "]"
        public Keyword getRightSquareBracketKeyword_4_3() {
            return cRightSquareBracketKeyword_4_3;
        }

        // "{" {TupleType} (types+=TopType ("," types+=TopType)*)? "}"
        public Group getGroup_5() {
            return cGroup_5;
        }

        // "{"
        public Keyword getLeftCurlyBracketKeyword_5_0() {
            return cLeftCurlyBracketKeyword_5_0;
        }

        // {TupleType}
        public Action getTupleTypeAction_5_1() {
            return cTupleTypeAction_5_1;
        }

        // (types+=TopType ("," types+=TopType)*)?
        public Group getGroup_5_2() {
            return cGroup_5_2;
        }

        // types+=TopType
        public Assignment getTypesAssignment_5_2_0() {
            return cTypesAssignment_5_2_0;
        }

        // TopType
        public RuleCall getTypesTopTypeParserRuleCall_5_2_0_0() {
            return cTypesTopTypeParserRuleCall_5_2_0_0;
        }

        // ("," types+=TopType)*
        public Group getGroup_5_2_1() {
            return cGroup_5_2_1;
        }

        // ","
        public Keyword getCommaKeyword_5_2_1_0() {
            return cCommaKeyword_5_2_1_0;
        }

        // types+=TopType
        public Assignment getTypesAssignment_5_2_1_1() {
            return cTypesAssignment_5_2_1_1;
        }

        // TopType
        public RuleCall getTypesTopTypeParserRuleCall_5_2_1_1_0() {
            return cTypesTopTypeParserRuleCall_5_2_1_1_0;
        }

        // "}"
        public Keyword getRightCurlyBracketKeyword_5_3() {
            return cRightCurlyBracketKeyword_5_3;
        }

        // "#" {RecordType} rec=RecordRef "{" (fields+=FieldType (","
        // fields+=FieldType)*)? "}"
        public Group getGroup_6() {
            return cGroup_6;
        }

        // "#"
        public Keyword getNumberSignKeyword_6_0() {
            return cNumberSignKeyword_6_0;
        }

        // {RecordType}
        public Action getRecordTypeAction_6_1() {
            return cRecordTypeAction_6_1;
        }

        // rec=RecordRef
        public Assignment getRecAssignment_6_2() {
            return cRecAssignment_6_2;
        }

        // RecordRef
        public RuleCall getRecRecordRefParserRuleCall_6_2_0() {
            return cRecRecordRefParserRuleCall_6_2_0;
        }

        // "{"
        public Keyword getLeftCurlyBracketKeyword_6_3() {
            return cLeftCurlyBracketKeyword_6_3;
        }

        // (fields+=FieldType ("," fields+=FieldType)*)?
        public Group getGroup_6_4() {
            return cGroup_6_4;
        }

        // fields+=FieldType
        public Assignment getFieldsAssignment_6_4_0() {
            return cFieldsAssignment_6_4_0;
        }

        // FieldType
        public RuleCall getFieldsFieldTypeParserRuleCall_6_4_0_0() {
            return cFieldsFieldTypeParserRuleCall_6_4_0_0;
        }

        // ("," fields+=FieldType)*
        public Group getGroup_6_4_1() {
            return cGroup_6_4_1;
        }

        // ","
        public Keyword getCommaKeyword_6_4_1_0() {
            return cCommaKeyword_6_4_1_0;
        }

        // fields+=FieldType
        public Assignment getFieldsAssignment_6_4_1_1() {
            return cFieldsAssignment_6_4_1_1;
        }

        // FieldType
        public RuleCall getFieldsFieldTypeParserRuleCall_6_4_1_1_0() {
            return cFieldsFieldTypeParserRuleCall_6_4_1_1_0;
        }

        // "}"
        public Keyword getRightCurlyBracketKeyword_6_5() {
            return cRightCurlyBracketKeyword_6_5;
        }

        // BinaryType
        public RuleCall getBinaryTypeParserRuleCall_7() {
            return cBinaryTypeParserRuleCall_7;
        }

        // "fun" {FunType} "(" type=FunType100? ")"
        public Group getGroup_8() {
            return cGroup_8;
        }

        // "fun"
        public Keyword getFunKeyword_8_0() {
            return cFunKeyword_8_0;
        }

        // {FunType}
        public Action getFunTypeAction_8_1() {
            return cFunTypeAction_8_1;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_8_2() {
            return cLeftParenthesisKeyword_8_2;
        }

        // type=FunType100?
        public Assignment getTypeAssignment_8_3() {
            return cTypeAssignment_8_3;
        }

        // FunType100
        public RuleCall getTypeFunType100ParserRuleCall_8_3_0() {
            return cTypeFunType100ParserRuleCall_8_3_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_8_4() {
            return cRightParenthesisKeyword_8_4;
        }
    }

    public class FieldTypeElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "FieldType");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cTypeNameAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final CrossReference cTypeNameTypeAttributeCrossReference_0_0 = (CrossReference) cTypeNameAssignment_0
                .eContents().get(0);
        private final RuleCall cTypeNameTypeAttributeATOMTerminalRuleCall_0_0_1 = (RuleCall) cTypeNameTypeAttributeCrossReference_0_0
                .eContents().get(1);
        private final Keyword cColonColonKeyword_1 = (Keyword) cGroup
                .eContents().get(1);
        private final Assignment cTypeAssignment_2 = (Assignment) cGroup
                .eContents().get(2);
        private final RuleCall cTypeTopTypeParserRuleCall_2_0 = (RuleCall) cTypeAssignment_2
                .eContents().get(0);

        // FieldType:
        // typeName=[TypeAttribute|ATOM] "::" type=TopType;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // typeName=[TypeAttribute|ATOM] "::" type=TopType
        public Group getGroup() {
            return cGroup;
        }

        // typeName=[TypeAttribute|ATOM]
        public Assignment getTypeNameAssignment_0() {
            return cTypeNameAssignment_0;
        }

        // [TypeAttribute|ATOM]
        public CrossReference getTypeNameTypeAttributeCrossReference_0_0() {
            return cTypeNameTypeAttributeCrossReference_0_0;
        }

        // ATOM
        public RuleCall getTypeNameTypeAttributeATOMTerminalRuleCall_0_0_1() {
            return cTypeNameTypeAttributeATOMTerminalRuleCall_0_0_1;
        }

        // "::"
        public Keyword getColonColonKeyword_1() {
            return cColonColonKeyword_1;
        }

        // type=TopType
        public Assignment getTypeAssignment_2() {
            return cTypeAssignment_2;
        }

        // TopType
        public RuleCall getTypeTopTypeParserRuleCall_2_0() {
            return cTypeTopTypeParserRuleCall_2_0;
        }
    }

    public class BinaryTypeElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "BinaryType");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Keyword cLessThanSignLessThanSignKeyword_0 = (Keyword) cGroup
                .eContents().get(0);
        private final Action cBinaryTypeAction_1 = (Action) cGroup.eContents()
                .get(1);
        private final Alternatives cAlternatives_2 = (Alternatives) cGroup
                .eContents().get(2);
        private final Group cGroup_2_0 = (Group) cAlternatives_2.eContents()
                .get(0);
        private final Assignment cTypeAssignment_2_0_0 = (Assignment) cGroup_2_0
                .eContents().get(0);
        private final RuleCall cTypeBinBaseTypeParserRuleCall_2_0_0_0 = (RuleCall) cTypeAssignment_2_0_0
                .eContents().get(0);
        private final Group cGroup_2_0_1 = (Group) cGroup_2_0.eContents()
                .get(1);
        private final Keyword cCommaKeyword_2_0_1_0 = (Keyword) cGroup_2_0_1
                .eContents().get(0);
        private final Assignment cTypeAssignment_2_0_1_1 = (Assignment) cGroup_2_0_1
                .eContents().get(1);
        private final RuleCall cTypeBinUnitTypeParserRuleCall_2_0_1_1_0 = (RuleCall) cTypeAssignment_2_0_1_1
                .eContents().get(0);
        private final Assignment cTypeAssignment_2_1 = (Assignment) cAlternatives_2
                .eContents().get(1);
        private final RuleCall cTypeBinUnitTypeParserRuleCall_2_1_0 = (RuleCall) cTypeAssignment_2_1
                .eContents().get(0);
        private final Keyword cGreaterThanSignGreaterThanSignKeyword_3 = (Keyword) cGroup
                .eContents().get(3);

        // BinaryType:
        // "<<" {BinaryType} (type+=BinBaseType ("," type+=BinUnitType)? |
        // type+=BinUnitType)? ">>";
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // "<<" {BinaryType} (type+=BinBaseType ("," type+=BinUnitType)? |
        // type+=BinUnitType)? ">>"
        public Group getGroup() {
            return cGroup;
        }

        // "<<"
        public Keyword getLessThanSignLessThanSignKeyword_0() {
            return cLessThanSignLessThanSignKeyword_0;
        }

        // {BinaryType}
        public Action getBinaryTypeAction_1() {
            return cBinaryTypeAction_1;
        }

        // (type+=BinBaseType ("," type+=BinUnitType)? | type+=BinUnitType)?
        public Alternatives getAlternatives_2() {
            return cAlternatives_2;
        }

        // type+=BinBaseType ("," type+=BinUnitType)?
        public Group getGroup_2_0() {
            return cGroup_2_0;
        }

        // type+=BinBaseType
        public Assignment getTypeAssignment_2_0_0() {
            return cTypeAssignment_2_0_0;
        }

        // BinBaseType
        public RuleCall getTypeBinBaseTypeParserRuleCall_2_0_0_0() {
            return cTypeBinBaseTypeParserRuleCall_2_0_0_0;
        }

        // ("," type+=BinUnitType)?
        public Group getGroup_2_0_1() {
            return cGroup_2_0_1;
        }

        // ","
        public Keyword getCommaKeyword_2_0_1_0() {
            return cCommaKeyword_2_0_1_0;
        }

        // type+=BinUnitType
        public Assignment getTypeAssignment_2_0_1_1() {
            return cTypeAssignment_2_0_1_1;
        }

        // BinUnitType
        public RuleCall getTypeBinUnitTypeParserRuleCall_2_0_1_1_0() {
            return cTypeBinUnitTypeParserRuleCall_2_0_1_1_0;
        }

        // type+=BinUnitType
        public Assignment getTypeAssignment_2_1() {
            return cTypeAssignment_2_1;
        }

        // BinUnitType
        public RuleCall getTypeBinUnitTypeParserRuleCall_2_1_0() {
            return cTypeBinUnitTypeParserRuleCall_2_1_0;
        }

        // ">>"
        public Keyword getGreaterThanSignGreaterThanSignKeyword_3() {
            return cGreaterThanSignGreaterThanSignKeyword_3;
        }
    }

    public class BinBaseTypeElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "BinBaseType");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cTypeNameAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final RuleCall cTypeNameVariableLiteralParserRuleCall_0_0 = (RuleCall) cTypeNameAssignment_0
                .eContents().get(0);
        private final Keyword cColonKeyword_1 = (Keyword) cGroup.eContents()
                .get(1);
        private final Assignment cTypeAssignment_2 = (Assignment) cGroup
                .eContents().get(2);
        private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall) cTypeAssignment_2
                .eContents().get(0);

        // BinBaseType:
        // typeName=VariableLiteral ":" type=Type;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // typeName=VariableLiteral ":" type=Type
        public Group getGroup() {
            return cGroup;
        }

        // typeName=VariableLiteral
        public Assignment getTypeNameAssignment_0() {
            return cTypeNameAssignment_0;
        }

        // VariableLiteral
        public RuleCall getTypeNameVariableLiteralParserRuleCall_0_0() {
            return cTypeNameVariableLiteralParserRuleCall_0_0;
        }

        // ":"
        public Keyword getColonKeyword_1() {
            return cColonKeyword_1;
        }

        // type=Type
        public Assignment getTypeAssignment_2() {
            return cTypeAssignment_2;
        }

        // Type
        public RuleCall getTypeTypeParserRuleCall_2_0() {
            return cTypeTypeParserRuleCall_2_0;
        }
    }

    public class BinUnitTypeElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "BinUnitType");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Assignment cTypeNameAssignment_0 = (Assignment) cGroup
                .eContents().get(0);
        private final RuleCall cTypeNameVariableLiteralParserRuleCall_0_0 = (RuleCall) cTypeNameAssignment_0
                .eContents().get(0);
        private final Keyword cColonKeyword_1 = (Keyword) cGroup.eContents()
                .get(1);
        private final Assignment cMAssignment_2 = (Assignment) cGroup
                .eContents().get(2);
        private final RuleCall cMVARIABLETerminalRuleCall_2_0 = (RuleCall) cMAssignment_2
                .eContents().get(0);
        private final Keyword cAsteriskKeyword_3 = (Keyword) cGroup.eContents()
                .get(3);
        private final Assignment cTypeAssignment_4 = (Assignment) cGroup
                .eContents().get(4);
        private final RuleCall cTypeTypeParserRuleCall_4_0 = (RuleCall) cTypeAssignment_4
                .eContents().get(0);

        // BinUnitType:
        // typeName=VariableLiteral ":" m=VARIABLE "*" type=Type;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // typeName=VariableLiteral ":" m=VARIABLE "*" type=Type
        public Group getGroup() {
            return cGroup;
        }

        // typeName=VariableLiteral
        public Assignment getTypeNameAssignment_0() {
            return cTypeNameAssignment_0;
        }

        // VariableLiteral
        public RuleCall getTypeNameVariableLiteralParserRuleCall_0_0() {
            return cTypeNameVariableLiteralParserRuleCall_0_0;
        }

        // ":"
        public Keyword getColonKeyword_1() {
            return cColonKeyword_1;
        }

        // m=VARIABLE
        public Assignment getMAssignment_2() {
            return cMAssignment_2;
        }

        // VARIABLE
        public RuleCall getMVARIABLETerminalRuleCall_2_0() {
            return cMVARIABLETerminalRuleCall_2_0;
        }

        // "*"
        public Keyword getAsteriskKeyword_3() {
            return cAsteriskKeyword_3;
        }

        // type=Type
        public Assignment getTypeAssignment_4() {
            return cTypeAssignment_4;
        }

        // Type
        public RuleCall getTypeTypeParserRuleCall_4_0() {
            return cTypeTypeParserRuleCall_4_0;
        }
    }

    public class FunType100Elements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil
                .findRuleForName(getGrammar(), "FunType100");
        private final Group cGroup = (Group) rule.eContents().get(1);
        private final Action cFunTypeListAction_0 = (Action) cGroup.eContents()
                .get(0);
        private final Keyword cLeftParenthesisKeyword_1 = (Keyword) cGroup
                .eContents().get(1);
        private final Alternatives cAlternatives_2 = (Alternatives) cGroup
                .eContents().get(2);
        private final Keyword cFullStopFullStopFullStopKeyword_2_0 = (Keyword) cAlternatives_2
                .eContents().get(0);
        private final Group cGroup_2_1 = (Group) cAlternatives_2.eContents()
                .get(1);
        private final Assignment cItemsAssignment_2_1_0 = (Assignment) cGroup_2_1
                .eContents().get(0);
        private final RuleCall cItemsTopTypeParserRuleCall_2_1_0_0 = (RuleCall) cItemsAssignment_2_1_0
                .eContents().get(0);
        private final Group cGroup_2_1_1 = (Group) cGroup_2_1.eContents()
                .get(1);
        private final Keyword cCommaKeyword_2_1_1_0 = (Keyword) cGroup_2_1_1
                .eContents().get(0);
        private final Assignment cItemsAssignment_2_1_1_1 = (Assignment) cGroup_2_1_1
                .eContents().get(1);
        private final RuleCall cItemsTopTypeParserRuleCall_2_1_1_1_0 = (RuleCall) cItemsAssignment_2_1_1_1
                .eContents().get(0);
        private final Keyword cRightParenthesisKeyword_3 = (Keyword) cGroup
                .eContents().get(3);
        private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword) cGroup
                .eContents().get(4);
        private final Assignment cReturnAssignment_5 = (Assignment) cGroup
                .eContents().get(5);
        private final RuleCall cReturnTopTypeParserRuleCall_5_0 = (RuleCall) cReturnAssignment_5
                .eContents().get(0);

        // FunType100:
        // {FunTypeList} "(" ("..." | items+=TopType ("," items+=TopType)*)? ")"
        // "->" return=TopType;
        @Override
        public ParserRule getRule() {
            return rule;
        }

        // {FunTypeList} "(" ("..." | items+=TopType ("," items+=TopType)*)? ")"
        // "->" return=TopType
        public Group getGroup() {
            return cGroup;
        }

        // {FunTypeList}
        public Action getFunTypeListAction_0() {
            return cFunTypeListAction_0;
        }

        // "("
        public Keyword getLeftParenthesisKeyword_1() {
            return cLeftParenthesisKeyword_1;
        }

        // ("..." | items+=TopType ("," items+=TopType)*)?
        public Alternatives getAlternatives_2() {
            return cAlternatives_2;
        }

        // "..."
        public Keyword getFullStopFullStopFullStopKeyword_2_0() {
            return cFullStopFullStopFullStopKeyword_2_0;
        }

        // items+=TopType ("," items+=TopType)*
        public Group getGroup_2_1() {
            return cGroup_2_1;
        }

        // items+=TopType
        public Assignment getItemsAssignment_2_1_0() {
            return cItemsAssignment_2_1_0;
        }

        // TopType
        public RuleCall getItemsTopTypeParserRuleCall_2_1_0_0() {
            return cItemsTopTypeParserRuleCall_2_1_0_0;
        }

        // ("," items+=TopType)*
        public Group getGroup_2_1_1() {
            return cGroup_2_1_1;
        }

        // ","
        public Keyword getCommaKeyword_2_1_1_0() {
            return cCommaKeyword_2_1_1_0;
        }

        // items+=TopType
        public Assignment getItemsAssignment_2_1_1_1() {
            return cItemsAssignment_2_1_1_1;
        }

        // TopType
        public RuleCall getItemsTopTypeParserRuleCall_2_1_1_1_0() {
            return cItemsTopTypeParserRuleCall_2_1_1_1_0;
        }

        // ")"
        public Keyword getRightParenthesisKeyword_3() {
            return cRightParenthesisKeyword_3;
        }

        // "->"
        public Keyword getHyphenMinusGreaterThanSignKeyword_4() {
            return cHyphenMinusGreaterThanSignKeyword_4;
        }

        // return=TopType
        public Assignment getReturnAssignment_5() {
            return cReturnAssignment_5;
        }

        // TopType
        public RuleCall getReturnTopTypeParserRuleCall_5_0() {
            return cReturnTopTypeParserRuleCall_5_0;
        }
    }

    private final ModuleElements pModule;
    private final AtomRefTargetElements pAtomRefTarget;
    private final FormElements pForm;
    private final ConditionalFormBlockElements pConditionalFormBlock;
    private final AttributeElements pAttribute;
    private final ConditionalAttributeElements pConditionalAttribute;
    private final AbstractDefineAttributeElements pAbstractDefineAttribute;
    private final DefineAttributeElements pDefineAttribute;
    private final UndefAttributeElements pUndefAttribute;
    private final IfdefAttributeElements pIfdefAttribute;
    private final ElseAttributeElements pElseAttribute;
    private final EndifAttributeElements pEndifAttribute;
    private final AbstractIncludeAttributeElements pAbstractIncludeAttribute;
    private final IncludeAttributeElements pIncludeAttribute;
    private final IncludeLibAttributeElements pIncludeLibAttribute;
    private final FileAttributeElements pFileAttribute;
    private final ModuleAttributeElements pModuleAttribute;
    private final EncodingAttributeElements pEncodingAttribute;
    private final RecordAttributeElements pRecordAttribute;
    private final RecordFieldDefElements pRecordFieldDef;
    private final ExportAttributeElements pExportAttribute;
    private final ImportAttributeElements pImportAttribute;
    private final CompileAttributeElements pCompileAttribute;
    private final AbstractTypeAttributeElements pAbstractTypeAttribute;
    private final SpecAttributeElements pSpecAttribute;
    private final TypeAttributeElements pTypeAttribute;
    private final CustomAttributeElements pCustomAttribute;
    private final FunctionElements pFunction;
    private final FunctionClauseElements pFunctionClause;
    private final GuardElements pGuard;
    private final ExpressionsElements pExpressions;
    private final LExpressionElements pLExpression;
    private final LineExprElements pLineExpr;
    private final ExpressionElements pExpression;
    private final Expr100Elements pExpr100;
    private final Expr150Elements pExpr150;
    private final Expr160Elements pExpr160;
    private final Expr200Elements pExpr200;
    private final Expr300Elements pExpr300;
    private final Expr400Elements pExpr400;
    private final Expr500Elements pExpr500;
    private final UnaryExprElements pUnaryExpr;
    private final Expr700Elements pExpr700;
    private final Expr800Elements pExpr800;
    private final ExprMaxElements pExprMax;
    private final TermExpressionElements pTermExpression;
    private final MacroCallElements pMacroCall;
    private final RecordExprElements pRecordExpr;
    private final QueryExprElements pQueryExpr;
    private final CondExprElements pCondExpr;
    private final LetExprElements pLetExpr;
    private final RecordTupleElements pRecordTuple;
    private final RecordFieldExprElements pRecordFieldExpr;
    private final LiteralExpressionNoNumberElements pLiteralExpressionNoNumber;
    private final ModuleRefElements pModuleRef;
    private final FunctionRefElements pFunctionRef;
    private final RecordRefElements pRecordRef;
    private final RecordFieldRefElements pRecordFieldRef;
    private final TypeRefElements pTypeRef;
    private final MacroLiteralElements pMacroLiteral;
    private final MacroRefElements pMacroRef;
    private final VariableLiteralElements pVariableLiteral;
    private final StringLiteralElements pStringLiteral;
    private final StringLiteralPartElements pStringLiteralPart;
    private final StringLiteralLiteralElements pStringLiteralLiteral;
    private final LiteralExpressionElements pLiteralExpression;
    private final IntegerLiteralElements pIntegerLiteral;
    private final PatternExpressionElements pPatternExpression;
    private final IfExprElements pIfExpr;
    private final IfClauseElements pIfClause;
    private final CaseExprElements pCaseExpr;
    private final CrClauseElements pCrClause;
    private final ReceiveExprElements pReceiveExpr;
    private final FunExprElements pFunExpr;
    private final FunRefElements pFunRef;
    private final InlineFunElements pInlineFun;
    private final TryExprElements pTryExpr;
    private final TryClauseElements pTryClause;
    private final ListOrComprehensionElements pListOrComprehension;
    private final TupleElements pTuple;
    private final BinaryOrComprehensionElements pBinaryOrComprehension;
    private final BinaryItemElements pBinaryItem;
    private final BitTypeElements pBitType;
    private final UnaryExprMaxElements pUnaryExprMax;
    private final LCExprElements pLCExpr;
    private final ADDOPElements pADDOP;
    private final MULTOPElements pMULTOP;
    private final PREFIXOPElements pPREFIXOP;
    private final LISTOPElements pLISTOP;
    private final COMPOPElements pCOMPOP;
    private final SENDOPElements pSENDOP;
    private final ModuleVarMacroElements pModuleVarMacro;
    private final FunctionVarMacroElements pFunctionVarMacro;
    private final RecordVarMacroElements pRecordVarMacro;
    private final RecordFieldVarMacroElements pRecordFieldVarMacro;
    private final TypeVarMacroElements pTypeVarMacro;
    private final IntVarMacroElements pIntVarMacro;
    private final NAMEElements pNAME;
    private final NAMEVARElements pNAMEVAR;
    private final MACROElements pMACRO;
    private final NAMEVARMACROElements pNAMEVARMACRO;
    private final NAMEMACROElements pNAMEMACRO;
    private final KWElements pKW;
    private final KW1Elements pKW1;
    private final RealKwElements pRealKw;
    private final TerminalRule tATOM;
    private final TerminalRule tSTRING;
    private final TerminalRule tVARIABLE;
    private final TerminalRule tCOMMENT;
    private final TerminalRule tSL_COMMENT;
    private final TerminalRule tWS;
    private final INTEGERElements pINTEGER;
    private final TerminalRule tBASED_INT;
    private final TerminalRule tINT;
    private final FLOATElements pFLOAT;
    private final TerminalRule tEXT_INT;
    private final TerminalRule tCHAR;
    private final TerminalRule tIN_WORD_CHAR;
    private final TerminalRule tATOM_STARTER;
    private final TerminalRule tESCAPE;
    private final TerminalRule tHEX_DIGIT;
    private final SpecFunElements pSpecFun;
    private final TypeSigElements pTypeSig;
    private final FunTypeElements pFunType;
    private final TypeGuardsElements pTypeGuards;
    private final TypeGuardElements pTypeGuard;
    private final TopTypeElements pTopType;
    private final Type100Elements pType100;
    private final Type200Elements pType200;
    private final Type300Elements pType300;
    private final Type400Elements pType400;
    private final Type500Elements pType500;
    private final TypeElements pType;
    private final FieldTypeElements pFieldType;
    private final BinaryTypeElements pBinaryType;
    private final BinBaseTypeElements pBinBaseType;
    private final BinUnitTypeElements pBinUnitType;
    private final FunType100Elements pFunType100;

    private final Grammar grammar;

    @Inject
    public ErlangGrammarAccess(final GrammarProvider grammarProvider) {
        grammar = internalFindGrammar(grammarProvider);
        pModule = new ModuleElements();
        pAtomRefTarget = new AtomRefTargetElements();
        pForm = new FormElements();
        pConditionalFormBlock = new ConditionalFormBlockElements();
        pAttribute = new AttributeElements();
        pConditionalAttribute = new ConditionalAttributeElements();
        pAbstractDefineAttribute = new AbstractDefineAttributeElements();
        pDefineAttribute = new DefineAttributeElements();
        pUndefAttribute = new UndefAttributeElements();
        pIfdefAttribute = new IfdefAttributeElements();
        pElseAttribute = new ElseAttributeElements();
        pEndifAttribute = new EndifAttributeElements();
        pAbstractIncludeAttribute = new AbstractIncludeAttributeElements();
        pIncludeAttribute = new IncludeAttributeElements();
        pIncludeLibAttribute = new IncludeLibAttributeElements();
        pFileAttribute = new FileAttributeElements();
        pModuleAttribute = new ModuleAttributeElements();
        pEncodingAttribute = new EncodingAttributeElements();
        pRecordAttribute = new RecordAttributeElements();
        pRecordFieldDef = new RecordFieldDefElements();
        pExportAttribute = new ExportAttributeElements();
        pImportAttribute = new ImportAttributeElements();
        pCompileAttribute = new CompileAttributeElements();
        pAbstractTypeAttribute = new AbstractTypeAttributeElements();
        pSpecAttribute = new SpecAttributeElements();
        pTypeAttribute = new TypeAttributeElements();
        pCustomAttribute = new CustomAttributeElements();
        pFunction = new FunctionElements();
        pFunctionClause = new FunctionClauseElements();
        pGuard = new GuardElements();
        pExpressions = new ExpressionsElements();
        pLExpression = new LExpressionElements();
        pLineExpr = new LineExprElements();
        pExpression = new ExpressionElements();
        pExpr100 = new Expr100Elements();
        pExpr150 = new Expr150Elements();
        pExpr160 = new Expr160Elements();
        pExpr200 = new Expr200Elements();
        pExpr300 = new Expr300Elements();
        pExpr400 = new Expr400Elements();
        pExpr500 = new Expr500Elements();
        pUnaryExpr = new UnaryExprElements();
        pExpr700 = new Expr700Elements();
        pExpr800 = new Expr800Elements();
        pExprMax = new ExprMaxElements();
        pTermExpression = new TermExpressionElements();
        pMacroCall = new MacroCallElements();
        pRecordExpr = new RecordExprElements();
        pQueryExpr = new QueryExprElements();
        pCondExpr = new CondExprElements();
        pLetExpr = new LetExprElements();
        pRecordTuple = new RecordTupleElements();
        pRecordFieldExpr = new RecordFieldExprElements();
        pLiteralExpressionNoNumber = new LiteralExpressionNoNumberElements();
        pModuleRef = new ModuleRefElements();
        pFunctionRef = new FunctionRefElements();
        pRecordRef = new RecordRefElements();
        pRecordFieldRef = new RecordFieldRefElements();
        pTypeRef = new TypeRefElements();
        pMacroLiteral = new MacroLiteralElements();
        pMacroRef = new MacroRefElements();
        pVariableLiteral = new VariableLiteralElements();
        pStringLiteral = new StringLiteralElements();
        pStringLiteralPart = new StringLiteralPartElements();
        pStringLiteralLiteral = new StringLiteralLiteralElements();
        pLiteralExpression = new LiteralExpressionElements();
        pIntegerLiteral = new IntegerLiteralElements();
        pPatternExpression = new PatternExpressionElements();
        pIfExpr = new IfExprElements();
        pIfClause = new IfClauseElements();
        pCaseExpr = new CaseExprElements();
        pCrClause = new CrClauseElements();
        pReceiveExpr = new ReceiveExprElements();
        pFunExpr = new FunExprElements();
        pFunRef = new FunRefElements();
        pInlineFun = new InlineFunElements();
        pTryExpr = new TryExprElements();
        pTryClause = new TryClauseElements();
        pListOrComprehension = new ListOrComprehensionElements();
        pTuple = new TupleElements();
        pBinaryOrComprehension = new BinaryOrComprehensionElements();
        pBinaryItem = new BinaryItemElements();
        pBitType = new BitTypeElements();
        pUnaryExprMax = new UnaryExprMaxElements();
        pLCExpr = new LCExprElements();
        pADDOP = new ADDOPElements();
        pMULTOP = new MULTOPElements();
        pPREFIXOP = new PREFIXOPElements();
        pLISTOP = new LISTOPElements();
        pCOMPOP = new COMPOPElements();
        pSENDOP = new SENDOPElements();
        pModuleVarMacro = new ModuleVarMacroElements();
        pFunctionVarMacro = new FunctionVarMacroElements();
        pRecordVarMacro = new RecordVarMacroElements();
        pRecordFieldVarMacro = new RecordFieldVarMacroElements();
        pTypeVarMacro = new TypeVarMacroElements();
        pIntVarMacro = new IntVarMacroElements();
        pNAME = new NAMEElements();
        pNAMEVAR = new NAMEVARElements();
        pMACRO = new MACROElements();
        pNAMEVARMACRO = new NAMEVARMACROElements();
        pNAMEMACRO = new NAMEMACROElements();
        pKW = new KWElements();
        pKW1 = new KW1Elements();
        pRealKw = new RealKwElements();
        tATOM = (TerminalRule) GrammarUtil
                .findRuleForName(getGrammar(), "ATOM");
        tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(),
                "STRING");
        tVARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(),
                "VARIABLE");
        tCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(),
                "COMMENT");
        tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(),
                "SL_COMMENT");
        tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
        pINTEGER = new INTEGERElements();
        tBASED_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(),
                "BASED_INT");
        tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT");
        pFLOAT = new FLOATElements();
        tEXT_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(),
                "EXT_INT");
        tCHAR = (TerminalRule) GrammarUtil
                .findRuleForName(getGrammar(), "CHAR");
        tIN_WORD_CHAR = (TerminalRule) GrammarUtil.findRuleForName(
                getGrammar(), "IN_WORD_CHAR");
        tATOM_STARTER = (TerminalRule) GrammarUtil.findRuleForName(
                getGrammar(), "ATOM_STARTER");
        tESCAPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(),
                "ESCAPE");
        tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(),
                "HEX_DIGIT");
        pSpecFun = new SpecFunElements();
        pTypeSig = new TypeSigElements();
        pFunType = new FunTypeElements();
        pTypeGuards = new TypeGuardsElements();
        pTypeGuard = new TypeGuardElements();
        pTopType = new TopTypeElements();
        pType100 = new Type100Elements();
        pType200 = new Type200Elements();
        pType300 = new Type300Elements();
        pType400 = new Type400Elements();
        pType500 = new Type500Elements();
        pType = new TypeElements();
        pFieldType = new FieldTypeElements();
        pBinaryType = new BinaryTypeElements();
        pBinBaseType = new BinBaseTypeElements();
        pBinUnitType = new BinUnitTypeElements();
        pFunType100 = new FunType100Elements();
    }

    protected Grammar internalFindGrammar(final GrammarProvider grammarProvider) {
        Grammar grammar = grammarProvider.getGrammar(this);
        while (grammar != null) {
            if ("org.erlide.Erlang".equals(grammar.getName())) {
                return grammar;
            }
            final List<Grammar> grammars = grammar.getUsedGrammars();
            if (!grammars.isEmpty()) {
                grammar = grammars.iterator().next();
            } else {
                return null;
            }
        }
        return grammar;
    }

    @Override
    public Grammar getGrammar() {
        return grammar;
    }

    // Module:
    // forms+=Form*;
    public ModuleElements getModuleAccess() {
        return pModule;
    }

    public ParserRule getModuleRule() {
        return getModuleAccess().getRule();
    }

    // // AtomRefTargets are the elements that an atom can refer to
    // AtomRefTarget:
    // Module | Function | RecordAttribute | RecordFieldDef | TypeAttribute;
    public AtomRefTargetElements getAtomRefTargetAccess() {
        return pAtomRefTarget;
    }

    public ParserRule getAtomRefTargetRule() {
        return getAtomRefTargetAccess().getRule();
    }

    // Form:
    // Attribute | Function | ConditionalFormBlock | {MacroForm} call=MacroCall
    // ".";
    public FormElements getFormAccess() {
        return pForm;
    }

    public ParserRule getFormRule() {
        return getFormAccess().getRule();
    }

    // ConditionalFormBlock:
    // condition=IfdefAttribute ifForms+=Form* (=> hasElse?=ElseAttribute
    // elseForms+=Form*)? end=EndifAttribute;
    public ConditionalFormBlockElements getConditionalFormBlockAccess() {
        return pConditionalFormBlock;
    }

    public ParserRule getConditionalFormBlockRule() {
        return getConditionalFormBlockAccess().getRule();
    }

    // // Attributes
    // Attribute:
    // "-" (ModuleAttribute | EncodingAttribute | AbstractDefineAttribute |
    // AbstractIncludeAttribute | FileAttribute |
    // RecordAttribute | AbstractTypeAttribute | ExportAttribute |
    // ImportAttribute | CompileAttribute | CustomAttribute);
    public AttributeElements getAttributeAccess() {
        return pAttribute;
    }

    public ParserRule getAttributeRule() {
        return getAttributeAccess().getRule();
    }

    // ConditionalAttribute:
    // IfdefAttribute | ElseAttribute | EndifAttribute;
    public ConditionalAttributeElements getConditionalAttributeAccess() {
        return pConditionalAttribute;
    }

    public ParserRule getConditionalAttributeRule() {
        return getConditionalAttributeAccess().getRule();
    }

    // AbstractDefineAttribute:
    // DefineAttribute | UndefAttribute;
    public AbstractDefineAttributeElements getAbstractDefineAttributeAccess() {
        return pAbstractDefineAttribute;
    }

    public ParserRule getAbstractDefineAttributeRule() {
        return getAbstractDefineAttributeAccess().getRule();
    }

    // DefineAttribute:
    // => tag="define" "(" macroName= // can't have feature 'name' because
    // multiple defines with the same macro can exist
    // NAMEVAR ("(" (args+=PatternExpression ("," args+=PatternExpression)*)?
    // ")")? ("," value=Guard?)? ")" ".";
    public DefineAttributeElements getDefineAttributeAccess() {
        return pDefineAttribute;
    }

    public ParserRule getDefineAttributeRule() {
        return getDefineAttributeAccess().getRule();
    }

    // UndefAttribute:
    // => tag="undef" "(" ref=MacroRef ")" ".";
    public UndefAttributeElements getUndefAttributeAccess() {
        return pUndefAttribute;
    }

    public ParserRule getUndefAttributeRule() {
        return getUndefAttributeAccess().getRule();
    }

    // IfdefAttribute:
    // "-" => tag=("ifdef" | "ifndef") "(" ref=MacroRef ")" ".";
    public IfdefAttributeElements getIfdefAttributeAccess() {
        return pIfdefAttribute;
    }

    public ParserRule getIfdefAttributeRule() {
        return getIfdefAttributeAccess().getRule();
    }

    // ElseAttribute:
    // "-" => tag="else" ".";
    public ElseAttributeElements getElseAttributeAccess() {
        return pElseAttribute;
    }

    public ParserRule getElseAttributeRule() {
        return getElseAttributeAccess().getRule();
    }

    // EndifAttribute:
    // "-" => tag="endif" ".";
    public EndifAttributeElements getEndifAttributeAccess() {
        return pEndifAttribute;
    }

    public ParserRule getEndifAttributeRule() {
        return getEndifAttributeAccess().getRule();
    }

    // AbstractIncludeAttribute:
    // IncludeAttribute | IncludeLibAttribute;
    public AbstractIncludeAttributeElements getAbstractIncludeAttributeAccess() {
        return pAbstractIncludeAttribute;
    }

    public ParserRule getAbstractIncludeAttributeRule() {
        return getAbstractIncludeAttributeAccess().getRule();
    }

    // IncludeAttribute:
    // => tag="include" "(" importURI=STRING ")" ".";
    public IncludeAttributeElements getIncludeAttributeAccess() {
        return pIncludeAttribute;
    }

    public ParserRule getIncludeAttributeRule() {
        return getIncludeAttributeAccess().getRule();
    }

    // IncludeLibAttribute:
    // => tag="include_lib" "(" importURI=STRING ")" ".";
    public IncludeLibAttributeElements getIncludeLibAttributeAccess() {
        return pIncludeLibAttribute;
    }

    public ParserRule getIncludeLibAttributeRule() {
        return getIncludeLibAttributeAccess().getRule();
    }

    // FileAttribute:
    // => tag="file" "(" file=STRING "," line=INTEGER ")" ".";
    public FileAttributeElements getFileAttributeAccess() {
        return pFileAttribute;
    }

    public ParserRule getFileAttributeRule() {
        return getFileAttributeAccess().getRule();
    }

    // ModuleAttribute:
    // => tag="module" "(" moduleName=NAME ")" ".";
    public ModuleAttributeElements getModuleAttributeAccess() {
        return pModuleAttribute;
    }

    public ParserRule getModuleAttributeRule() {
        return getModuleAttributeAccess().getRule();
    }

    // EncodingAttribute:
    // => tag="encoding" ("(" charset=NAME ")" | charset=NAME) ".";
    public EncodingAttributeElements getEncodingAttributeAccess() {
        return pEncodingAttribute;
    }

    public ParserRule getEncodingAttributeRule() {
        return getEncodingAttributeAccess().getRule();
    }

    // RecordAttribute:
    // => tag="record" "(" name=NAMEMACRO "," ("{" (fields+=RecordFieldDef (","
    // fields+=RecordFieldDef)*)? "}" |
    // recordMacro=MacroCall) ")" ".";
    public RecordAttributeElements getRecordAttributeAccess() {
        return pRecordAttribute;
    }

    public ParserRule getRecordAttributeRule() {
        return getRecordAttributeAccess().getRule();
    }

    // RecordFieldDef:
    // name=NAMEVAR ("=" value=Expression)? ("::" type=TopType)?;
    public RecordFieldDefElements getRecordFieldDefAccess() {
        return pRecordFieldDef;
    }

    public ParserRule getRecordFieldDefRule() {
        return getRecordFieldDefAccess().getRule();
    }

    // ExportAttribute:
    // => tag="export" "(" "[" (funs+=FunRef ("," funs+=FunRef)*)? "]" ")" ".";
    public ExportAttributeElements getExportAttributeAccess() {
        return pExportAttribute;
    }

    public ParserRule getExportAttributeRule() {
        return getExportAttributeAccess().getRule();
    }

    // ImportAttribute:
    // => tag="import" "(" module=ModuleVarMacro "," "[" (funs+=FunRef (","
    // funs+=FunRef)*)? "]" ")" ".";
    public ImportAttributeElements getImportAttributeAccess() {
        return pImportAttribute;
    }

    public ParserRule getImportAttributeRule() {
        return getImportAttributeAccess().getRule();
    }

    // CompileAttribute:
    // => tag="compile" "(" options=Expression ")" ".";
    public CompileAttributeElements getCompileAttributeAccess() {
        return pCompileAttribute;
    }

    public ParserRule getCompileAttributeRule() {
        return getCompileAttributeAccess().getRule();
    }

    // AbstractTypeAttribute:
    // SpecAttribute | TypeAttribute;
    public AbstractTypeAttributeElements getAbstractTypeAttributeAccess() {
        return pAbstractTypeAttribute;
    }

    public ParserRule getAbstractTypeAttributeRule() {
        return getAbstractTypeAttributeAccess().getRule();
    }

    // SpecAttribute:
    // => tag=("spec" | "callback") (ref=SpecFun signatures+=TypeSig (";"
    // signatures+=TypeSig)* | "(" ref=SpecFun
    // signatures+=TypeSig (";" signatures+=TypeSig)* ")") ".";
    public SpecAttributeElements getSpecAttributeAccess() {
        return pSpecAttribute;
    }

    public ParserRule getSpecAttributeRule() {
        return getSpecAttributeAccess().getRule();
    }

    // TypeAttribute:
    // => tag=("type" | "opaque") (name=NAMEVAR "(" (args+=PatternExpression
    // ("," args+=PatternExpression)*)? ")" "::"
    // type=TopType | "(" name=NAMEVAR "(" (args+=PatternExpression (","
    // args+=PatternExpression)*)? ")" "::" type=TopType
    // ")") ".";
    public TypeAttributeElements getTypeAttributeAccess() {
        return pTypeAttribute;
    }

    public ParserRule getTypeAttributeRule() {
        return getTypeAttributeAccess().getRule();
    }

    // CustomAttribute:
    // tag=ATOM "(" (value+=Expression ("," value+=Expression)*)? ")" ".";
    public CustomAttributeElements getCustomAttributeAccess() {
        return pCustomAttribute;
    }

    public ParserRule getCustomAttributeRule() {
        return getCustomAttributeAccess().getRule();
    }

    // // Functions
    // Function:
    // name=NAME clauses+=FunctionClause (";" clauses+=FunctionClause)* ".";
    public FunctionElements getFunctionAccess() {
        return pFunction;
    }

    public ParserRule getFunctionRule() {
        return getFunctionAccess().getRule();
    }

    // // validate that all names for a function are identical
    // FunctionClause:
    // ref=[Function|NAME]? "(" params=Expressions? ")" ("when"? guard=Guard)?
    // // no 'when' if guard is a macro
    // "->" body=Expressions;
    public FunctionClauseElements getFunctionClauseAccess() {
        return pFunctionClause;
    }

    public ParserRule getFunctionClauseRule() {
        return getFunctionClauseAccess().getRule();
    }

    // Guard:
    // guards+=Expressions (";" guards+=Expressions)*;
    public GuardElements getGuardAccess() {
        return pGuard;
    }

    public ParserRule getGuardRule() {
        return getGuardAccess().getRule();
    }

    // Expressions:
    // exprs+=LExpression ("," exprs+=LExpression)*;
    public ExpressionsElements getExpressionsAccess() {
        return pExpressions;
    }

    public ParserRule getExpressionsRule() {
        return getExpressionsAccess().getRule();
    }

    // LExpression returns Expression:
    // => line?=LineExpr expr=Expression | Expression;
    public LExpressionElements getLExpressionAccess() {
        return pLExpression;
    }

    public ParserRule getLExpressionRule() {
        return getLExpressionAccess().getRule();
    }

    // LineExpr:
    // "?" "line";
    public LineExprElements getLineExprAccess() {
        return pLineExpr;
    }

    public ParserRule getLineExprRule() {
        return getLineExprAccess().getRule();
    }

    // Expression:
    // {CatchExpr} "catch" expr=Expression | Expr100;
    public ExpressionElements getExpressionAccess() {
        return pExpression;
    }

    public ParserRule getExpressionRule() {
        return getExpressionAccess().getRule();
    }

    // // right-associative
    // Expr100 returns Expression:
    // Expr150 ({MatchExpr.opLeft=current} op="=" opRight=Expr100 |
    // {BinOp.opLeft=current} op=SENDOP opRight=Expr100)?;
    public Expr100Elements getExpr100Access() {
        return pExpr100;
    }

    public ParserRule getExpr100Rule() {
        return getExpr100Access().getRule();
    }

    // Expr150 returns Expression:
    // Expr160 ({BinOp.opLeft=current} op="orelse" opRight=Expr160)*;
    public Expr150Elements getExpr150Access() {
        return pExpr150;
    }

    public ParserRule getExpr150Rule() {
        return getExpr150Access().getRule();
    }

    // Expr160 returns Expression:
    // Expr200 ({BinOp.opLeft=current} op="andalso" opRight2=Expr200)*;
    public Expr160Elements getExpr160Access() {
        return pExpr160;
    }

    public ParserRule getExpr160Rule() {
        return getExpr160Access().getRule();
    }

    // // non-associative
    // Expr200 returns Expression:
    // Expr300 ({BinOp.opLeft=current} op=COMPOP opRight=Expr300)?;
    public Expr200Elements getExpr200Access() {
        return pExpr200;
    }

    public ParserRule getExpr200Rule() {
        return getExpr200Access().getRule();
    }

    // Expr300 returns Expression:
    // Expr400 ({BinOp.opLeft=current} op=LISTOP opRight=Expr400)*;
    public Expr300Elements getExpr300Access() {
        return pExpr300;
    }

    public ParserRule getExpr300Rule() {
        return getExpr300Access().getRule();
    }

    // Expr400 returns Expression:
    // Expr500 ({AddOp.opLeft=current} op=ADDOP opRight=Expr500)*;
    public Expr400Elements getExpr400Access() {
        return pExpr400;
    }

    public ParserRule getExpr400Rule() {
        return getExpr400Access().getRule();
    }

    // Expr500 returns Expression:
    // UnaryExpr ({MultOp.opLeft=current} op=MULTOP opRight=UnaryExpr)*;
    public Expr500Elements getExpr500Access() {
        return pExpr500;
    }

    public ParserRule getExpr500Rule() {
        return getExpr500Access().getRule();
    }

    // UnaryExpr returns Expression:
    // {UnaryExpr} op=PREFIXOP operand=Expr700 | Expr700;
    public UnaryExprElements getUnaryExprAccess() {
        return pUnaryExpr;
    }

    public ParserRule getUnaryExprRule() {
        return getUnaryExprAccess().getRule();
    }

    // Expr700 returns Expression:
    // Expr800 // TODO can this be expressed better?
    // // we can have ?MACRO(args)(args2)
    // ("(" {FunCall.target=current} args=Expressions? ")" ("("
    // args2=Expressions? ")")? | ("#" {RecordExpr.ref=current}
    // record=RecordExpr)+)?;
    public Expr700Elements getExpr700Access() {
        return pExpr700;
    }

    public ParserRule getExpr700Rule() {
        return getExpr700Access().getRule();
    }

    // // non-associative
    // Expr800 returns Expression:
    // ExprMax ({RemoteTarget.module=current} ":" function=ExprMax)?;
    public Expr800Elements getExpr800Access() {
        return pExpr800;
    }

    public ParserRule getExpr800Rule() {
        return getExpr800Access().getRule();
    }

    // ExprMax returns Expression:
    // TermExpression | "(" Expression ")" | {BlockExpr} "begin"
    // body=Expressions "end" | IfExpr | CaseExpr | ReceiveExpr |
    // FunExpr | TryExpr | CondExpr | QueryExpr | LetExpr;
    public ExprMaxElements getExprMaxAccess() {
        return pExprMax;
    }

    public ParserRule getExprMaxRule() {
        return getExprMaxAccess().getRule();
    }

    // TermExpression returns Expression:
    // Tuple | ListOrComprehension | BinaryOrComprehension | "#" RecordExpr |
    // LiteralExpression;
    public TermExpressionElements getTermExpressionAccess() {
        return pTermExpression;
    }

    public ParserRule getTermExpressionRule() {
        return getTermExpressionAccess().getRule();
    }

    // MacroCall:
    // macroName=MacroLiteral ("(" args=Expressions? ")")?;
    public MacroCallElements getMacroCallAccess() {
        return pMacroCall;
    }

    public ParserRule getMacroCallRule() {
        return getMacroCallAccess().getRule();
    }

    // RecordExpr:
    // rec=RecordVarMacro ("." field=RecordFieldVarMacro | tuple=RecordTuple);
    public RecordExprElements getRecordExprAccess() {
        return pRecordExpr;
    }

    public ParserRule getRecordExprRule() {
        return getRecordExprAccess().getRule();
    }

    // // NYI
    // QueryExpr:
    // {QueryExpr} "query";
    public QueryExprElements getQueryExprAccess() {
        return pQueryExpr;
    }

    public ParserRule getQueryExprRule() {
        return getQueryExprAccess().getRule();
    }

    // // NYI
    // CondExpr:
    // {CondExpr} "cond";
    public CondExprElements getCondExprAccess() {
        return pCondExpr;
    }

    public ParserRule getCondExprRule() {
        return getCondExprAccess().getRule();
    }

    // // NYI
    // LetExpr:
    // {LetExpr} "let";
    public LetExprElements getLetExprAccess() {
        return pLetExpr;
    }

    public ParserRule getLetExprRule() {
        return getLetExprAccess().getRule();
    }

    // RecordTuple:
    // {RecordTuple} "{" (fields+=RecordFieldExpr (","
    // fields+=RecordFieldExpr)*)? "}";
    public RecordTupleElements getRecordTupleAccess() {
        return pRecordTuple;
    }

    public ParserRule getRecordTupleRule() {
        return getRecordTupleAccess().getRule();
    }

    // RecordFieldExpr:
    // ref=RecordFieldVarMacro ("=" value=Expression)? ("::" type=TopType)?;
    public RecordFieldExprElements getRecordFieldExprAccess() {
        return pRecordFieldExpr;
    }

    public ParserRule getRecordFieldExprRule() {
        return getRecordFieldExprAccess().getRule();
    }

    // LiteralExpressionNoNumber returns Expression:
    // {Atom} value=NAME | VariableLiteral | {ErlChar} value=CHAR | MacroLiteral
    // | StringLiteral;
    public LiteralExpressionNoNumberElements getLiteralExpressionNoNumberAccess() {
        return pLiteralExpressionNoNumber;
    }

    public ParserRule getLiteralExpressionNoNumberRule() {
        return getLiteralExpressionNoNumberAccess().getRule();
    }

    // ModuleRef returns Expression:
    // {AtomRef} value=[Module|NAME];
    public ModuleRefElements getModuleRefAccess() {
        return pModuleRef;
    }

    public ParserRule getModuleRefRule() {
        return getModuleRefAccess().getRule();
    }

    // FunctionRef returns Expression:
    // {AtomRef} value=[Function|NAME];
    public FunctionRefElements getFunctionRefAccess() {
        return pFunctionRef;
    }

    public ParserRule getFunctionRefRule() {
        return getFunctionRefAccess().getRule();
    }

    // RecordRef returns Expression:
    // {AtomRef} value=[RecordAttribute|NAME];
    public RecordRefElements getRecordRefAccess() {
        return pRecordRef;
    }

    public ParserRule getRecordRefRule() {
        return getRecordRefAccess().getRule();
    }

    // RecordFieldRef returns Expression:
    // {AtomRef} value=[RecordFieldDef|NAME];
    public RecordFieldRefElements getRecordFieldRefAccess() {
        return pRecordFieldRef;
    }

    public ParserRule getRecordFieldRefRule() {
        return getRecordFieldRefAccess().getRule();
    }

    // TypeRef returns Expression:
    // {AtomRef} value=[TypeAttribute|NAME];
    public TypeRefElements getTypeRefAccess() {
        return pTypeRef;
    }

    public ParserRule getTypeRefRule() {
        return getTypeRefAccess().getRule();
    }

    // MacroLiteral returns Expression:
    // {Macro} value=[DefineAttribute|MACRO];
    public MacroLiteralElements getMacroLiteralAccess() {
        return pMacroLiteral;
    }

    public ParserRule getMacroLiteralRule() {
        return getMacroLiteralAccess().getRule();
    }

    // MacroRef returns Expression:
    // {Macro} value=[DefineAttribute|NAMEVAR];
    public MacroRefElements getMacroRefAccess() {
        return pMacroRef;
    }

    public ParserRule getMacroRefRule() {
        return getMacroRefAccess().getRule();
    }

    // VariableLiteral returns Expression:
    // {Variable} value=[Expression|VARIABLE];
    public VariableLiteralElements getVariableLiteralAccess() {
        return pVariableLiteral;
    }

    public ParserRule getVariableLiteralRule() {
        return getVariableLiteralAccess().getRule();
    }

    // StringLiteral returns Expression:
    // parts+=StringLiteralLiteral parts+=StringLiteralPart*;
    public StringLiteralElements getStringLiteralAccess() {
        return pStringLiteral;
    }

    public ParserRule getStringLiteralRule() {
        return getStringLiteralAccess().getRule();
    }

    // StringLiteralPart:
    // StringLiteralLiteral | macro=MacroCall;
    public StringLiteralPartElements getStringLiteralPartAccess() {
        return pStringLiteralPart;
    }

    public ParserRule getStringLiteralPartRule() {
        return getStringLiteralPartAccess().getRule();
    }

    // StringLiteralLiteral returns StringLiteralPart:
    // string=STRING;
    public StringLiteralLiteralElements getStringLiteralLiteralAccess() {
        return pStringLiteralLiteral;
    }

    public ParserRule getStringLiteralLiteralRule() {
        return getStringLiteralLiteralAccess().getRule();
    }

    // LiteralExpression returns Expression:
    // LiteralExpressionNoNumber | IntegerLiteral | {ErlFloat} value=FLOAT;
    public LiteralExpressionElements getLiteralExpressionAccess() {
        return pLiteralExpression;
    }

    public ParserRule getLiteralExpressionRule() {
        return getLiteralExpressionAccess().getRule();
    }

    // IntegerLiteral returns Expression:
    // {ErlInteger} value=INTEGER;
    public IntegerLiteralElements getIntegerLiteralAccess() {
        return pIntegerLiteral;
    }

    public ParserRule getIntegerLiteralRule() {
        return getIntegerLiteralAccess().getRule();
    }

    // PatternExpression returns Expression:
    // TermExpression (({MatchExpr.opLeft=current} op="="
    // opRight=TermExpression)+ | {FunCall.target=current} "("
    // args=Expressions? ")")?;
    public PatternExpressionElements getPatternExpressionAccess() {
        return pPatternExpression;
    }

    public ParserRule getPatternExpressionRule() {
        return getPatternExpressionAccess().getRule();
    }

    // IfExpr:
    // "if" clauses+=IfClause (";" clauses+=IfClause)* "end";
    public IfExprElements getIfExprAccess() {
        return pIfExpr;
    }

    public ParserRule getIfExprRule() {
        return getIfExprAccess().getRule();
    }

    // IfClause:
    // guard=Guard "->" body=Expressions;
    public IfClauseElements getIfClauseAccess() {
        return pIfClause;
    }

    public ParserRule getIfClauseRule() {
        return getIfClauseAccess().getRule();
    }

    // CaseExpr:
    // "case" expr=Expression "of" clauses+=CrClause (";" clauses+=CrClause)*
    // "end";
    public CaseExprElements getCaseExprAccess() {
        return pCaseExpr;
    }

    public ParserRule getCaseExprRule() {
        return getCaseExprAccess().getRule();
    }

    // CrClause:
    // expr=Expression ("when" guard=Guard)? "->" body=Expressions;
    public CrClauseElements getCrClauseAccess() {
        return pCrClause;
    }

    public ParserRule getCrClauseRule() {
        return getCrClauseAccess().getRule();
    }

    // ReceiveExpr:
    // "receive" (clauses+=CrClause (";" clauses+=CrClause)* ("after"
    // after_expr=Expression "->" after_body=Expressions)? |
    // "after" after_expr=Expression "->" after_body=Expressions) "end";
    public ReceiveExprElements getReceiveExprAccess() {
        return pReceiveExpr;
    }

    public ParserRule getReceiveExprRule() {
        return getReceiveExprAccess().getRule();
    }

    // FunExpr:
    // "fun" (FunRef | InlineFun);
    public FunExprElements getFunExprAccess() {
        return pFunExpr;
    }

    public ParserRule getFunExprRule() {
        return getFunExprAccess().getRule();
    }

    // FunRef:
    // (module=ModuleVarMacro ":")? function=FunctionVarMacro "/"
    // arity=IntVarMacro;
    public FunRefElements getFunRefAccess() {
        return pFunRef;
    }

    public ParserRule getFunRefRule() {
        return getFunRefAccess().getRule();
    }

    // InlineFun returns FunExpr:
    // clauses+=FunctionClause (";" clauses+=FunctionClause)* "end";
    public InlineFunElements getInlineFunAccess() {
        return pInlineFun;
    }

    public ParserRule getInlineFunRule() {
        return getInlineFunAccess().getRule();
    }

    // TryExpr:
    // "try" body=Expressions ("of" of_clauses+=CrClause (";"
    // of_clauses+=CrClause)*)? ("catch" catch+=TryClause (";"
    // catch+=TryClause)* ("after" after_body=Expressions)? | "after"
    // after_body=Expressions) "end";
    public TryExprElements getTryExprAccess() {
        return pTryExpr;
    }

    public ParserRule getTryExprRule() {
        return getTryExprAccess().getRule();
    }

    // TryClause:
    // => (hdr=NAMEVAR ":")? cond=PatternExpression ("when" guard=Guard)? "->"
    // body=Expressions;
    public TryClauseElements getTryClauseAccess() {
        return pTryClause;
    }

    public ParserRule getTryClauseRule() {
        return getTryClauseAccess().getRule();
    }

    // ListOrComprehension returns ErlList:
    // "[" ({ErlList} | elements+=Expression ("," elements+=Expression)* ("|"
    // tail=Expression |
    // {ListComprehension.root=current} "||" generators+=LCExpr (","
    // generators+=LCExpr)*)?) "]";
    public ListOrComprehensionElements getListOrComprehensionAccess() {
        return pListOrComprehension;
    }

    public ParserRule getListOrComprehensionRule() {
        return getListOrComprehensionAccess().getRule();
    }

    // Tuple returns ErlTuple:
    // "{" ({ErlTuple} | elements+=Expression ("," elements+=Expression)*) "}";
    public TupleElements getTupleAccess() {
        return pTuple;
    }

    public ParserRule getTupleRule() {
        return getTupleAccess().getRule();
    }

    // BinaryOrComprehension returns ErlBinary:
    // "<<" ({ErlBinary} | elements+=BinaryItem ("," elements+=BinaryItem)*
    // ({BinaryComprehension.root=current} "||"
    // generators+=LCExpr ("," generators+=LCExpr)*)?) ">>";
    public BinaryOrComprehensionElements getBinaryOrComprehensionAccess() {
        return pBinaryOrComprehension;
    }

    public ParserRule getBinaryOrComprehensionRule() {
        return getBinaryOrComprehensionAccess().getRule();
    }

    // BinaryItem:
    // expr=UnaryExprMax (":" size=ExprMax)? ("/" types+=BitType ("-"
    // type+=BitType)*)?;
    public BinaryItemElements getBinaryItemAccess() {
        return pBinaryItem;
    }

    public ParserRule getBinaryItemRule() {
        return getBinaryItemAccess().getRule();
    }

    // BitType:
    // typeName=[AtomRefTarget|NAMEMACRO] (":" size=IntVarMacro)?;
    public BitTypeElements getBitTypeAccess() {
        return pBitType;
    }

    public ParserRule getBitTypeRule() {
        return getBitTypeAccess().getRule();
    }

    // UnaryExprMax returns Expression:
    // {UnaryExpr} op=PREFIXOP operand=ExprMax | ExprMax;
    public UnaryExprMaxElements getUnaryExprMaxAccess() {
        return pUnaryExprMax;
    }

    public ParserRule getUnaryExprMaxRule() {
        return getUnaryExprMaxAccess().getRule();
    }

    // LCExpr:
    // o1=Expression (op=("<-" | "<=") o2=Expression)?;
    public LCExprElements getLCExprAccess() {
        return pLCExpr;
    }

    public ParserRule getLCExprRule() {
        return getLCExprAccess().getRule();
    }

    // // Operators
    // ADDOP:
    // "+" | "-" | "bor" | "bxor" | "bsl" | "bsr" | "or" | "xor";
    public ADDOPElements getADDOPAccess() {
        return pADDOP;
    }

    public ParserRule getADDOPRule() {
        return getADDOPAccess().getRule();
    }

    // MULTOP:
    // "*" | "/" | "div" | "rem" | "band" | "and";
    public MULTOPElements getMULTOPAccess() {
        return pMULTOP;
    }

    public ParserRule getMULTOPRule() {
        return getMULTOPAccess().getRule();
    }

    // PREFIXOP:
    // "+" | "-" | "bnot" | "not";
    public PREFIXOPElements getPREFIXOPAccess() {
        return pPREFIXOP;
    }

    public ParserRule getPREFIXOPRule() {
        return getPREFIXOPAccess().getRule();
    }

    // LISTOP:
    // "++" | "--";
    public LISTOPElements getLISTOPAccess() {
        return pLISTOP;
    }

    public ParserRule getLISTOPRule() {
        return getLISTOPAccess().getRule();
    }

    // COMPOP:
    // "==" | "/=" | "=<" | "<" | ">=" | ">" | "=:=" | "=/=";
    public COMPOPElements getCOMPOPAccess() {
        return pCOMPOP;
    }

    public ParserRule getCOMPOPRule() {
        return getCOMPOPAccess().getRule();
    }

    // SENDOP:
    // "!";
    public SENDOPElements getSENDOPAccess() {
        return pSENDOP;
    }

    public ParserRule getSENDOPRule() {
        return getSENDOPAccess().getRule();
    }

    // // Literal combinations
    // ModuleVarMacro returns Expression:
    // ModuleRef | VariableLiteral | MacroLiteral;
    public ModuleVarMacroElements getModuleVarMacroAccess() {
        return pModuleVarMacro;
    }

    public ParserRule getModuleVarMacroRule() {
        return getModuleVarMacroAccess().getRule();
    }

    // FunctionVarMacro returns Expression:
    // FunctionRef | VariableLiteral | MacroLiteral;
    public FunctionVarMacroElements getFunctionVarMacroAccess() {
        return pFunctionVarMacro;
    }

    public ParserRule getFunctionVarMacroRule() {
        return getFunctionVarMacroAccess().getRule();
    }

    // RecordVarMacro returns Expression:
    // RecordRef | VariableLiteral | MacroLiteral;
    public RecordVarMacroElements getRecordVarMacroAccess() {
        return pRecordVarMacro;
    }

    public ParserRule getRecordVarMacroRule() {
        return getRecordVarMacroAccess().getRule();
    }

    // RecordFieldVarMacro returns Expression:
    // RecordFieldRef | VariableLiteral | MacroLiteral;
    public RecordFieldVarMacroElements getRecordFieldVarMacroAccess() {
        return pRecordFieldVarMacro;
    }

    public ParserRule getRecordFieldVarMacroRule() {
        return getRecordFieldVarMacroAccess().getRule();
    }

    // TypeVarMacro returns Expression:
    // TypeRef | VariableLiteral | MacroLiteral;
    public TypeVarMacroElements getTypeVarMacroAccess() {
        return pTypeVarMacro;
    }

    public ParserRule getTypeVarMacroRule() {
        return getTypeVarMacroAccess().getRule();
    }

    // IntVarMacro returns Expression:
    // IntegerLiteral | VariableLiteral | MacroLiteral;
    public IntVarMacroElements getIntVarMacroAccess() {
        return pIntVarMacro;
    }

    public ParserRule getIntVarMacroRule() {
        return getIntVarMacroAccess().getRule();
    }

    // // Literals
    // NAME:
    // ATOM | KW;
    public NAMEElements getNAMEAccess() {
        return pNAME;
    }

    public ParserRule getNAMERule() {
        return getNAMEAccess().getRule();
    }

    // NAMEVAR:
    // ATOM | KW | VARIABLE;
    public NAMEVARElements getNAMEVARAccess() {
        return pNAMEVAR;
    }

    public ParserRule getNAMEVARRule() {
        return getNAMEVARAccess().getRule();
    }

    // MACRO:
    // ("?" | "??") (ATOM | KW1 | VARIABLE);
    public MACROElements getMACROAccess() {
        return pMACRO;
    }

    public ParserRule getMACRORule() {
        return getMACROAccess().getRule();
    }

    // NAMEVARMACRO:
    // ATOM | KW | VARIABLE | MACRO;
    public NAMEVARMACROElements getNAMEVARMACROAccess() {
        return pNAMEVARMACRO;
    }

    public ParserRule getNAMEVARMACRORule() {
        return getNAMEVARMACROAccess().getRule();
    }

    // NAMEMACRO:
    // ATOM | KW | MACRO;
    public NAMEMACROElements getNAMEMACROAccess() {
        return pNAMEMACRO;
    }

    public ParserRule getNAMEMACRORule() {
        return getNAMEMACROAccess().getRule();
    }

    // KW:
    // KW1 | "line";
    public KWElements getKWAccess() {
        return pKW;
    }

    public ParserRule getKWRule() {
        return getKWAccess().getRule();
    }

    // KW1:
    // "spec" | "endif" | "ifdef" | "ifndef" | "type" | "opaque" | "record" |
    // "undef" | "module" | "include" | "include_lib"
    // | "define" | "file" | "callback" | "else" | "export" | "import" |
    // "compile" | "encoding";
    public KW1Elements getKW1Access() {
        return pKW1;
    }

    public ParserRule getKW1Rule() {
        return getKW1Access().getRule();
    }

    // RealKw:
    // "after" | "and" | "andalso" | "band" | "begin" | "bnot" | "bor" | "bsl" |
    // "bsr" | "bxor" | "case" | "catch" | "cond"
    // | "div" | "end" | "fun" | "if" | "let" | "not" | "of" | "or" | "orelse" |
    // "query" | "receive" | "rem" | "try" |
    // "when" | "xor";
    public RealKwElements getRealKwAccess() {
        return pRealKw;
    }

    public ParserRule getRealKwRule() {
        return getRealKwAccess().getRule();
    }

    // terminal ATOM:
    // ATOM_STARTER IN_WORD_CHAR* | "\'" ("\\" ESCAPE | !("\\" | "\'"))* ("\'" |
    // EOF);
    public TerminalRule getATOMRule() {
        return tATOM;
    }

    // terminal STRING:
    // "\"" ("\\" ESCAPE | !("\\" | "\""))* ("\"" | EOF);
    public TerminalRule getSTRINGRule() {
        return tSTRING;
    }

    // terminal VARIABLE:
    // ("A".."Z" | "_" | "?".."?" | "?".."?") IN_WORD_CHAR*;
    public TerminalRule getVARIABLERule() {
        return tVARIABLE;
    }

    // terminal fragment COMMENT:
    // "%" !("\n" | "\r")* ("\r"? "\n" | EOF);
    public TerminalRule getCOMMENTRule() {
        return tCOMMENT;
    }

    // terminal SL_COMMENT:
    // COMMENT+;
    public TerminalRule getSL_COMMENTRule() {
        return tSL_COMMENT;
    }

    // // FIXME what when input is utf8?
    // terminal WS:
    // !("!".."~" | "�".."�")+;
    public TerminalRule getWSRule() {
        return tWS;
    }

    // INTEGER:
    // INT | BASED_INT;
    public INTEGERElements getINTEGERAccess() {
        return pINTEGER;
    }

    public ParserRule getINTEGERRule() {
        return getINTEGERAccess().getRule();
    }

    // terminal BASED_INT:
    // "1".."3"? "0".."9" "#" ("0".."9" | "a".."z" | "A".."Z")+;
    public TerminalRule getBASED_INTRule() {
        return tBASED_INT;
    }

    // terminal INT:
    // "0".."9"+;
    public TerminalRule getINTRule() {
        return tINT;
    }

    // FLOAT hidden():
    // INT "." (EXT_INT | INT);
    public FLOATElements getFLOATAccess() {
        return pFLOAT;
    }

    public ParserRule getFLOATRule() {
        return getFLOATAccess().getRule();
    }

    // terminal EXT_INT:
    // INT ("e" | "E") ("+" | "-")? INT;
    public TerminalRule getEXT_INTRule() {
        return tEXT_INT;
    }

    // terminal CHAR:
    // "$" ("\\" ESCAPE | .);
    public TerminalRule getCHARRule() {
        return tCHAR;
    }

    // terminal fragment IN_WORD_CHAR:
    // "a".."z" | "A".."Z" | "_" | "@" | "0".."9" | "?".."?" | "?".."?" |
    // "?".."?" | "?".."?";
    public TerminalRule getIN_WORD_CHARRule() {
        return tIN_WORD_CHAR;
    }

    // terminal fragment ATOM_STARTER:
    // "a".."z" | "?".."?" | "?".."?";
    public TerminalRule getATOM_STARTERRule() {
        return tATOM_STARTER;
    }

    // terminal fragment ESCAPE:
    // "b" | "d" | "e" | "f" | "n" | "r" | "s" | "t" | "v" | "0".."7" ("0".."7"
    // "0".."7"?)? | ("x" | "X") HEX_DIGIT
    // HEX_DIGIT | ("x" | "X") "{" HEX_DIGIT+ "}" | "^" ("a".."z" | "A".."Z" |
    // "]") | .;
    public TerminalRule getESCAPERule() {
        return tESCAPE;
    }

    // terminal fragment HEX_DIGIT:
    // "0".."9" | "A".."F" | "a".."f";
    public TerminalRule getHEX_DIGITRule() {
        return tHEX_DIGIT;
    }

    // // Type language
    // SpecFun returns FunRef:
    // (module=ModuleVarMacro ":")? function=FunctionVarMacro ("/"
    // arity=IntVarMacro "::")?;
    public SpecFunElements getSpecFunAccess() {
        return pSpecFun;
    }

    public ParserRule getSpecFunRule() {
        return getSpecFunAccess().getRule();
    }

    // TypeSig:
    // decl=FunType ("when" guards=TypeGuards)?;
    public TypeSigElements getTypeSigAccess() {
        return pTypeSig;
    }

    public ParserRule getTypeSigRule() {
        return getTypeSigAccess().getRule();
    }

    // FunType:
    // "(" (args+=TopType ("," args+=TopType)*)? ")" "->" return=TopType;
    public FunTypeElements getFunTypeAccess() {
        return pFunType;
    }

    public ParserRule getFunTypeRule() {
        return getFunTypeAccess().getRule();
    }

    // TypeGuards:
    // items+=TypeGuard ("," items+=TypeGuard)*;
    public TypeGuardsElements getTypeGuardsAccess() {
        return pTypeGuards;
    }

    public ParserRule getTypeGuardsRule() {
        return getTypeGuardsAccess().getRule();
    }

    // TypeGuard:
    // typeName=TypeRef "(" types+=TopType ("," types+=TopType)* ")" |
    // typeName=VariableLiteral "::" type=TopType;
    public TypeGuardElements getTypeGuardAccess() {
        return pTypeGuard;
    }

    public ParserRule getTypeGuardRule() {
        return getTypeGuardAccess().getRule();
    }

    // TopType:
    // (var=VARIABLE "::")? type=Type100;
    public TopTypeElements getTopTypeAccess() {
        return pTopType;
    }

    public ParserRule getTopTypeRule() {
        return getTopTypeAccess().getRule();
    }

    // Type100:
    // Type200 (=> ({TopType.leftOperand=current} op="|")
    // rightOperand=Type200)*;
    public Type100Elements getType100Access() {
        return pType100;
    }

    public ParserRule getType100Rule() {
        return getType100Access().getRule();
    }

    // Type200:
    // Type300 (=> ({TopType.leftOperand=current} op="..")
    // rightOperand=Type300)*;
    public Type200Elements getType200Access() {
        return pType200;
    }

    public ParserRule getType200Rule() {
        return getType200Access().getRule();
    }

    // Type300:
    // Type400 (=> ({TopType.leftOperand=current} op=ADDOP)
    // rightOperand=Type400)*;
    public Type300Elements getType300Access() {
        return pType300;
    }

    public ParserRule getType300Rule() {
        return getType300Access().getRule();
    }

    // Type400:
    // Type500 (=> ({TopType.leftOperand=current} op=MULTOP)
    // rightOperand=Type500)*;
    public Type400Elements getType400Access() {
        return pType400;
    }

    public ParserRule getType400Rule() {
        return getType400Access().getRule();
    }

    // Type500:
    // {UnaryType} op=PREFIXOP operand=Type | Type;
    public Type500Elements getType500Access() {
        return pType500;
    }

    public ParserRule getType500Rule() {
        return getType500Access().getRule();
    }

    // Type:
    // "(" TopType ")" | {RemoteType} (m=ModuleVarMacro ":")? typeName=TypeRef
    // ("(" (args+=TopType ("," args+=TopType)*)?
    // ")")? | typeName=VariableLiteral | value=INTEGER | "[" {ListType}
    // (type=TopType ("," "...")?)? "]" | "{" {TupleType}
    // (types+=TopType ("," types+=TopType)*)? "}" | "#" {RecordType}
    // rec=RecordRef "{" (fields+=FieldType (","
    // fields+=FieldType)*)? "}" | BinaryType | "fun" {FunType} "("
    // type=FunType100? ")";
    public TypeElements getTypeAccess() {
        return pType;
    }

    public ParserRule getTypeRule() {
        return getTypeAccess().getRule();
    }

    // FieldType:
    // typeName=[TypeAttribute|ATOM] "::" type=TopType;
    public FieldTypeElements getFieldTypeAccess() {
        return pFieldType;
    }

    public ParserRule getFieldTypeRule() {
        return getFieldTypeAccess().getRule();
    }

    // BinaryType:
    // "<<" {BinaryType} (type+=BinBaseType ("," type+=BinUnitType)? |
    // type+=BinUnitType)? ">>";
    public BinaryTypeElements getBinaryTypeAccess() {
        return pBinaryType;
    }

    public ParserRule getBinaryTypeRule() {
        return getBinaryTypeAccess().getRule();
    }

    // BinBaseType:
    // typeName=VariableLiteral ":" type=Type;
    public BinBaseTypeElements getBinBaseTypeAccess() {
        return pBinBaseType;
    }

    public ParserRule getBinBaseTypeRule() {
        return getBinBaseTypeAccess().getRule();
    }

    // BinUnitType:
    // typeName=VariableLiteral ":" m=VARIABLE "*" type=Type;
    public BinUnitTypeElements getBinUnitTypeAccess() {
        return pBinUnitType;
    }

    public ParserRule getBinUnitTypeRule() {
        return getBinUnitTypeAccess().getRule();
    }

    // FunType100:
    // {FunTypeList} "(" ("..." | items+=TopType ("," items+=TopType)*)? ")"
    // "->" return=TopType;
    public FunType100Elements getFunType100Access() {
        return pFunType100;
    }

    public ParserRule getFunType100Rule() {
        return getFunType100Access().getRule();
    }
}
