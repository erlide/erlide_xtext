/*
 * generated by Xtext
 */
package org.erlide.ui.labeling;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.erlide.erlang.Attribute;
import org.erlide.erlang.Expression;
import org.erlide.erlang.Form;
import org.erlide.erlang.Function;
import org.erlide.erlang.FunctionClause;
import org.erlide.erlang.Module;
import org.erlide.erlang.ModuleAttribute;

import com.google.inject.Inject;

/**
 * Provides labels for a EObjects.
 * 
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class ErlangLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public ErlangLabelProvider(final AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	public String text(final Module ele) {
		final Form first = ele.getForms().get(0);
		final String name = first instanceof ModuleAttribute ? ((ModuleAttribute) first)
				.getModuleName() : first.toString() + "?";
		return "module " + name;
	}

	// public String text(final Attribute ele) {
	// final String tag = ele.getTag();
	// return "-" + tag + " -- " + ele.getVal();
	// }

	public String text(final Function ele) {
		if (ele.getClauses() == null || ele.getClauses().size() == 0) {
			return "???";
		}
		final EList<Expression> params = ele.getClauses().get(0).getParams();
		return ele.getName() + "/" + (params == null ? "0" : params.size());
	}

	public String text(final FunctionClause ele) {
		return "(" + ele.getParams() + ")";
	}

	public String text(final EObject ele) {
		return ele.getClass().getSimpleName() + " "
				+ ele.eCrossReferences().size();
	}

	public String image(final Attribute ele) {
		return "MyModel.gif";
	}

}
